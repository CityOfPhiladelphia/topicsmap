{"version":3,"sources":["webpack:///../phila-vue-mapping/src/cyclomedia/Widget.vue?48ee","webpack:///../phila-vue-mapping/node_modules/proj4/lib/global.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/constants/values.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/constants/PrimeMeridian.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/constants/units.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/match.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/projString.js","webpack:///../phila-vue-mapping/node_modules/wkt-parser/parser.js","webpack:///../phila-vue-mapping/node_modules/wkt-parser/process.js","webpack:///../phila-vue-mapping/node_modules/wkt-parser/index.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/defs.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/parseCode.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/extend.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/common/msfnz.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/common/sign.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/common/adjust_lon.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/common/tsfnz.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/common/phi2z.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/projections/merc.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/projections/longlat.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/projections.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/constants/Ellipsoid.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/deriveConstants.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/constants/Datum.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/datum.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/Proj.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/datumUtils.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/datum_transform.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/adjust_axis.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/common/toPoint.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/checkSanity.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/transform.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/core.js","webpack:///../phila-vue-mapping/node_modules/mgrs/mgrs.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/Point.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/common/pj_enfn.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/common/pj_mlfn.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/common/pj_inv_mlfn.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/projections/tmerc.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/common/sinh.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/common/hypot.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/common/log1py.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/common/asinhy.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/common/gatg.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/common/clens.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/common/cosh.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/common/clens_cmplx.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/projections/etmerc.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/common/adjust_zone.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/projections/utm.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/common/srat.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/projections/gauss.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/projections/sterea.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/projections/stere.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/projections/somerc.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/projections/omerc.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/projections/lcc.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/projections/krovak.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/common/mlfn.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/common/e0fn.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/common/e1fn.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/common/e2fn.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/common/e3fn.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/common/gN.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/common/adjust_lat.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/common/imlfn.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/projections/cass.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/common/qsfnz.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/projections/laea.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/common/asinz.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/projections/aea.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/projections/gnom.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/common/iqsfnz.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/projections/cea.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/projections/eqc.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/projections/poly.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/projections/nzmg.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/projections/mill.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/projections/sinu.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/projections/moll.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/projections/eqdc.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/projections/vandg.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/projections/aeqd.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/projections/ortho.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/projections/qsc.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/projections/robin.js","webpack:///../phila-vue-mapping/node_modules/proj4/projs.js","webpack:///../phila-vue-mapping/node_modules/proj4/lib/index.js","webpack:///../phila-vue-mapping/src/cyclomedia/Widget.vue","webpack:///../phila-vue-mapping/src/cyclomedia/Widget.vue?6886","webpack:///../phila-vue-mapping/src/cyclomedia/Widget.vue?f5f7","webpack:///../phila-vue-mapping/src/cyclomedia/Widget.vue?33cd"],"names":["render","_vm","this","_h","$createElement","_c","_self","class","cycloContainerClass","attrs","id","isMobileOrTablet","popoutAble","style","right","popoutPosition","on","click","popoutClicked","staticClass","icon","_e","ref","staticRenderFns","global","defs","WGS84","GOOGLE","PJD_3PARAM","PJD_7PARAM","PJD_WGS84","PJD_NODATUM","SEC_TO_RAD","HALF_PI","Math","PI","SIXTH","RA4","RA6","EPSLN","D2R","R2D","FORTPI","TWO_PI","SPI","PrimeMeridian_exports","greenwich","lisbon","paris","bogota","madrid","rome","bern","jakarta","ferro","brussels","stockholm","athens","oslo","units","ft","to_meter","us-ft","ignoredChar","match","obj","key","testkey","processedKey","keys","Object","lkey","toLowerCase","replace","i","length","projString","defData","paramName","paramVal","paramOutname","self","paramObj","split","map","v","trim","filter","a","reduce","p","push","params","proj","datum","rf","parseFloat","lat_0","lat0","lat_1","lat1","lat_2","lat2","lat_ts","lon_0","long0","lon_1","long1","lon_2","long2","alpha","lonc","longc","x_0","x0","y_0","y0","k_0","k0","k","b","r_a","R_A","zone","parseInt","south","utmSouth","towgs84","datum_params","unit","from_greenwich","pm","nadgrids","datumCode","axis","legalAxis","indexOf","substr","parser","NEUTRAL","KEYWORD","NUMBER","QUOTED","AFTERQUOTE","ENDED","whitespace","latin","keyword","endThings","digets","Parser","text","Error","level","place","root","stack","currentObject","state","parseString","txt","output","mapit","value","Array","isArray","unshift","thing","out","newObj","item","sExpr","shift","name","convert","prototype","readCharicter","char","test","neutral","quoted","afterquote","number","word","afterItem","pop","newObjects","wkt_parser_D2R","rename","outName","inName","d2r","input","cleanWKT","wkt","type","projName","local","PROJECTION","UNIT","DATUM","SPHEROID","geogcs","GEOGCS","toMeter","ratio","slice","sphere","ellps","TOWGS84","isFinite","renamer","list","forEach","wkt_parser","lisp","that","arguments","def","charAt","apply","EPSG","ESRI","IAU2000","console","log","lib_defs","testObj","code","testDef","codeWords","testWKT","some","codes","checkMercator","auth","checkProjStr","ext","testProj","parse","maybeProjStr","parseCode","extend","destination","source","property","undefined","msfnz","eccent","sinphi","cosphi","con","sqrt","sign","x","adjust_lon","abs","tsfnz","phi","com","pow","tan","phi2z","ts","dphi","eccnth","atan","sin","init","es","e","cos","forward","y","lon","lat","inverse","exp","names","merc","longlat_init","identity","pt","longlat_names","longlat","projs","projections_names","projStore","add","len","n","get","start","projections","Ellipsoid_exports","MERIT","ellipseName","SGS85","GRS80","IAU76","airy","APL4","NWL9D","mod_airy","andrae","aust_SA","GRS67","bessel","bess_nam","clrk66","clrk80","clrk58","CPM","delmbr","engelis","evrst30","evrst48","evrst56","evrst69","evrstSS","fschr60","fschr60m","fschr68","helmert","hough","intl","kaula","lerch","mprts","new_intl","plessis","krass","SEasia","walbeck","WGS60","WGS66","WGS7","eccentricity","a2","b2","ep2","deriveConstants_sphere","ellipse","Datum_exports","datum_type","wgs84","datumName","ch1903","ggrs87","nad83","nad27","potsdam","carthage","hermannskogel","osni52","ire65","rassadiran","nzgd49","osgb36","s_jtsk","beduaram","gunung_segara","rnb72","lib_datum","Projection","srsCode","callback","error","json","ourProj","datumDef","sphere_","ecc","datumObj","Proj","compareDatums","dest","geodeticToGeocentric","Rn","Sin_Lat","Sin2_Lat","Cos_Lat","Longitude","Latitude","Height","z","Infinity","geocentricToGeodetic","P","RR","CT","ST","RX","RK","RN","CPHI0","SPHI0","CPHI","SPHI","SDPHI","iter","genau","genau2","maxiter","X","Y","Z","atan2","geocentricToWgs84","Dx_BF","Dy_BF","Dz_BF","Rx_BF","Ry_BF","Rz_BF","M_BF","geocentricFromWgs84","x_tmp","y_tmp","z_tmp","checkParams","datum_transform","point","adjust_axis","crs","denorm","t","xin","yin","zin","toPoint","array","m","checkSanity","checkCoord","num","Number","TypeError","checkNotWGS","transform","core_wgs84","transformer","from","to","coords","transformedArray","checkProj","oProj","core_proj4","fromProj","toProj","coord","single","core","NUM_100K_SETS","SET_ORIGIN_COLUMN_LETTERS","SET_ORIGIN_ROW_LETTERS","mgrs_A","I","O","mgrs_V","mgrs_Z","mgrs","mgrs_forward","mgrs_inverse","mgrs_toPoint","ll","accuracy","encode","LLtoUTM","bbox","UTMtoLL","decode","toUpperCase","left","bottom","top","degToRad","deg","radToDeg","rad","LongOrigin","eccPrimeSquared","N","T","C","A","M","LongOriginRad","ZoneNumber","Lat","Long","eccSquared","LatRad","LongRad","floor","UTMEasting","UTMNorthing","northing","round","easting","zoneNumber","zoneLetter","getLetterDesignator","utm","N1","T1","C1","R1","D","mu","phi1Rad","e1","result","topRight","LetterDesignator","seasting","snorthing","get100kID","setParm","get100kSetForZone","setColumn","setRow","getLetter100kID","column","row","parm","index","colOrigin","charCodeAt","rowOrigin","colInt","rowInt","rollover","twoLetter","String","fromCharCode","mgrsString","testChar","hunK","sb","substring","set","east100k","getEastingFromChar","north100k","getNorthingFromChar","getMinNorthing","remainder","accuracyBonus","sepEastingString","sepNorthingString","sep","sepEasting","sepNorthing","curCol","eastingValue","rewindMarker","curRow","northingValue","Point","warn","fromMGRS","mgrsStr","toMGRS","lib_Point","C00","C02","C04","C06","C08","C22","C44","C46","C48","C66","C68","C88","pj_enfn","en","pj_mlfn","sphi","cphi","MAX_ITER","pj_inv_mlfn","arg","s","tmerc_init","ml0","tmerc_forward","delta_lon","sin_phi","cos_phi","al","als","c","cs","tq","ml","acos","tmerc_inverse","tan_phi","d","ds","f","g","temp","h","asin","tmerc_names","tmerc","sinh","r","hypot","max","min","log1py","asinhy","gatg","pp","B","cos_2B","h1","h2","clens","arg_r","hr","hr1","hr2","cosh","clens_cmplx","arg_i","hi2","sin_arg_r","cos_arg_r","sinh_arg_i","cosh_arg_i","j","hi1","hi","etmerc_init","cgb","cbg","utg","gtu","np","Qn","Zb","etmerc_forward","Ce","Cn","sin_Cn","cos_Cn","sin_Ce","cos_Ce","tmp","etmerc_inverse","etmerc_names","etmerc","adjust_zone","dependsOn","utm_init","utm_names","srat","esinp","gauss_MAX_ITER","gauss_init","rc","phic0","ratexp","K","gauss_forward","gauss_inverse","DEL_TOL","gauss_names","gauss","sterea_init","sinc0","cosc0","R2","title","sterea_forward","sinc","cosc","cosl","sterea_inverse","rho","sterea_names","sterea","ssfn_","phit","eccen","stere_init","coslat0","sinlat0","isNaN","cons","ms1","X0","cosX0","sinX0","stere_forward","sinX","cosX","rh","sinlat","coslat","dlon","NaN","stere_inverse","ce","Chi","stere_names","stere","somerc_init","phy0","lambda0","sinPhy0","semiMajorAxis","invF","flattening","e2","R","b0","k1","k2","k3","somerc_forward","Sa1","Sa2","S","rotI","rotB","somerc_inverse","lambda","phy","prevPhy","iteration","somerc_names","somerc","omerc_init","no_off","no_rot","bl","fl","gl","t0","dl","t1","t2","el","hl","jl","pl","dlon12","dlon10","gamma0","uc","omerc_forward","us","vs","ql","sl","tl","vl","ul","POSITIVE_INFINITY","omerc_inverse","qp","sp","tp","vp","up","omerc_names","omerc","lcc_init","sin1","cos1","ts1","sin2","cos2","ms2","ts2","ts0","ns","f0","lcc_forward","rh1","theta","lcc_inverse","lcc_names","lcc","krovak_init","s45","s90","fi0","alfa","uq","u0","n0","s0","ro0","ad","krovak_forward","gfi","u","deltav","eps","ro","czech","krovak_inverse","fi1","ok","krovak_names","krovak","mlfn","e0","e3","e0fn","e1fn","e2fn","e3fn","gN","adjust_lat","imlfn","cass_init","cass_forward","lam","nl","asq","cl","cass_inverse","dd","ml1","phi1","nl1","rl1","tl1","dsq","cass_names","cass","qsfnz","S_POLE","N_POLE","EQUIT","OBLIQ","laea_init","mode","mmf","apa","authset","rq","xmf","ymf","sinb1","cosb1","sinph0","cosph0","laea_forward","coslam","sinlam","q","sinb","cosb","phi0","laea_inverse","cCe","sCe","ab","cosz","sinz","authlat","P00","P01","P02","P10","P11","P20","APA","beta","laea_names","laea","asinz","aea_init","sin_po","cos_po","qs1","qs2","t3","qs0","ns0","aea_forward","qs","aea_inverse","phi1z","eccnts","aea_names","aea","gnom_init","sin_p14","cos_p14","infinity_dist","gnom_forward","coslon","ksp","gnom_inverse","gnom_names","gnom","iqsfnz","cea_init","cea_forward","cea_inverse","cea_names","cea","eqc_init","eqc_forward","dlat","eqc_inverse","eqc_names","eqc","poly_MAX_ITER","poly_init","poly_forward","poly_inverse","tanphi","mln","mlnp","ma","poly_names","poly","nzmg_init","B_re","B_im","C_re","C_im","nzmg_forward","delta_lat","d_phi","d_lambda","d_phi_n","d_psi","th_n_re1","th_n_im1","th_re","th_im","th_n_re","th_n_im","z_re","z_im","nzmg_inverse","z_n_re1","z_n_im1","delta_x","delta_y","z_n_re","z_n_im","iterations","num_re","num_im","den_re","den_im","den2","d_psi_n","nzmg_names","nzmg","mill_init","mill_forward","mill_inverse","mill_names","mill","sinu_MAX_ITER","sinu_init","C_y","C_x","sinu_forward","V","sinu_inverse","sinu_names","sinu","moll_init","moll_forward","delta_theta","moll_inverse","moll_names","moll","eqdc_init","ml2","eqdc_forward","eqdc_inverse","eqdc_names","eqdc","vandg_init","vandg_forward","sinth","costh","gsq","msq","vandg_inverse","xx","yy","xys","c1","c2","c3","a1","m1","th1","vandg_names","vandg","aeqd_init","sin_p12","cos_p12","aeqd_forward","Mlp","Ml","Nl1","Nl","psi","Az","G","H","GH","Hs","kp","cos_c","s2","s3","s4","s5","aeqd_inverse","cosAz","Ee","F","aeqd_names","aeqd","ortho_init","ortho_forward","ortho_inverse","ortho_names","ortho","FACE_ENUM","FRONT","RIGHT","BACK","LEFT","TOP","BOTTOM","AREA_ENUM","AREA_0","AREA_1","AREA_2","AREA_3","qsc_init","face","one_minus_f","one_minus_f_squared","qsc_forward","xy","area","sinlon","qsc_shift_lon_origin","qsc_fwd_equat_face_theta","qsc_inverse","nu","cosmu","tannu","tantheta","invert_sign","xa","lp","offset","slon","qsc_names","qsc","COEFS_X","COEFS_Y","FXC","FYC","RC1","NODES","poly3_val","coefs","poly3_der","newton_rapshon","f_df","max_err","iters","upd","robin_init","robin_forward","robin_inverse","robin_names","robin","proj4_projs","proj4","defaultDatum","version","proj4_package","lib","Widgetvue_type_script_lang_js_","data","docWidth","divWidth","props","computed","$store","fullScreenMapEnabled","answer","$config","cyclomedia","cyclomediaInitialized","initialized","cyclomediaActive","active","pictometryActive","pictometry","locForCyclo","geocodeData","geocode","geometry","coordinates","latLngFromMap","mapCenter","center","navBarOpen","projection4326","projection2272","watch","setDivWidth","newCoords","setNewLocation","is_array_default","lng","_this","StreetSmartApi","targetElement","$refs","cycloviewer","username","password","apiKey","srs","locale","addressSettings","database","then","err","window","addEventListener","newActiveStatus","updated","panoramaViewer","rotateRight","methods","document","body","clientWidth","getElementById","divStyle","getComputedStyle","parse_float_default","getPropertyValue","$props","screenPercent","viewerType","ViewerType","PANORAMA","coords2272","open","closable","maximizable","widget","getType","sendOrientationToStore","toggleNavbarExpanded","toggleButtonEnabled","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","get_iterator_default","overlays","next","done","overlay","visible","toggleOverlay","return","measurementAllowed","removeOverlay","orientation","yaw","xyz","getNavbarExpanded","commit","bind","catch","reason","hFov","lnglat","getCenter","cyclomedia_Widgetvue_type_script_lang_js_","component","componentNormalizer","__webpack_exports__","_topicsmap_node_modules_mini_css_extract_plugin_dist_loader_js_ref_6_oneOf_1_0_topicsmap_node_modules_css_loader_index_js_ref_6_oneOf_1_1_topicsmap_node_modules_vue_loader_lib_loaders_stylePostLoader_js_topicsmap_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_topicsmap_node_modules_cache_loader_dist_cjs_js_ref_0_0_topicsmap_node_modules_vue_loader_lib_index_js_vue_loader_options_Widget_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_topicsmap_node_modules_mini_css_extract_plugin_dist_loader_js_ref_6_oneOf_1_0_topicsmap_node_modules_css_loader_index_js_ref_6_oneOf_1_1_topicsmap_node_modules_vue_loader_lib_loaders_stylePostLoader_js_topicsmap_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_topicsmap_node_modules_cache_loader_dist_cjs_js_ref_0_0_topicsmap_node_modules_vue_loader_lib_index_js_vue_loader_options_Widget_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0___default"],"mappings":"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","file":"js/mbmb_pvm_CyclomediaWidget.8cf0fb66.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{class:this.cycloContainerClass,attrs:{\"id\":\"cyclo-container\"}},[(this.isMobileOrTablet === false && this.popoutAble === true)?_c('div',{style:({ right: _vm.popoutPosition }),attrs:{\"id\":\"inCycloDiv\"},on:{\"click\":this.popoutClicked}},[_c('font-awesome-icon',{staticClass:\"popout-icon\",attrs:{\"icon\":\"external-link-alt\"}})],1):_vm._e(),_c('div',{ref:\"cycloviewer\",staticClass:\"panoramaViewerWindow\",attrs:{\"id\":\"cycloviewer\"}})])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","export default function(defs) {\n  defs('EPSG:4326', \"+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees\");\n  defs('EPSG:4269', \"+title=NAD83 (long/lat) +proj=longlat +a=6378137.0 +b=6356752.31414036 +ellps=GRS80 +datum=NAD83 +units=degrees\");\n  defs('EPSG:3857', \"+title=WGS 84 / Pseudo-Mercator +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs\");\n\n  defs.WGS84 = defs['EPSG:4326'];\n  defs['EPSG:3785'] = defs['EPSG:3857']; // maintain backward compat, official code is 3857\n  defs.GOOGLE = defs['EPSG:3857'];\n  defs['EPSG:900913'] = defs['EPSG:3857'];\n  defs['EPSG:102113'] = defs['EPSG:3857'];\n}\n","export var PJD_3PARAM = 1;\nexport var PJD_7PARAM = 2;\nexport var PJD_WGS84 = 4; // WGS84 or equivalent\nexport var PJD_NODATUM = 5; // WGS84 or equivalent\nexport var SEC_TO_RAD = 4.84813681109535993589914102357e-6;\nexport var HALF_PI = Math.PI/2;\n// ellipoid pj_set_ell.c\nexport var SIXTH = 0.1666666666666666667;\n/* 1/6 */\nexport var RA4 = 0.04722222222222222222;\n/* 17/360 */\nexport var RA6 = 0.02215608465608465608;\nexport var EPSLN = 1.0e-10;\n// you'd think you could use Number.EPSILON above but that makes\n// Mollweide get into an infinate loop.\n\nexport var D2R = 0.01745329251994329577;\nexport var R2D = 57.29577951308232088;\nexport var FORTPI = Math.PI/4;\nexport var TWO_PI = Math.PI * 2;\n// SPI is slightly greater than Math.PI, so values that exceed the -180..180\n// degree range by a tiny amount don't get wrapped. This prevents points that\n// have drifted from their original location along the 180th meridian (due to\n// floating point error) from changing their sign.\nexport var SPI = 3.14159265359;\n","var exports = {};\nexport {exports as default};\n\nexports.greenwich = 0.0; //\"0dE\",\nexports.lisbon = -9.131906111111; //\"9d07'54.862\\\"W\",\nexports.paris = 2.337229166667; //\"2d20'14.025\\\"E\",\nexports.bogota = -74.080916666667; //\"74d04'51.3\\\"W\",\nexports.madrid = -3.687938888889; //\"3d41'16.58\\\"W\",\nexports.rome = 12.452333333333; //\"12d27'8.4\\\"E\",\nexports.bern = 7.439583333333; //\"7d26'22.5\\\"E\",\nexports.jakarta = 106.807719444444; //\"106d48'27.79\\\"E\",\nexports.ferro = -17.666666666667; //\"17d40'W\",\nexports.brussels = 4.367975; //\"4d22'4.71\\\"E\",\nexports.stockholm = 18.058277777778; //\"18d3'29.8\\\"E\",\nexports.athens = 23.7163375; //\"23d42'58.815\\\"E\",\nexports.oslo = 10.722916666667; //\"10d43'22.5\\\"E\"\n","export default {\n  ft: {to_meter: 0.3048},\n  'us-ft': {to_meter: 1200 / 3937}\n};\n","var ignoredChar = /[\\s_\\-\\/\\(\\)]/g;\nexport default function match(obj, key) {\n  if (obj[key]) {\n    return obj[key];\n  }\n  var keys = Object.keys(obj);\n  var lkey = key.toLowerCase().replace(ignoredChar, '');\n  var i = -1;\n  var testkey, processedKey;\n  while (++i < keys.length) {\n    testkey = keys[i];\n    processedKey = testkey.toLowerCase().replace(ignoredChar, '');\n    if (processedKey === lkey) {\n      return obj[testkey];\n    }\n  }\n}\n","import {D2R} from './constants/values';\nimport PrimeMeridian from './constants/PrimeMeridian';\nimport units from './constants/units';\nimport match from './match';\n\nexport default function(defData) {\n  var self = {};\n  var paramObj = defData.split('+').map(function(v) {\n    return v.trim();\n  }).filter(function(a) {\n    return a;\n  }).reduce(function(p, a) {\n    var split = a.split('=');\n    split.push(true);\n    p[split[0].toLowerCase()] = split[1];\n    return p;\n  }, {});\n  var paramName, paramVal, paramOutname;\n  var params = {\n    proj: 'projName',\n    datum: 'datumCode',\n    rf: function(v) {\n      self.rf = parseFloat(v);\n    },\n    lat_0: function(v) {\n      self.lat0 = v * D2R;\n    },\n    lat_1: function(v) {\n      self.lat1 = v * D2R;\n    },\n    lat_2: function(v) {\n      self.lat2 = v * D2R;\n    },\n    lat_ts: function(v) {\n      self.lat_ts = v * D2R;\n    },\n    lon_0: function(v) {\n      self.long0 = v * D2R;\n    },\n    lon_1: function(v) {\n      self.long1 = v * D2R;\n    },\n    lon_2: function(v) {\n      self.long2 = v * D2R;\n    },\n    alpha: function(v) {\n      self.alpha = parseFloat(v) * D2R;\n    },\n    lonc: function(v) {\n      self.longc = v * D2R;\n    },\n    x_0: function(v) {\n      self.x0 = parseFloat(v);\n    },\n    y_0: function(v) {\n      self.y0 = parseFloat(v);\n    },\n    k_0: function(v) {\n      self.k0 = parseFloat(v);\n    },\n    k: function(v) {\n      self.k0 = parseFloat(v);\n    },\n    a: function(v) {\n      self.a = parseFloat(v);\n    },\n    b: function(v) {\n      self.b = parseFloat(v);\n    },\n    r_a: function() {\n      self.R_A = true;\n    },\n    zone: function(v) {\n      self.zone = parseInt(v, 10);\n    },\n    south: function() {\n      self.utmSouth = true;\n    },\n    towgs84: function(v) {\n      self.datum_params = v.split(\",\").map(function(a) {\n        return parseFloat(a);\n      });\n    },\n    to_meter: function(v) {\n      self.to_meter = parseFloat(v);\n    },\n    units: function(v) {\n      self.units = v;\n      var unit = match(units, v);\n      if (unit) {\n        self.to_meter = unit.to_meter;\n      }\n    },\n    from_greenwich: function(v) {\n      self.from_greenwich = v * D2R;\n    },\n    pm: function(v) {\n      var pm = match(PrimeMeridian, v);\n      self.from_greenwich = (pm ? pm : parseFloat(v)) * D2R;\n    },\n    nadgrids: function(v) {\n      if (v === '@null') {\n        self.datumCode = 'none';\n      }\n      else {\n        self.nadgrids = v;\n      }\n    },\n    axis: function(v) {\n      var legalAxis = \"ewnsud\";\n      if (v.length === 3 && legalAxis.indexOf(v.substr(0, 1)) !== -1 && legalAxis.indexOf(v.substr(1, 1)) !== -1 && legalAxis.indexOf(v.substr(2, 1)) !== -1) {\n        self.axis = v;\n      }\n    }\n  };\n  for (paramName in paramObj) {\n    paramVal = paramObj[paramName];\n    if (paramName in params) {\n      paramOutname = params[paramName];\n      if (typeof paramOutname === 'function') {\n        paramOutname(paramVal);\n      }\n      else {\n        self[paramOutname] = paramVal;\n      }\n    }\n    else {\n      self[paramName] = paramVal;\n    }\n  }\n  if(typeof self.datumCode === 'string' && self.datumCode !== \"WGS84\"){\n    self.datumCode = self.datumCode.toLowerCase();\n  }\n  return self;\n}\n","export default parseString;\n\nvar NEUTRAL = 1;\nvar KEYWORD = 2;\nvar NUMBER = 3;\nvar QUOTED = 4;\nvar AFTERQUOTE = 5;\nvar ENDED = -1;\nvar whitespace = /\\s/;\nvar latin = /[A-Za-z]/;\nvar keyword = /[A-Za-z84]/;\nvar endThings = /[,\\]]/;\nvar digets = /[\\d\\.E\\-\\+]/;\n// const ignoredChar = /[\\s_\\-\\/\\(\\)]/g;\nfunction Parser(text) {\n  if (typeof text !== 'string') {\n    throw new Error('not a string');\n  }\n  this.text = text.trim();\n  this.level = 0;\n  this.place = 0;\n  this.root = null;\n  this.stack = [];\n  this.currentObject = null;\n  this.state = NEUTRAL;\n}\nParser.prototype.readCharicter = function() {\n  var char = this.text[this.place++];\n  if (this.state !== QUOTED) {\n    while (whitespace.test(char)) {\n      if (this.place >= this.text.length) {\n        return;\n      }\n      char = this.text[this.place++];\n    }\n  }\n  switch (this.state) {\n    case NEUTRAL:\n      return this.neutral(char);\n    case KEYWORD:\n      return this.keyword(char)\n    case QUOTED:\n      return this.quoted(char);\n    case AFTERQUOTE:\n      return this.afterquote(char);\n    case NUMBER:\n      return this.number(char);\n    case ENDED:\n      return;\n  }\n};\nParser.prototype.afterquote = function(char) {\n  if (char === '\"') {\n    this.word += '\"';\n    this.state = QUOTED;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.word = this.word.trim();\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in afterquote yet, index ' + this.place);\n};\nParser.prototype.afterItem = function(char) {\n  if (char === ',') {\n    if (this.word !== null) {\n      this.currentObject.push(this.word);\n    }\n    this.word = null;\n    this.state = NEUTRAL;\n    return;\n  }\n  if (char === ']') {\n    this.level--;\n    if (this.word !== null) {\n      this.currentObject.push(this.word);\n      this.word = null;\n    }\n    this.state = NEUTRAL;\n    this.currentObject = this.stack.pop();\n    if (!this.currentObject) {\n      this.state = ENDED;\n    }\n\n    return;\n  }\n};\nParser.prototype.number = function(char) {\n  if (digets.test(char)) {\n    this.word += char;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.word = parseFloat(this.word);\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in number yet, index ' + this.place);\n};\nParser.prototype.quoted = function(char) {\n  if (char === '\"') {\n    this.state = AFTERQUOTE;\n    return;\n  }\n  this.word += char;\n  return;\n};\nParser.prototype.keyword = function(char) {\n  if (keyword.test(char)) {\n    this.word += char;\n    return;\n  }\n  if (char === '[') {\n    var newObjects = [];\n    newObjects.push(this.word);\n    this.level++;\n    if (this.root === null) {\n      this.root = newObjects;\n    } else {\n      this.currentObject.push(newObjects);\n    }\n    this.stack.push(this.currentObject);\n    this.currentObject = newObjects;\n    this.state = NEUTRAL;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in keyword yet, index ' + this.place);\n};\nParser.prototype.neutral = function(char) {\n  if (latin.test(char)) {\n    this.word = char;\n    this.state = KEYWORD;\n    return;\n  }\n  if (char === '\"') {\n    this.word = '';\n    this.state = QUOTED;\n    return;\n  }\n  if (digets.test(char)) {\n    this.word = char;\n    this.state = NUMBER;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in neutral yet, index ' + this.place);\n};\nParser.prototype.output = function() {\n  while (this.place < this.text.length) {\n    this.readCharicter();\n  }\n  if (this.state === ENDED) {\n    return this.root;\n  }\n  throw new Error('unable to parse string \"' +this.text + '\". State is ' + this.state);\n};\n\nfunction parseString(txt) {\n  var parser = new Parser(txt);\n  return parser.output();\n}\n","\n\nfunction mapit(obj, key, value) {\n  if (Array.isArray(key)) {\n    value.unshift(key);\n    key = null;\n  }\n  var thing = key ? {} : obj;\n\n  var out = value.reduce(function(newObj, item) {\n    sExpr(item, newObj);\n    return newObj\n  }, thing);\n  if (key) {\n    obj[key] = out;\n  }\n}\n\nexport function sExpr(v, obj) {\n  if (!Array.isArray(v)) {\n    obj[v] = true;\n    return;\n  }\n  var key = v.shift();\n  if (key === 'PARAMETER') {\n    key = v.shift();\n  }\n  if (v.length === 1) {\n    if (Array.isArray(v[0])) {\n      obj[key] = {};\n      sExpr(v[0], obj[key]);\n      return;\n    }\n    obj[key] = v[0];\n    return;\n  }\n  if (!v.length) {\n    obj[key] = true;\n    return;\n  }\n  if (key === 'TOWGS84') {\n    obj[key] = v;\n    return;\n  }\n  if (!Array.isArray(key)) {\n    obj[key] = {};\n  }\n\n  var i;\n  switch (key) {\n    case 'UNIT':\n    case 'PRIMEM':\n    case 'VERT_DATUM':\n      obj[key] = {\n        name: v[0].toLowerCase(),\n        convert: v[1]\n      };\n      if (v.length === 3) {\n        sExpr(v[2], obj[key]);\n      }\n      return;\n    case 'SPHEROID':\n    case 'ELLIPSOID':\n      obj[key] = {\n        name: v[0],\n        a: v[1],\n        rf: v[2]\n      };\n      if (v.length === 4) {\n        sExpr(v[3], obj[key]);\n      }\n      return;\n    case 'PROJECTEDCRS':\n    case 'PROJCRS':\n    case 'GEOGCS':\n    case 'GEOCCS':\n    case 'PROJCS':\n    case 'LOCAL_CS':\n    case 'GEODCRS':\n    case 'GEODETICCRS':\n    case 'GEODETICDATUM':\n    case 'EDATUM':\n    case 'ENGINEERINGDATUM':\n    case 'VERT_CS':\n    case 'VERTCRS':\n    case 'VERTICALCRS':\n    case 'COMPD_CS':\n    case 'COMPOUNDCRS':\n    case 'ENGINEERINGCRS':\n    case 'ENGCRS':\n    case 'FITTED_CS':\n    case 'LOCAL_DATUM':\n    case 'DATUM':\n      v[0] = ['name', v[0]];\n      mapit(obj, key, v);\n      return;\n    default:\n      i = -1;\n      while (++i < v.length) {\n        if (!Array.isArray(v[i])) {\n          return sExpr(v, obj[key]);\n        }\n      }\n      return mapit(obj, key, v);\n  }\n}\n","var D2R = 0.01745329251994329577;\nimport parser from './parser';\nimport {sExpr} from './process';\n\n\n\nfunction rename(obj, params) {\n  var outName = params[0];\n  var inName = params[1];\n  if (!(outName in obj) && (inName in obj)) {\n    obj[outName] = obj[inName];\n    if (params.length === 3) {\n      obj[outName] = params[2](obj[outName]);\n    }\n  }\n}\n\nfunction d2r(input) {\n  return input * D2R;\n}\n\nfunction cleanWKT(wkt) {\n  if (wkt.type === 'GEOGCS') {\n    wkt.projName = 'longlat';\n  } else if (wkt.type === 'LOCAL_CS') {\n    wkt.projName = 'identity';\n    wkt.local = true;\n  } else {\n    if (typeof wkt.PROJECTION === 'object') {\n      wkt.projName = Object.keys(wkt.PROJECTION)[0];\n    } else {\n      wkt.projName = wkt.PROJECTION;\n    }\n  }\n  if (wkt.UNIT) {\n    wkt.units = wkt.UNIT.name.toLowerCase();\n    if (wkt.units === 'metre') {\n      wkt.units = 'meter';\n    }\n    if (wkt.UNIT.convert) {\n      if (wkt.type === 'GEOGCS') {\n        if (wkt.DATUM && wkt.DATUM.SPHEROID) {\n          wkt.to_meter = wkt.UNIT.convert*wkt.DATUM.SPHEROID.a;\n        }\n      } else {\n        wkt.to_meter = wkt.UNIT.convert;\n      }\n    }\n  }\n  var geogcs = wkt.GEOGCS;\n  if (wkt.type === 'GEOGCS') {\n    geogcs = wkt;\n  }\n  if (geogcs) {\n    //if(wkt.GEOGCS.PRIMEM&&wkt.GEOGCS.PRIMEM.convert){\n    //  wkt.from_greenwich=wkt.GEOGCS.PRIMEM.convert*D2R;\n    //}\n    if (geogcs.DATUM) {\n      wkt.datumCode = geogcs.DATUM.name.toLowerCase();\n    } else {\n      wkt.datumCode = geogcs.name.toLowerCase();\n    }\n    if (wkt.datumCode.slice(0, 2) === 'd_') {\n      wkt.datumCode = wkt.datumCode.slice(2);\n    }\n    if (wkt.datumCode === 'new_zealand_geodetic_datum_1949' || wkt.datumCode === 'new_zealand_1949') {\n      wkt.datumCode = 'nzgd49';\n    }\n    if (wkt.datumCode === 'wgs_1984') {\n      if (wkt.PROJECTION === 'Mercator_Auxiliary_Sphere') {\n        wkt.sphere = true;\n      }\n      wkt.datumCode = 'wgs84';\n    }\n    if (wkt.datumCode.slice(-6) === '_ferro') {\n      wkt.datumCode = wkt.datumCode.slice(0, - 6);\n    }\n    if (wkt.datumCode.slice(-8) === '_jakarta') {\n      wkt.datumCode = wkt.datumCode.slice(0, - 8);\n    }\n    if (~wkt.datumCode.indexOf('belge')) {\n      wkt.datumCode = 'rnb72';\n    }\n    if (geogcs.DATUM && geogcs.DATUM.SPHEROID) {\n      wkt.ellps = geogcs.DATUM.SPHEROID.name.replace('_19', '').replace(/[Cc]larke\\_18/, 'clrk');\n      if (wkt.ellps.toLowerCase().slice(0, 13) === 'international') {\n        wkt.ellps = 'intl';\n      }\n\n      wkt.a = geogcs.DATUM.SPHEROID.a;\n      wkt.rf = parseFloat(geogcs.DATUM.SPHEROID.rf, 10);\n    }\n\n    if (geogcs.DATUM && geogcs.DATUM.TOWGS84) {\n      wkt.datum_params = geogcs.DATUM.TOWGS84;\n    }\n    if (~wkt.datumCode.indexOf('osgb_1936')) {\n      wkt.datumCode = 'osgb36';\n    }\n    if (~wkt.datumCode.indexOf('osni_1952')) {\n      wkt.datumCode = 'osni52';\n    }\n    if (~wkt.datumCode.indexOf('tm65')\n      || ~wkt.datumCode.indexOf('geodetic_datum_of_1965')) {\n      wkt.datumCode = 'ire65';\n    }\n    if (wkt.datumCode === 'ch1903+') {\n      wkt.datumCode = 'ch1903';\n    }\n    if (~wkt.datumCode.indexOf('israel')) {\n      wkt.datumCode = 'isr93';\n    }\n  }\n  if (wkt.b && !isFinite(wkt.b)) {\n    wkt.b = wkt.a;\n  }\n\n  function toMeter(input) {\n    var ratio = wkt.to_meter || 1;\n    return input * ratio;\n  }\n  var renamer = function(a) {\n    return rename(wkt, a);\n  };\n  var list = [\n    ['standard_parallel_1', 'Standard_Parallel_1'],\n    ['standard_parallel_2', 'Standard_Parallel_2'],\n    ['false_easting', 'False_Easting'],\n    ['false_northing', 'False_Northing'],\n    ['central_meridian', 'Central_Meridian'],\n    ['latitude_of_origin', 'Latitude_Of_Origin'],\n    ['latitude_of_origin', 'Central_Parallel'],\n    ['scale_factor', 'Scale_Factor'],\n    ['k0', 'scale_factor'],\n    ['latitude_of_center', 'Latitude_Of_Center'],\n    ['latitude_of_center', 'Latitude_of_center'],\n    ['lat0', 'latitude_of_center', d2r],\n    ['longitude_of_center', 'Longitude_Of_Center'],\n    ['longitude_of_center', 'Longitude_of_center'],\n    ['longc', 'longitude_of_center', d2r],\n    ['x0', 'false_easting', toMeter],\n    ['y0', 'false_northing', toMeter],\n    ['long0', 'central_meridian', d2r],\n    ['lat0', 'latitude_of_origin', d2r],\n    ['lat0', 'standard_parallel_1', d2r],\n    ['lat1', 'standard_parallel_1', d2r],\n    ['lat2', 'standard_parallel_2', d2r],\n    ['azimuth', 'Azimuth'],\n    ['alpha', 'azimuth', d2r],\n    ['srsCode', 'name']\n  ];\n  list.forEach(renamer);\n  if (!wkt.long0 && wkt.longc && (wkt.projName === 'Albers_Conic_Equal_Area' || wkt.projName === 'Lambert_Azimuthal_Equal_Area')) {\n    wkt.long0 = wkt.longc;\n  }\n  if (!wkt.lat_ts && wkt.lat1 && (wkt.projName === 'Stereographic_South_Pole' || wkt.projName === 'Polar Stereographic (variant B)')) {\n    wkt.lat0 = d2r(wkt.lat1 > 0 ? 90 : -90);\n    wkt.lat_ts = wkt.lat1;\n  }\n}\nexport default function(wkt) {\n  var lisp = parser(wkt);\n  var type = lisp.shift();\n  var name = lisp.shift();\n  lisp.unshift(['name', name]);\n  lisp.unshift(['type', type]);\n  var obj = {};\n  sExpr(lisp, obj);\n  cleanWKT(obj);\n  return obj;\n}\n","import globals from './global';\nimport parseProj from './projString';\nimport wkt from 'wkt-parser';\n\nfunction defs(name) {\n  /*global console*/\n  var that = this;\n  if (arguments.length === 2) {\n    var def = arguments[1];\n    if (typeof def === 'string') {\n      if (def.charAt(0) === '+') {\n        defs[name] = parseProj(arguments[1]);\n      }\n      else {\n        defs[name] = wkt(arguments[1]);\n      }\n    } else {\n      defs[name] = def;\n    }\n  }\n  else if (arguments.length === 1) {\n    if (Array.isArray(name)) {\n      return name.map(function(v) {\n        if (Array.isArray(v)) {\n          defs.apply(that, v);\n        }\n        else {\n          defs(v);\n        }\n      });\n    }\n    else if (typeof name === 'string') {\n      if (name in defs) {\n        return defs[name];\n      }\n    }\n    else if ('EPSG' in name) {\n      defs['EPSG:' + name.EPSG] = name;\n    }\n    else if ('ESRI' in name) {\n      defs['ESRI:' + name.ESRI] = name;\n    }\n    else if ('IAU2000' in name) {\n      defs['IAU2000:' + name.IAU2000] = name;\n    }\n    else {\n      console.log(name);\n    }\n    return;\n  }\n\n\n}\nglobals(defs);\nexport default defs;\n","import defs from './defs';\nimport wkt from 'wkt-parser';\nimport projStr from './projString';\nimport match from './match';\nfunction testObj(code){\n  return typeof code === 'string';\n}\nfunction testDef(code){\n  return code in defs;\n}\n var codeWords = ['PROJECTEDCRS', 'PROJCRS', 'GEOGCS','GEOCCS','PROJCS','LOCAL_CS', 'GEODCRS', 'GEODETICCRS', 'GEODETICDATUM', 'ENGCRS', 'ENGINEERINGCRS'];\nfunction testWKT(code){\n  return codeWords.some(function (word) {\n    return code.indexOf(word) > -1;\n  });\n}\nvar codes = ['3857', '900913', '3785', '102113'];\nfunction checkMercator(item) {\n  var auth = match(item, 'authority');\n  if (!auth) {\n    return;\n  }\n  var code = match(auth, 'epsg');\n  return code && codes.indexOf(code) > -1;\n}\nfunction checkProjStr(item) {\n  var ext = match(item, 'extension');\n  if (!ext) {\n    return;\n  }\n  return match(ext, 'proj4');\n}\nfunction testProj(code){\n  return code[0] === '+';\n}\nfunction parse(code){\n  if (testObj(code)) {\n    //check to see if this is a WKT string\n    if (testDef(code)) {\n      return defs[code];\n    }\n    if (testWKT(code)) {\n      var out = wkt(code);\n      // test of spetial case, due to this being a very common and often malformed\n      if (checkMercator(out)) {\n        return defs['EPSG:3857'];\n      }\n      var maybeProjStr = checkProjStr(out);\n      if (maybeProjStr) {\n        return projStr(maybeProjStr);\n      }\n      return out;\n    }\n    if (testProj(code)) {\n      return projStr(code);\n    }\n  }else{\n    return code;\n  }\n}\n\nexport default parse;\n","export default function(destination, source) {\n  destination = destination || {};\n  var value, property;\n  if (!source) {\n    return destination;\n  }\n  for (property in source) {\n    value = source[property];\n    if (value !== undefined) {\n      destination[property] = value;\n    }\n  }\n  return destination;\n}\n","export default function(eccent, sinphi, cosphi) {\n  var con = eccent * sinphi;\n  return cosphi / (Math.sqrt(1 - con * con));\n}","export default function(x) {\n  return x<0 ? -1 : 1;\n}","\nimport {TWO_PI, SPI} from '../constants/values';\nimport sign from './sign';\n\nexport default function(x) {\n  return (Math.abs(x) <= SPI) ? x : (x - (sign(x) * TWO_PI));\n}\n","import {HALF_PI} from '../constants/values';\n\nexport default function(eccent, phi, sinphi) {\n  var con = eccent * sinphi;\n  var com = 0.5 * eccent;\n  con = Math.pow(((1 - con) / (1 + con)), com);\n  return (Math.tan(0.5 * (HALF_PI - phi)) / con);\n}\n","import {HALF_PI} from '../constants/values';\n\nexport default function(eccent, ts) {\n  var eccnth = 0.5 * eccent;\n  var con, dphi;\n  var phi = HALF_PI - 2 * Math.atan(ts);\n  for (var i = 0; i <= 15; i++) {\n    con = eccent * Math.sin(phi);\n    dphi = HALF_PI - 2 * Math.atan(ts * (Math.pow(((1 - con) / (1 + con)), eccnth))) - phi;\n    phi += dphi;\n    if (Math.abs(dphi) <= 0.0000000001) {\n      return phi;\n    }\n  }\n  //console.log(\"phi2z has NoConvergence\");\n  return -9999;\n}\n","import msfnz from '../common/msfnz';\n\nimport adjust_lon from '../common/adjust_lon';\nimport tsfnz from '../common/tsfnz';\nimport phi2z from '../common/phi2z';\nimport {FORTPI, R2D, EPSLN, HALF_PI} from '../constants/values';\nexport function init() {\n  var con = this.b / this.a;\n  this.es = 1 - con * con;\n  if(!('x0' in this)){\n    this.x0 = 0;\n  }\n  if(!('y0' in this)){\n    this.y0 = 0;\n  }\n  this.e = Math.sqrt(this.es);\n  if (this.lat_ts) {\n    if (this.sphere) {\n      this.k0 = Math.cos(this.lat_ts);\n    }\n    else {\n      this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));\n    }\n  }\n  else {\n    if (!this.k0) {\n      if (this.k) {\n        this.k0 = this.k;\n      }\n      else {\n        this.k0 = 1;\n      }\n    }\n  }\n}\n\n/* Mercator forward equations--mapping lat,long to x,y\n  --------------------------------------------------*/\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  // convert to radians\n  if (lat * R2D > 90 && lat * R2D < -90 && lon * R2D > 180 && lon * R2D < -180) {\n    return null;\n  }\n\n  var x, y;\n  if (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN) {\n    return null;\n  }\n  else {\n    if (this.sphere) {\n      x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);\n      y = this.y0 + this.a * this.k0 * Math.log(Math.tan(FORTPI + 0.5 * lat));\n    }\n    else {\n      var sinphi = Math.sin(lat);\n      var ts = tsfnz(this.e, lat, sinphi);\n      x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);\n      y = this.y0 - this.a * this.k0 * Math.log(ts);\n    }\n    p.x = x;\n    p.y = y;\n    return p;\n  }\n}\n\n/* Mercator inverse equations--mapping x,y to lat/long\n  --------------------------------------------------*/\nexport function inverse(p) {\n\n  var x = p.x - this.x0;\n  var y = p.y - this.y0;\n  var lon, lat;\n\n  if (this.sphere) {\n    lat = HALF_PI - 2 * Math.atan(Math.exp(-y / (this.a * this.k0)));\n  }\n  else {\n    var ts = Math.exp(-y / (this.a * this.k0));\n    lat = phi2z(this.e, ts);\n    if (lat === -9999) {\n      return null;\n    }\n  }\n  lon = adjust_lon(this.long0 + x / (this.a * this.k0));\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Mercator\", \"Popular Visualisation Pseudo Mercator\", \"Mercator_1SP\", \"Mercator_Auxiliary_Sphere\", \"merc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","export function init() {\n  //no-op for longlat\n}\n\nfunction identity(pt) {\n  return pt;\n}\nexport {identity as forward};\nexport {identity as inverse};\nexport var names = [\"longlat\", \"identity\"];\nexport default {\n  init: init,\n  forward: identity,\n  inverse: identity,\n  names: names\n};\n","import merc from \"./projections/merc\";\nimport longlat from \"./projections/longlat\";\nvar projs = [merc, longlat];\nvar names = {};\nvar projStore = [];\n\nfunction add(proj, i) {\n  var len = projStore.length;\n  if (!proj.names) {\n    console.log(i);\n    return true;\n  }\n  projStore[len] = proj;\n  proj.names.forEach(function(n) {\n    names[n.toLowerCase()] = len;\n  });\n  return this;\n}\n\nexport {add};\n\nexport function get(name) {\n  if (!name) {\n    return false;\n  }\n  var n = name.toLowerCase();\n  if (typeof names[n] !== 'undefined' && projStore[names[n]]) {\n    return projStore[names[n]];\n  }\n}\n\nexport function start() {\n  projs.forEach(add);\n}\nexport default {\n  start: start,\n  add: add,\n  get: get\n};\n","var exports = {};\nexport {exports as default};\nexports.MERIT = {\n  a: 6378137.0,\n  rf: 298.257,\n  ellipseName: \"MERIT 1983\"\n};\n\nexports.SGS85 = {\n  a: 6378136.0,\n  rf: 298.257,\n  ellipseName: \"Soviet Geodetic System 85\"\n};\n\nexports.GRS80 = {\n  a: 6378137.0,\n  rf: 298.257222101,\n  ellipseName: \"GRS 1980(IUGG, 1980)\"\n};\n\nexports.IAU76 = {\n  a: 6378140.0,\n  rf: 298.257,\n  ellipseName: \"IAU 1976\"\n};\n\nexports.airy = {\n  a: 6377563.396,\n  b: 6356256.910,\n  ellipseName: \"Airy 1830\"\n};\n\nexports.APL4 = {\n  a: 6378137,\n  rf: 298.25,\n  ellipseName: \"Appl. Physics. 1965\"\n};\n\nexports.NWL9D = {\n  a: 6378145.0,\n  rf: 298.25,\n  ellipseName: \"Naval Weapons Lab., 1965\"\n};\n\nexports.mod_airy = {\n  a: 6377340.189,\n  b: 6356034.446,\n  ellipseName: \"Modified Airy\"\n};\n\nexports.andrae = {\n  a: 6377104.43,\n  rf: 300.0,\n  ellipseName: \"Andrae 1876 (Den., Iclnd.)\"\n};\n\nexports.aust_SA = {\n  a: 6378160.0,\n  rf: 298.25,\n  ellipseName: \"Australian Natl & S. Amer. 1969\"\n};\n\nexports.GRS67 = {\n  a: 6378160.0,\n  rf: 298.2471674270,\n  ellipseName: \"GRS 67(IUGG 1967)\"\n};\n\nexports.bessel = {\n  a: 6377397.155,\n  rf: 299.1528128,\n  ellipseName: \"Bessel 1841\"\n};\n\nexports.bess_nam = {\n  a: 6377483.865,\n  rf: 299.1528128,\n  ellipseName: \"Bessel 1841 (Namibia)\"\n};\n\nexports.clrk66 = {\n  a: 6378206.4,\n  b: 6356583.8,\n  ellipseName: \"Clarke 1866\"\n};\n\nexports.clrk80 = {\n  a: 6378249.145,\n  rf: 293.4663,\n  ellipseName: \"Clarke 1880 mod.\"\n};\n\nexports.clrk58 = {\n  a: 6378293.645208759,\n  rf: 294.2606763692654,\n  ellipseName: \"Clarke 1858\"\n};\n\nexports.CPM = {\n  a: 6375738.7,\n  rf: 334.29,\n  ellipseName: \"Comm. des Poids et Mesures 1799\"\n};\n\nexports.delmbr = {\n  a: 6376428.0,\n  rf: 311.5,\n  ellipseName: \"Delambre 1810 (Belgium)\"\n};\n\nexports.engelis = {\n  a: 6378136.05,\n  rf: 298.2566,\n  ellipseName: \"Engelis 1985\"\n};\n\nexports.evrst30 = {\n  a: 6377276.345,\n  rf: 300.8017,\n  ellipseName: \"Everest 1830\"\n};\n\nexports.evrst48 = {\n  a: 6377304.063,\n  rf: 300.8017,\n  ellipseName: \"Everest 1948\"\n};\n\nexports.evrst56 = {\n  a: 6377301.243,\n  rf: 300.8017,\n  ellipseName: \"Everest 1956\"\n};\n\nexports.evrst69 = {\n  a: 6377295.664,\n  rf: 300.8017,\n  ellipseName: \"Everest 1969\"\n};\n\nexports.evrstSS = {\n  a: 6377298.556,\n  rf: 300.8017,\n  ellipseName: \"Everest (Sabah & Sarawak)\"\n};\n\nexports.fschr60 = {\n  a: 6378166.0,\n  rf: 298.3,\n  ellipseName: \"Fischer (Mercury Datum) 1960\"\n};\n\nexports.fschr60m = {\n  a: 6378155.0,\n  rf: 298.3,\n  ellipseName: \"Fischer 1960\"\n};\n\nexports.fschr68 = {\n  a: 6378150.0,\n  rf: 298.3,\n  ellipseName: \"Fischer 1968\"\n};\n\nexports.helmert = {\n  a: 6378200.0,\n  rf: 298.3,\n  ellipseName: \"Helmert 1906\"\n};\n\nexports.hough = {\n  a: 6378270.0,\n  rf: 297.0,\n  ellipseName: \"Hough\"\n};\n\nexports.intl = {\n  a: 6378388.0,\n  rf: 297.0,\n  ellipseName: \"International 1909 (Hayford)\"\n};\n\nexports.kaula = {\n  a: 6378163.0,\n  rf: 298.24,\n  ellipseName: \"Kaula 1961\"\n};\n\nexports.lerch = {\n  a: 6378139.0,\n  rf: 298.257,\n  ellipseName: \"Lerch 1979\"\n};\n\nexports.mprts = {\n  a: 6397300.0,\n  rf: 191.0,\n  ellipseName: \"Maupertius 1738\"\n};\n\nexports.new_intl = {\n  a: 6378157.5,\n  b: 6356772.2,\n  ellipseName: \"New International 1967\"\n};\n\nexports.plessis = {\n  a: 6376523.0,\n  rf: 6355863.0,\n  ellipseName: \"Plessis 1817 (France)\"\n};\n\nexports.krass = {\n  a: 6378245.0,\n  rf: 298.3,\n  ellipseName: \"Krassovsky, 1942\"\n};\n\nexports.SEasia = {\n  a: 6378155.0,\n  b: 6356773.3205,\n  ellipseName: \"Southeast Asia\"\n};\n\nexports.walbeck = {\n  a: 6376896.0,\n  b: 6355834.8467,\n  ellipseName: \"Walbeck\"\n};\n\nexports.WGS60 = {\n  a: 6378165.0,\n  rf: 298.3,\n  ellipseName: \"WGS 60\"\n};\n\nexports.WGS66 = {\n  a: 6378145.0,\n  rf: 298.25,\n  ellipseName: \"WGS 66\"\n};\n\nexports.WGS7 = {\n  a: 6378135.0,\n  rf: 298.26,\n  ellipseName: \"WGS 72\"\n};\n\nexport var WGS84 = exports.WGS84 = {\n  a: 6378137.0,\n  rf: 298.257223563,\n  ellipseName: \"WGS 84\"\n};\n\nexports.sphere = {\n  a: 6370997.0,\n  b: 6370997.0,\n  ellipseName: \"Normal Sphere (r=6370997)\"\n};\n","import {SIXTH, RA4, RA6, EPSLN} from './constants/values';\nimport {default as Ellipsoid, WGS84} from './constants/Ellipsoid';\nimport match from './match';\n\nexport function eccentricity(a, b, rf, R_A) {\n  var a2 = a * a; // used in geocentric\n  var b2 = b * b; // used in geocentric\n  var es = (a2 - b2) / a2; // e ^ 2\n  var e = 0;\n  if (R_A) {\n    a *= 1 - es * (SIXTH + es * (RA4 + es * RA6));\n    a2 = a * a;\n    es = 0;\n  } else {\n    e = Math.sqrt(es); // eccentricity\n  }\n  var ep2 = (a2 - b2) / b2; // used in geocentric\n  return {\n    es: es,\n    e: e,\n    ep2: ep2\n  };\n}\nexport function sphere(a, b, rf, ellps, sphere) {\n  if (!a) { // do we have an ellipsoid?\n    var ellipse = match(Ellipsoid, ellps);\n    if (!ellipse) {\n      ellipse = WGS84;\n    }\n    a = ellipse.a;\n    b = ellipse.b;\n    rf = ellipse.rf;\n  }\n\n  if (rf && !b) {\n    b = (1.0 - 1.0 / rf) * a;\n  }\n  if (rf === 0 || Math.abs(a - b) < EPSLN) {\n    sphere = true;\n    b = a;\n  }\n  return {\n    a: a,\n    b: b,\n    rf: rf,\n    sphere: sphere\n  };\n}\n","var exports = {};\nexport {exports as default};\nexports.wgs84 = {\n  towgs84: \"0,0,0\",\n  ellipse: \"WGS84\",\n  datumName: \"WGS84\"\n};\n\nexports.ch1903 = {\n  towgs84: \"674.374,15.056,405.346\",\n  ellipse: \"bessel\",\n  datumName: \"swiss\"\n};\n\nexports.ggrs87 = {\n  towgs84: \"-199.87,74.79,246.62\",\n  ellipse: \"GRS80\",\n  datumName: \"Greek_Geodetic_Reference_System_1987\"\n};\n\nexports.nad83 = {\n  towgs84: \"0,0,0\",\n  ellipse: \"GRS80\",\n  datumName: \"North_American_Datum_1983\"\n};\n\nexports.nad27 = {\n  nadgrids: \"@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat\",\n  ellipse: \"clrk66\",\n  datumName: \"North_American_Datum_1927\"\n};\n\nexports.potsdam = {\n  towgs84: \"606.0,23.0,413.0\",\n  ellipse: \"bessel\",\n  datumName: \"Potsdam Rauenberg 1950 DHDN\"\n};\n\nexports.carthage = {\n  towgs84: \"-263.0,6.0,431.0\",\n  ellipse: \"clark80\",\n  datumName: \"Carthage 1934 Tunisia\"\n};\n\nexports.hermannskogel = {\n  towgs84: \"653.0,-212.0,449.0\",\n  ellipse: \"bessel\",\n  datumName: \"Hermannskogel\"\n};\n\nexports.osni52 = {\n  towgs84: \"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15\",\n  ellipse: \"airy\",\n  datumName: \"Irish National\"\n};\n\nexports.ire65 = {\n  towgs84: \"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15\",\n  ellipse: \"mod_airy\",\n  datumName: \"Ireland 1965\"\n};\n\nexports.rassadiran = {\n  towgs84: \"-133.63,-157.5,-158.62\",\n  ellipse: \"intl\",\n  datumName: \"Rassadiran\"\n};\n\nexports.nzgd49 = {\n  towgs84: \"59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993\",\n  ellipse: \"intl\",\n  datumName: \"New Zealand Geodetic Datum 1949\"\n};\n\nexports.osgb36 = {\n  towgs84: \"446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894\",\n  ellipse: \"airy\",\n  datumName: \"Airy 1830\"\n};\n\nexports.s_jtsk = {\n  towgs84: \"589,76,480\",\n  ellipse: 'bessel',\n  datumName: 'S-JTSK (Ferro)'\n};\n\nexports.beduaram = {\n  towgs84: '-106,-87,188',\n  ellipse: 'clrk80',\n  datumName: 'Beduaram'\n};\n\nexports.gunung_segara = {\n  towgs84: '-403,684,41',\n  ellipse: 'bessel',\n  datumName: 'Gunung Segara Jakarta'\n};\n\nexports.rnb72 = {\n  towgs84: \"106.869,-52.2978,103.724,-0.33657,0.456955,-1.84218,1\",\n  ellipse: \"intl\",\n  datumName: \"Reseau National Belge 1972\"\n};\n","import {PJD_3PARAM, PJD_7PARAM, PJD_WGS84, PJD_NODATUM, SEC_TO_RAD} from './constants/values';\n\nfunction datum(datumCode, datum_params, a, b, es, ep2) {\n  var out = {};\n\n  if (datumCode === undefined || datumCode === 'none') {\n    out.datum_type = PJD_NODATUM;\n  } else {\n    out.datum_type = PJD_WGS84;\n  }\n\n  if (datum_params) {\n    out.datum_params = datum_params.map(parseFloat);\n    if (out.datum_params[0] !== 0 || out.datum_params[1] !== 0 || out.datum_params[2] !== 0) {\n      out.datum_type = PJD_3PARAM;\n    }\n    if (out.datum_params.length > 3) {\n      if (out.datum_params[3] !== 0 || out.datum_params[4] !== 0 || out.datum_params[5] !== 0 || out.datum_params[6] !== 0) {\n        out.datum_type = PJD_7PARAM;\n        out.datum_params[3] *= SEC_TO_RAD;\n        out.datum_params[4] *= SEC_TO_RAD;\n        out.datum_params[5] *= SEC_TO_RAD;\n        out.datum_params[6] = (out.datum_params[6] / 1000000.0) + 1.0;\n      }\n    }\n  }\n\n  out.a = a; //datum object also uses these values\n  out.b = b;\n  out.es = es;\n  out.ep2 = ep2;\n  return out;\n}\n\nexport default datum;\n","import parseCode from './parseCode';\nimport extend from './extend';\nimport projections from './projections';\nimport {sphere as dc_sphere, eccentricity as dc_eccentricity} from './deriveConstants';\nimport Datum from './constants/Datum';\nimport datum from './datum';\nimport match from './match';\n\nfunction Projection(srsCode,callback) {\n  if (!(this instanceof Projection)) {\n    return new Projection(srsCode);\n  }\n  callback = callback || function(error){\n    if(error){\n      throw error;\n    }\n  };\n  var json = parseCode(srsCode);\n  if(typeof json !== 'object'){\n    callback(srsCode);\n    return;\n  }\n  var ourProj = Projection.projections.get(json.projName);\n  if(!ourProj){\n    callback(srsCode);\n    return;\n  }\n  if (json.datumCode && json.datumCode !== 'none') {\n    var datumDef = match(Datum, json.datumCode);\n    if (datumDef) {\n      json.datum_params = datumDef.towgs84 ? datumDef.towgs84.split(',') : null;\n      json.ellps = datumDef.ellipse;\n      json.datumName = datumDef.datumName ? datumDef.datumName : json.datumCode;\n    }\n  }\n  json.k0 = json.k0 || 1.0;\n  json.axis = json.axis || 'enu';\n  json.ellps = json.ellps || 'wgs84';\n  var sphere_ = dc_sphere(json.a, json.b, json.rf, json.ellps, json.sphere);\n  var ecc = dc_eccentricity(sphere_.a, sphere_.b, sphere_.rf, json.R_A);\n  var datumObj = json.datum || datum(json.datumCode, json.datum_params, sphere_.a, sphere_.b, ecc.es, ecc.ep2);\n\n  extend(this, json); // transfer everything over from the projection because we don't know what we'll need\n  extend(this, ourProj); // transfer all the methods from the projection\n\n  // copy the 4 things over we calulated in deriveConstants.sphere\n  this.a = sphere_.a;\n  this.b = sphere_.b;\n  this.rf = sphere_.rf;\n  this.sphere = sphere_.sphere;\n\n  // copy the 3 things we calculated in deriveConstants.eccentricity\n  this.es = ecc.es;\n  this.e = ecc.e;\n  this.ep2 = ecc.ep2;\n\n  // add in the datum object\n  this.datum = datumObj;\n\n  // init the projection\n  this.init();\n\n  // legecy callback from back in the day when it went to spatialreference.org\n  callback(null, this);\n\n}\nProjection.projections = projections;\nProjection.projections.start();\nexport default Projection;\n","'use strict';\nimport {PJD_3PARAM, PJD_7PARAM, HALF_PI} from './constants/values';\nexport function compareDatums(source, dest) {\n  if (source.datum_type !== dest.datum_type) {\n    return false; // false, datums are not equal\n  } else if (source.a !== dest.a || Math.abs(source.es - dest.es) > 0.000000000050) {\n    // the tolerance for es is to ensure that GRS80 and WGS84\n    // are considered identical\n    return false;\n  } else if (source.datum_type === PJD_3PARAM) {\n    return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2]);\n  } else if (source.datum_type === PJD_7PARAM) {\n    return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2] && source.datum_params[3] === dest.datum_params[3] && source.datum_params[4] === dest.datum_params[4] && source.datum_params[5] === dest.datum_params[5] && source.datum_params[6] === dest.datum_params[6]);\n  } else {\n    return true; // datums are equal\n  }\n} // cs_compare_datums()\n\n/*\n * The function Convert_Geodetic_To_Geocentric converts geodetic coordinates\n * (latitude, longitude, and height) to geocentric coordinates (X, Y, Z),\n * according to the current ellipsoid parameters.\n *\n *    Latitude  : Geodetic latitude in radians                     (input)\n *    Longitude : Geodetic longitude in radians                    (input)\n *    Height    : Geodetic height, in meters                       (input)\n *    X         : Calculated Geocentric X coordinate, in meters    (output)\n *    Y         : Calculated Geocentric Y coordinate, in meters    (output)\n *    Z         : Calculated Geocentric Z coordinate, in meters    (output)\n *\n */\nexport function geodeticToGeocentric(p, es, a) {\n  var Longitude = p.x;\n  var Latitude = p.y;\n  var Height = p.z ? p.z : 0; //Z value not always supplied\n\n  var Rn; /*  Earth radius at location  */\n  var Sin_Lat; /*  Math.sin(Latitude)  */\n  var Sin2_Lat; /*  Square of Math.sin(Latitude)  */\n  var Cos_Lat; /*  Math.cos(Latitude)  */\n\n  /*\n   ** Don't blow up if Latitude is just a little out of the value\n   ** range as it may just be a rounding issue.  Also removed longitude\n   ** test, it should be wrapped by Math.cos() and Math.sin().  NFW for PROJ.4, Sep/2001.\n   */\n  if (Latitude < -HALF_PI && Latitude > -1.001 * HALF_PI) {\n    Latitude = -HALF_PI;\n  } else if (Latitude > HALF_PI && Latitude < 1.001 * HALF_PI) {\n    Latitude = HALF_PI;\n  } else if (Latitude < -HALF_PI) {\n    /* Latitude out of range */\n    //..reportError('geocent:lat out of range:' + Latitude);\n    return { x: -Infinity, y: -Infinity, z: p.z };\n  } else if (Latitude > HALF_PI) {\n    /* Latitude out of range */\n    return { x: Infinity, y: Infinity, z: p.z };\n  }\n\n  if (Longitude > Math.PI) {\n    Longitude -= (2 * Math.PI);\n  }\n  Sin_Lat = Math.sin(Latitude);\n  Cos_Lat = Math.cos(Latitude);\n  Sin2_Lat = Sin_Lat * Sin_Lat;\n  Rn = a / (Math.sqrt(1.0e0 - es * Sin2_Lat));\n  return {\n    x: (Rn + Height) * Cos_Lat * Math.cos(Longitude),\n    y: (Rn + Height) * Cos_Lat * Math.sin(Longitude),\n    z: ((Rn * (1 - es)) + Height) * Sin_Lat\n  };\n} // cs_geodetic_to_geocentric()\n\nexport function geocentricToGeodetic(p, es, a, b) {\n  /* local defintions and variables */\n  /* end-criterium of loop, accuracy of sin(Latitude) */\n  var genau = 1e-12;\n  var genau2 = (genau * genau);\n  var maxiter = 30;\n\n  var P; /* distance between semi-minor axis and location */\n  var RR; /* distance between center and location */\n  var CT; /* sin of geocentric latitude */\n  var ST; /* cos of geocentric latitude */\n  var RX;\n  var RK;\n  var RN; /* Earth radius at location */\n  var CPHI0; /* cos of start or old geodetic latitude in iterations */\n  var SPHI0; /* sin of start or old geodetic latitude in iterations */\n  var CPHI; /* cos of searched geodetic latitude */\n  var SPHI; /* sin of searched geodetic latitude */\n  var SDPHI; /* end-criterium: addition-theorem of sin(Latitude(iter)-Latitude(iter-1)) */\n  var iter; /* # of continous iteration, max. 30 is always enough (s.a.) */\n\n  var X = p.x;\n  var Y = p.y;\n  var Z = p.z ? p.z : 0.0; //Z value not always supplied\n  var Longitude;\n  var Latitude;\n  var Height;\n\n  P = Math.sqrt(X * X + Y * Y);\n  RR = Math.sqrt(X * X + Y * Y + Z * Z);\n\n  /*      special cases for latitude and longitude */\n  if (P / a < genau) {\n\n    /*  special case, if P=0. (X=0., Y=0.) */\n    Longitude = 0.0;\n\n    /*  if (X,Y,Z)=(0.,0.,0.) then Height becomes semi-minor axis\n     *  of ellipsoid (=center of mass), Latitude becomes PI/2 */\n    if (RR / a < genau) {\n      Latitude = HALF_PI;\n      Height = -b;\n      return {\n        x: p.x,\n        y: p.y,\n        z: p.z\n      };\n    }\n  } else {\n    /*  ellipsoidal (geodetic) longitude\n     *  interval: -PI < Longitude <= +PI */\n    Longitude = Math.atan2(Y, X);\n  }\n\n  /* --------------------------------------------------------------\n   * Following iterative algorithm was developped by\n   * \"Institut for Erdmessung\", University of Hannover, July 1988.\n   * Internet: www.ife.uni-hannover.de\n   * Iterative computation of CPHI,SPHI and Height.\n   * Iteration of CPHI and SPHI to 10**-12 radian resp.\n   * 2*10**-7 arcsec.\n   * --------------------------------------------------------------\n   */\n  CT = Z / RR;\n  ST = P / RR;\n  RX = 1.0 / Math.sqrt(1.0 - es * (2.0 - es) * ST * ST);\n  CPHI0 = ST * (1.0 - es) * RX;\n  SPHI0 = CT * RX;\n  iter = 0;\n\n  /* loop to find sin(Latitude) resp. Latitude\n   * until |sin(Latitude(iter)-Latitude(iter-1))| < genau */\n  do {\n    iter++;\n    RN = a / Math.sqrt(1.0 - es * SPHI0 * SPHI0);\n\n    /*  ellipsoidal (geodetic) height */\n    Height = P * CPHI0 + Z * SPHI0 - RN * (1.0 - es * SPHI0 * SPHI0);\n\n    RK = es * RN / (RN + Height);\n    RX = 1.0 / Math.sqrt(1.0 - RK * (2.0 - RK) * ST * ST);\n    CPHI = ST * (1.0 - RK) * RX;\n    SPHI = CT * RX;\n    SDPHI = SPHI * CPHI0 - CPHI * SPHI0;\n    CPHI0 = CPHI;\n    SPHI0 = SPHI;\n  }\n  while (SDPHI * SDPHI > genau2 && iter < maxiter);\n\n  /*      ellipsoidal (geodetic) latitude */\n  Latitude = Math.atan(SPHI / Math.abs(CPHI));\n  return {\n    x: Longitude,\n    y: Latitude,\n    z: Height\n  };\n} // cs_geocentric_to_geodetic()\n\n/****************************************************************/\n// pj_geocentic_to_wgs84( p )\n//  p = point to transform in geocentric coordinates (x,y,z)\n\n\n/** point object, nothing fancy, just allows values to be\n    passed back and forth by reference rather than by value.\n    Other point classes may be used as long as they have\n    x and y properties, which will get modified in the transform method.\n*/\nexport function geocentricToWgs84(p, datum_type, datum_params) {\n\n  if (datum_type === PJD_3PARAM) {\n    // if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: p.x + datum_params[0],\n      y: p.y + datum_params[1],\n      z: p.z + datum_params[2],\n    };\n  } else if (datum_type === PJD_7PARAM) {\n    var Dx_BF = datum_params[0];\n    var Dy_BF = datum_params[1];\n    var Dz_BF = datum_params[2];\n    var Rx_BF = datum_params[3];\n    var Ry_BF = datum_params[4];\n    var Rz_BF = datum_params[5];\n    var M_BF = datum_params[6];\n    // if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: M_BF * (p.x - Rz_BF * p.y + Ry_BF * p.z) + Dx_BF,\n      y: M_BF * (Rz_BF * p.x + p.y - Rx_BF * p.z) + Dy_BF,\n      z: M_BF * (-Ry_BF * p.x + Rx_BF * p.y + p.z) + Dz_BF\n    };\n  }\n} // cs_geocentric_to_wgs84\n\n/****************************************************************/\n// pj_geocentic_from_wgs84()\n//  coordinate system definition,\n//  point to transform in geocentric coordinates (x,y,z)\nexport function geocentricFromWgs84(p, datum_type, datum_params) {\n\n  if (datum_type === PJD_3PARAM) {\n    //if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: p.x - datum_params[0],\n      y: p.y - datum_params[1],\n      z: p.z - datum_params[2],\n    };\n\n  } else if (datum_type === PJD_7PARAM) {\n    var Dx_BF = datum_params[0];\n    var Dy_BF = datum_params[1];\n    var Dz_BF = datum_params[2];\n    var Rx_BF = datum_params[3];\n    var Ry_BF = datum_params[4];\n    var Rz_BF = datum_params[5];\n    var M_BF = datum_params[6];\n    var x_tmp = (p.x - Dx_BF) / M_BF;\n    var y_tmp = (p.y - Dy_BF) / M_BF;\n    var z_tmp = (p.z - Dz_BF) / M_BF;\n    //if( x[io] === HUGE_VAL )\n    //    continue;\n\n    return {\n      x: x_tmp + Rz_BF * y_tmp - Ry_BF * z_tmp,\n      y: -Rz_BF * x_tmp + y_tmp + Rx_BF * z_tmp,\n      z: Ry_BF * x_tmp - Rx_BF * y_tmp + z_tmp\n    };\n  } //cs_geocentric_from_wgs84()\n}\n","import {PJD_3PARAM, PJD_7PARAM, PJD_NODATUM} from './constants/values';\n\nimport {geodeticToGeocentric, geocentricToGeodetic, geocentricToWgs84, geocentricFromWgs84, compareDatums} from './datumUtils';\nfunction checkParams(type) {\n  return (type === PJD_3PARAM || type === PJD_7PARAM);\n}\n\nexport default function(source, dest, point) {\n  // Short cut if the datums are identical.\n  if (compareDatums(source, dest)) {\n    return point; // in this case, zero is sucess,\n    // whereas cs_compare_datums returns 1 to indicate TRUE\n    // confusing, should fix this\n  }\n\n  // Explicitly skip datum transform by setting 'datum=none' as parameter for either source or dest\n  if (source.datum_type === PJD_NODATUM || dest.datum_type === PJD_NODATUM) {\n    return point;\n  }\n\n  // If this datum requires grid shifts, then apply it to geodetic coordinates.\n\n  // Do we need to go through geocentric coordinates?\n  if (source.es === dest.es && source.a === dest.a && !checkParams(source.datum_type) &&  !checkParams(dest.datum_type)) {\n    return point;\n  }\n\n  // Convert to geocentric coordinates.\n  point = geodeticToGeocentric(point, source.es, source.a);\n  // Convert between datums\n  if (checkParams(source.datum_type)) {\n    point = geocentricToWgs84(point, source.datum_type, source.datum_params);\n  }\n  if (checkParams(dest.datum_type)) {\n    point = geocentricFromWgs84(point, dest.datum_type, dest.datum_params);\n  }\n  return geocentricToGeodetic(point, dest.es, dest.a, dest.b);\n\n}\n","export default function(crs, denorm, point) {\n  var xin = point.x,\n    yin = point.y,\n    zin = point.z || 0.0;\n  var v, t, i;\n  var out = {};\n  for (i = 0; i < 3; i++) {\n    if (denorm && i === 2 && point.z === undefined) {\n      continue;\n    }\n    if (i === 0) {\n      v = xin;\n      t = 'x';\n    }\n    else if (i === 1) {\n      v = yin;\n      t = 'y';\n    }\n    else {\n      v = zin;\n      t = 'z';\n    }\n    switch (crs.axis[i]) {\n    case 'e':\n      out[t] = v;\n      break;\n    case 'w':\n      out[t] = -v;\n      break;\n    case 'n':\n      out[t] = v;\n      break;\n    case 's':\n      out[t] = -v;\n      break;\n    case 'u':\n      if (point[t] !== undefined) {\n        out.z = v;\n      }\n      break;\n    case 'd':\n      if (point[t] !== undefined) {\n        out.z = -v;\n      }\n      break;\n    default:\n      //console.log(\"ERROR: unknow axis (\"+crs.axis[i]+\") - check definition of \"+crs.projName);\n      return null;\n    }\n  }\n  return out;\n}\n","export default function (array){\n  var out = {\n    x: array[0],\n    y: array[1]\n  };\n  if (array.length>2) {\n    out.z = array[2];\n  }\n  if (array.length>3) {\n    out.m = array[3];\n  }\n  return out;\n}","export default function (point) {\n  checkCoord(point.x);\n  checkCoord(point.y);\n}\nfunction checkCoord(num) {\n  if (typeof Number.isFinite === 'function') {\n    if (Number.isFinite(num)) {\n      return;\n    }\n    throw new TypeError('coordinates must be finite numbers');\n  }\n  if (typeof num !== 'number' || num !== num || !isFinite(num)) {\n    throw new TypeError('coordinates must be finite numbers');\n  }\n}\n","import {D2R, R2D, PJD_3PARAM, PJD_7PARAM} from './constants/values';\nimport datum_transform from './datum_transform';\nimport adjust_axis from './adjust_axis';\nimport proj from './Proj';\nimport toPoint from './common/toPoint';\nimport checkSanity from './checkSanity';\n\nfunction checkNotWGS(source, dest) {\n  return ((source.datum.datum_type === PJD_3PARAM || source.datum.datum_type === PJD_7PARAM) && dest.datumCode !== 'WGS84') || ((dest.datum.datum_type === PJD_3PARAM || dest.datum.datum_type === PJD_7PARAM) && source.datumCode !== 'WGS84');\n}\n\nexport default function transform(source, dest, point) {\n  var wgs84;\n  if (Array.isArray(point)) {\n    point = toPoint(point);\n  }\n  checkSanity(point);\n  // Workaround for datum shifts towgs84, if either source or destination projection is not wgs84\n  if (source.datum && dest.datum && checkNotWGS(source, dest)) {\n    wgs84 = new proj('WGS84');\n    point = transform(source, wgs84, point);\n    source = wgs84;\n  }\n  // DGR, 2010/11/12\n  if (source.axis !== 'enu') {\n    point = adjust_axis(source, false, point);\n  }\n  // Transform source points to long/lat, if they aren't already.\n  if (source.projName === 'longlat') {\n    point = {\n      x: point.x * D2R,\n      y: point.y * D2R\n    };\n  }\n  else {\n    if (source.to_meter) {\n      point = {\n        x: point.x * source.to_meter,\n        y: point.y * source.to_meter\n      };\n    }\n    point = source.inverse(point); // Convert Cartesian to longlat\n  }\n  // Adjust for the prime meridian if necessary\n  if (source.from_greenwich) {\n    point.x += source.from_greenwich;\n  }\n\n  // Convert datums if needed, and if possible.\n  point = datum_transform(source.datum, dest.datum, point);\n\n  // Adjust for the prime meridian if necessary\n  if (dest.from_greenwich) {\n    point = {\n      x: point.x - dest.from_greenwich,\n      y: point.y\n    };\n  }\n\n  if (dest.projName === 'longlat') {\n    // convert radians to decimal degrees\n    point = {\n      x: point.x * R2D,\n      y: point.y * R2D\n    };\n  } else { // else project\n    point = dest.forward(point);\n    if (dest.to_meter) {\n      point = {\n        x: point.x / dest.to_meter,\n        y: point.y / dest.to_meter\n      };\n    }\n  }\n\n  // DGR, 2010/11/12\n  if (dest.axis !== 'enu') {\n    return adjust_axis(dest, true, point);\n  }\n\n  return point;\n}\n","import proj from './Proj';\nimport transform from './transform';\nvar wgs84 = proj('WGS84');\n\nfunction transformer(from, to, coords) {\n  var transformedArray, out, keys;\n  if (Array.isArray(coords)) {\n    transformedArray = transform(from, to, coords);\n    if (coords.length === 3) {\n      return [transformedArray.x, transformedArray.y, transformedArray.z];\n    }\n    else {\n      return [transformedArray.x, transformedArray.y];\n    }\n  }\n  else {\n    out = transform(from, to, coords);\n    keys = Object.keys(coords);\n    if (keys.length === 2) {\n      return out;\n    }\n    keys.forEach(function (key) {\n      if (key === 'x' || key === 'y') {\n        return;\n      }\n      out[key] = coords[key];\n    });\n    return out;\n  }\n}\n\nfunction checkProj(item) {\n  if (item instanceof proj) {\n    return item;\n  }\n  if (item.oProj) {\n    return item.oProj;\n  }\n  return proj(item);\n}\nfunction proj4(fromProj, toProj, coord) {\n  fromProj = checkProj(fromProj);\n  var single = false;\n  var obj;\n  if (typeof toProj === 'undefined') {\n    toProj = fromProj;\n    fromProj = wgs84;\n    single = true;\n  }\n  else if (typeof toProj.x !== 'undefined' || Array.isArray(toProj)) {\n    coord = toProj;\n    toProj = fromProj;\n    fromProj = wgs84;\n    single = true;\n  }\n  toProj = checkProj(toProj);\n  if (coord) {\n    return transformer(fromProj, toProj, coord);\n  }\n  else {\n    obj = {\n      forward: function(coords) {\n        return transformer(fromProj, toProj, coords);\n      },\n      inverse: function(coords) {\n        return transformer(toProj, fromProj, coords);\n      }\n    };\n    if (single) {\n      obj.oProj = toProj;\n    }\n    return obj;\n  }\n}\nexport default proj4;\n","\n\n\n/**\n * UTM zones are grouped, and assigned to one of a group of 6\n * sets.\n *\n * {int} @private\n */\nvar NUM_100K_SETS = 6;\n\n/**\n * The column letters (for easting) of the lower left value, per\n * set.\n *\n * {string} @private\n */\nvar SET_ORIGIN_COLUMN_LETTERS = 'AJSAJS';\n\n/**\n * The row letters (for northing) of the lower left value, per\n * set.\n *\n * {string} @private\n */\nvar SET_ORIGIN_ROW_LETTERS = 'AFAFAF';\n\nvar A = 65; // A\nvar I = 73; // I\nvar O = 79; // O\nvar V = 86; // V\nvar Z = 90; // Z\nexport default {\n  forward: forward,\n  inverse: inverse,\n  toPoint: toPoint\n};\n/**\n * Conversion of lat/lon to MGRS.\n *\n * @param {object} ll Object literal with lat and lon properties on a\n *     WGS84 ellipsoid.\n * @param {int} accuracy Accuracy in digits (5 for 1 m, 4 for 10 m, 3 for\n *      100 m, 2 for 1000 m or 1 for 10000 m). Optional, default is 5.\n * @return {string} the MGRS string for the given location and accuracy.\n */\nexport function forward(ll, accuracy) {\n  accuracy = accuracy || 5; // default accuracy 1m\n  return encode(LLtoUTM({\n    lat: ll[1],\n    lon: ll[0]\n  }), accuracy);\n};\n\n/**\n * Conversion of MGRS to lat/lon.\n *\n * @param {string} mgrs MGRS string.\n * @return {array} An array with left (longitude), bottom (latitude), right\n *     (longitude) and top (latitude) values in WGS84, representing the\n *     bounding box for the provided MGRS reference.\n */\nexport function inverse(mgrs) {\n  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n  if (bbox.lat && bbox.lon) {\n    return [bbox.lon, bbox.lat, bbox.lon, bbox.lat];\n  }\n  return [bbox.left, bbox.bottom, bbox.right, bbox.top];\n};\n\nexport function toPoint(mgrs) {\n  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n  if (bbox.lat && bbox.lon) {\n    return [bbox.lon, bbox.lat];\n  }\n  return [(bbox.left + bbox.right) / 2, (bbox.top + bbox.bottom) / 2];\n};\n/**\n * Conversion from degrees to radians.\n *\n * @private\n * @param {number} deg the angle in degrees.\n * @return {number} the angle in radians.\n */\nfunction degToRad(deg) {\n  return (deg * (Math.PI / 180.0));\n}\n\n/**\n * Conversion from radians to degrees.\n *\n * @private\n * @param {number} rad the angle in radians.\n * @return {number} the angle in degrees.\n */\nfunction radToDeg(rad) {\n  return (180.0 * (rad / Math.PI));\n}\n\n/**\n * Converts a set of Longitude and Latitude co-ordinates to UTM\n * using the WGS84 ellipsoid.\n *\n * @private\n * @param {object} ll Object literal with lat and lon properties\n *     representing the WGS84 coordinate to be converted.\n * @return {object} Object literal containing the UTM value with easting,\n *     northing, zoneNumber and zoneLetter properties, and an optional\n *     accuracy property in digits. Returns null if the conversion failed.\n */\nfunction LLtoUTM(ll) {\n  var Lat = ll.lat;\n  var Long = ll.lon;\n  var a = 6378137.0; //ellip.radius;\n  var eccSquared = 0.00669438; //ellip.eccsq;\n  var k0 = 0.9996;\n  var LongOrigin;\n  var eccPrimeSquared;\n  var N, T, C, A, M;\n  var LatRad = degToRad(Lat);\n  var LongRad = degToRad(Long);\n  var LongOriginRad;\n  var ZoneNumber;\n  // (int)\n  ZoneNumber = Math.floor((Long + 180) / 6) + 1;\n\n  //Make sure the longitude 180.00 is in Zone 60\n  if (Long === 180) {\n    ZoneNumber = 60;\n  }\n\n  // Special zone for Norway\n  if (Lat >= 56.0 && Lat < 64.0 && Long >= 3.0 && Long < 12.0) {\n    ZoneNumber = 32;\n  }\n\n  // Special zones for Svalbard\n  if (Lat >= 72.0 && Lat < 84.0) {\n    if (Long >= 0.0 && Long < 9.0) {\n      ZoneNumber = 31;\n    }\n    else if (Long >= 9.0 && Long < 21.0) {\n      ZoneNumber = 33;\n    }\n    else if (Long >= 21.0 && Long < 33.0) {\n      ZoneNumber = 35;\n    }\n    else if (Long >= 33.0 && Long < 42.0) {\n      ZoneNumber = 37;\n    }\n  }\n\n  LongOrigin = (ZoneNumber - 1) * 6 - 180 + 3; //+3 puts origin\n  // in middle of\n  // zone\n  LongOriginRad = degToRad(LongOrigin);\n\n  eccPrimeSquared = (eccSquared) / (1 - eccSquared);\n\n  N = a / Math.sqrt(1 - eccSquared * Math.sin(LatRad) * Math.sin(LatRad));\n  T = Math.tan(LatRad) * Math.tan(LatRad);\n  C = eccPrimeSquared * Math.cos(LatRad) * Math.cos(LatRad);\n  A = Math.cos(LatRad) * (LongRad - LongOriginRad);\n\n  M = a * ((1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256) * LatRad - (3 * eccSquared / 8 + 3 * eccSquared * eccSquared / 32 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(2 * LatRad) + (15 * eccSquared * eccSquared / 256 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(4 * LatRad) - (35 * eccSquared * eccSquared * eccSquared / 3072) * Math.sin(6 * LatRad));\n\n  var UTMEasting = (k0 * N * (A + (1 - T + C) * A * A * A / 6.0 + (5 - 18 * T + T * T + 72 * C - 58 * eccPrimeSquared) * A * A * A * A * A / 120.0) + 500000.0);\n\n  var UTMNorthing = (k0 * (M + N * Math.tan(LatRad) * (A * A / 2 + (5 - T + 9 * C + 4 * C * C) * A * A * A * A / 24.0 + (61 - 58 * T + T * T + 600 * C - 330 * eccPrimeSquared) * A * A * A * A * A * A / 720.0)));\n  if (Lat < 0.0) {\n    UTMNorthing += 10000000.0; //10000000 meter offset for\n    // southern hemisphere\n  }\n\n  return {\n    northing: Math.round(UTMNorthing),\n    easting: Math.round(UTMEasting),\n    zoneNumber: ZoneNumber,\n    zoneLetter: getLetterDesignator(Lat)\n  };\n}\n\n/**\n * Converts UTM coords to lat/long, using the WGS84 ellipsoid. This is a convenience\n * class where the Zone can be specified as a single string eg.\"60N\" which\n * is then broken down into the ZoneNumber and ZoneLetter.\n *\n * @private\n * @param {object} utm An object literal with northing, easting, zoneNumber\n *     and zoneLetter properties. If an optional accuracy property is\n *     provided (in meters), a bounding box will be returned instead of\n *     latitude and longitude.\n * @return {object} An object literal containing either lat and lon values\n *     (if no accuracy was provided), or top, right, bottom and left values\n *     for the bounding box calculated according to the provided accuracy.\n *     Returns null if the conversion failed.\n */\nfunction UTMtoLL(utm) {\n\n  var UTMNorthing = utm.northing;\n  var UTMEasting = utm.easting;\n  var zoneLetter = utm.zoneLetter;\n  var zoneNumber = utm.zoneNumber;\n  // check the ZoneNummber is valid\n  if (zoneNumber < 0 || zoneNumber > 60) {\n    return null;\n  }\n\n  var k0 = 0.9996;\n  var a = 6378137.0; //ellip.radius;\n  var eccSquared = 0.00669438; //ellip.eccsq;\n  var eccPrimeSquared;\n  var e1 = (1 - Math.sqrt(1 - eccSquared)) / (1 + Math.sqrt(1 - eccSquared));\n  var N1, T1, C1, R1, D, M;\n  var LongOrigin;\n  var mu, phi1Rad;\n\n  // remove 500,000 meter offset for longitude\n  var x = UTMEasting - 500000.0;\n  var y = UTMNorthing;\n\n  // We must know somehow if we are in the Northern or Southern\n  // hemisphere, this is the only time we use the letter So even\n  // if the Zone letter isn't exactly correct it should indicate\n  // the hemisphere correctly\n  if (zoneLetter < 'N') {\n    y -= 10000000.0; // remove 10,000,000 meter offset used\n    // for southern hemisphere\n  }\n\n  // There are 60 zones with zone 1 being at West -180 to -174\n  LongOrigin = (zoneNumber - 1) * 6 - 180 + 3; // +3 puts origin\n  // in middle of\n  // zone\n\n  eccPrimeSquared = (eccSquared) / (1 - eccSquared);\n\n  M = y / k0;\n  mu = M / (a * (1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256));\n\n  phi1Rad = mu + (3 * e1 / 2 - 27 * e1 * e1 * e1 / 32) * Math.sin(2 * mu) + (21 * e1 * e1 / 16 - 55 * e1 * e1 * e1 * e1 / 32) * Math.sin(4 * mu) + (151 * e1 * e1 * e1 / 96) * Math.sin(6 * mu);\n  // double phi1 = ProjMath.radToDeg(phi1Rad);\n\n  N1 = a / Math.sqrt(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad));\n  T1 = Math.tan(phi1Rad) * Math.tan(phi1Rad);\n  C1 = eccPrimeSquared * Math.cos(phi1Rad) * Math.cos(phi1Rad);\n  R1 = a * (1 - eccSquared) / Math.pow(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad), 1.5);\n  D = x / (N1 * k0);\n\n  var lat = phi1Rad - (N1 * Math.tan(phi1Rad) / R1) * (D * D / 2 - (5 + 3 * T1 + 10 * C1 - 4 * C1 * C1 - 9 * eccPrimeSquared) * D * D * D * D / 24 + (61 + 90 * T1 + 298 * C1 + 45 * T1 * T1 - 252 * eccPrimeSquared - 3 * C1 * C1) * D * D * D * D * D * D / 720);\n  lat = radToDeg(lat);\n\n  var lon = (D - (1 + 2 * T1 + C1) * D * D * D / 6 + (5 - 2 * C1 + 28 * T1 - 3 * C1 * C1 + 8 * eccPrimeSquared + 24 * T1 * T1) * D * D * D * D * D / 120) / Math.cos(phi1Rad);\n  lon = LongOrigin + radToDeg(lon);\n\n  var result;\n  if (utm.accuracy) {\n    var topRight = UTMtoLL({\n      northing: utm.northing + utm.accuracy,\n      easting: utm.easting + utm.accuracy,\n      zoneLetter: utm.zoneLetter,\n      zoneNumber: utm.zoneNumber\n    });\n    result = {\n      top: topRight.lat,\n      right: topRight.lon,\n      bottom: lat,\n      left: lon\n    };\n  }\n  else {\n    result = {\n      lat: lat,\n      lon: lon\n    };\n  }\n  return result;\n}\n\n/**\n * Calculates the MGRS letter designator for the given latitude.\n *\n * @private\n * @param {number} lat The latitude in WGS84 to get the letter designator\n *     for.\n * @return {char} The letter designator.\n */\nfunction getLetterDesignator(lat) {\n  //This is here as an error flag to show that the Latitude is\n  //outside MGRS limits\n  var LetterDesignator = 'Z';\n\n  if ((84 >= lat) && (lat >= 72)) {\n    LetterDesignator = 'X';\n  }\n  else if ((72 > lat) && (lat >= 64)) {\n    LetterDesignator = 'W';\n  }\n  else if ((64 > lat) && (lat >= 56)) {\n    LetterDesignator = 'V';\n  }\n  else if ((56 > lat) && (lat >= 48)) {\n    LetterDesignator = 'U';\n  }\n  else if ((48 > lat) && (lat >= 40)) {\n    LetterDesignator = 'T';\n  }\n  else if ((40 > lat) && (lat >= 32)) {\n    LetterDesignator = 'S';\n  }\n  else if ((32 > lat) && (lat >= 24)) {\n    LetterDesignator = 'R';\n  }\n  else if ((24 > lat) && (lat >= 16)) {\n    LetterDesignator = 'Q';\n  }\n  else if ((16 > lat) && (lat >= 8)) {\n    LetterDesignator = 'P';\n  }\n  else if ((8 > lat) && (lat >= 0)) {\n    LetterDesignator = 'N';\n  }\n  else if ((0 > lat) && (lat >= -8)) {\n    LetterDesignator = 'M';\n  }\n  else if ((-8 > lat) && (lat >= -16)) {\n    LetterDesignator = 'L';\n  }\n  else if ((-16 > lat) && (lat >= -24)) {\n    LetterDesignator = 'K';\n  }\n  else if ((-24 > lat) && (lat >= -32)) {\n    LetterDesignator = 'J';\n  }\n  else if ((-32 > lat) && (lat >= -40)) {\n    LetterDesignator = 'H';\n  }\n  else if ((-40 > lat) && (lat >= -48)) {\n    LetterDesignator = 'G';\n  }\n  else if ((-48 > lat) && (lat >= -56)) {\n    LetterDesignator = 'F';\n  }\n  else if ((-56 > lat) && (lat >= -64)) {\n    LetterDesignator = 'E';\n  }\n  else if ((-64 > lat) && (lat >= -72)) {\n    LetterDesignator = 'D';\n  }\n  else if ((-72 > lat) && (lat >= -80)) {\n    LetterDesignator = 'C';\n  }\n  return LetterDesignator;\n}\n\n/**\n * Encodes a UTM location as MGRS string.\n *\n * @private\n * @param {object} utm An object literal with easting, northing,\n *     zoneLetter, zoneNumber\n * @param {number} accuracy Accuracy in digits (1-5).\n * @return {string} MGRS string for the given UTM location.\n */\nfunction encode(utm, accuracy) {\n  // prepend with leading zeroes\n  var seasting = \"00000\" + utm.easting,\n    snorthing = \"00000\" + utm.northing;\n\n  return utm.zoneNumber + utm.zoneLetter + get100kID(utm.easting, utm.northing, utm.zoneNumber) + seasting.substr(seasting.length - 5, accuracy) + snorthing.substr(snorthing.length - 5, accuracy);\n}\n\n/**\n * Get the two letter 100k designator for a given UTM easting,\n * northing and zone number value.\n *\n * @private\n * @param {number} easting\n * @param {number} northing\n * @param {number} zoneNumber\n * @return the two letter 100k designator for the given UTM location.\n */\nfunction get100kID(easting, northing, zoneNumber) {\n  var setParm = get100kSetForZone(zoneNumber);\n  var setColumn = Math.floor(easting / 100000);\n  var setRow = Math.floor(northing / 100000) % 20;\n  return getLetter100kID(setColumn, setRow, setParm);\n}\n\n/**\n * Given a UTM zone number, figure out the MGRS 100K set it is in.\n *\n * @private\n * @param {number} i An UTM zone number.\n * @return {number} the 100k set the UTM zone is in.\n */\nfunction get100kSetForZone(i) {\n  var setParm = i % NUM_100K_SETS;\n  if (setParm === 0) {\n    setParm = NUM_100K_SETS;\n  }\n\n  return setParm;\n}\n\n/**\n * Get the two-letter MGRS 100k designator given information\n * translated from the UTM northing, easting and zone number.\n *\n * @private\n * @param {number} column the column index as it relates to the MGRS\n *        100k set spreadsheet, created from the UTM easting.\n *        Values are 1-8.\n * @param {number} row the row index as it relates to the MGRS 100k set\n *        spreadsheet, created from the UTM northing value. Values\n *        are from 0-19.\n * @param {number} parm the set block, as it relates to the MGRS 100k set\n *        spreadsheet, created from the UTM zone. Values are from\n *        1-60.\n * @return two letter MGRS 100k code.\n */\nfunction getLetter100kID(column, row, parm) {\n  // colOrigin and rowOrigin are the letters at the origin of the set\n  var index = parm - 1;\n  var colOrigin = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(index);\n  var rowOrigin = SET_ORIGIN_ROW_LETTERS.charCodeAt(index);\n\n  // colInt and rowInt are the letters to build to return\n  var colInt = colOrigin + column - 1;\n  var rowInt = rowOrigin + row;\n  var rollover = false;\n\n  if (colInt > Z) {\n    colInt = colInt - Z + A - 1;\n    rollover = true;\n  }\n\n  if (colInt === I || (colOrigin < I && colInt > I) || ((colInt > I || colOrigin < I) && rollover)) {\n    colInt++;\n  }\n\n  if (colInt === O || (colOrigin < O && colInt > O) || ((colInt > O || colOrigin < O) && rollover)) {\n    colInt++;\n\n    if (colInt === I) {\n      colInt++;\n    }\n  }\n\n  if (colInt > Z) {\n    colInt = colInt - Z + A - 1;\n  }\n\n  if (rowInt > V) {\n    rowInt = rowInt - V + A - 1;\n    rollover = true;\n  }\n  else {\n    rollover = false;\n  }\n\n  if (((rowInt === I) || ((rowOrigin < I) && (rowInt > I))) || (((rowInt > I) || (rowOrigin < I)) && rollover)) {\n    rowInt++;\n  }\n\n  if (((rowInt === O) || ((rowOrigin < O) && (rowInt > O))) || (((rowInt > O) || (rowOrigin < O)) && rollover)) {\n    rowInt++;\n\n    if (rowInt === I) {\n      rowInt++;\n    }\n  }\n\n  if (rowInt > V) {\n    rowInt = rowInt - V + A - 1;\n  }\n\n  var twoLetter = String.fromCharCode(colInt) + String.fromCharCode(rowInt);\n  return twoLetter;\n}\n\n/**\n * Decode the UTM parameters from a MGRS string.\n *\n * @private\n * @param {string} mgrsString an UPPERCASE coordinate string is expected.\n * @return {object} An object literal with easting, northing, zoneLetter,\n *     zoneNumber and accuracy (in meters) properties.\n */\nfunction decode(mgrsString) {\n\n  if (mgrsString && mgrsString.length === 0) {\n    throw (\"MGRSPoint coverting from nothing\");\n  }\n\n  var length = mgrsString.length;\n\n  var hunK = null;\n  var sb = \"\";\n  var testChar;\n  var i = 0;\n\n  // get Zone number\n  while (!(/[A-Z]/).test(testChar = mgrsString.charAt(i))) {\n    if (i >= 2) {\n      throw (\"MGRSPoint bad conversion from: \" + mgrsString);\n    }\n    sb += testChar;\n    i++;\n  }\n\n  var zoneNumber = parseInt(sb, 10);\n\n  if (i === 0 || i + 3 > length) {\n    // A good MGRS string has to be 4-5 digits long,\n    // ##AAA/#AAA at least.\n    throw (\"MGRSPoint bad conversion from: \" + mgrsString);\n  }\n\n  var zoneLetter = mgrsString.charAt(i++);\n\n  // Should we check the zone letter here? Why not.\n  if (zoneLetter <= 'A' || zoneLetter === 'B' || zoneLetter === 'Y' || zoneLetter >= 'Z' || zoneLetter === 'I' || zoneLetter === 'O') {\n    throw (\"MGRSPoint zone letter \" + zoneLetter + \" not handled: \" + mgrsString);\n  }\n\n  hunK = mgrsString.substring(i, i += 2);\n\n  var set = get100kSetForZone(zoneNumber);\n\n  var east100k = getEastingFromChar(hunK.charAt(0), set);\n  var north100k = getNorthingFromChar(hunK.charAt(1), set);\n\n  // We have a bug where the northing may be 2000000 too low.\n  // How\n  // do we know when to roll over?\n\n  while (north100k < getMinNorthing(zoneLetter)) {\n    north100k += 2000000;\n  }\n\n  // calculate the char index for easting/northing separator\n  var remainder = length - i;\n\n  if (remainder % 2 !== 0) {\n    throw (\"MGRSPoint has to have an even number \\nof digits after the zone letter and two 100km letters - front \\nhalf for easting meters, second half for \\nnorthing meters\" + mgrsString);\n  }\n\n  var sep = remainder / 2;\n\n  var sepEasting = 0.0;\n  var sepNorthing = 0.0;\n  var accuracyBonus, sepEastingString, sepNorthingString, easting, northing;\n  if (sep > 0) {\n    accuracyBonus = 100000.0 / Math.pow(10, sep);\n    sepEastingString = mgrsString.substring(i, i + sep);\n    sepEasting = parseFloat(sepEastingString) * accuracyBonus;\n    sepNorthingString = mgrsString.substring(i + sep);\n    sepNorthing = parseFloat(sepNorthingString) * accuracyBonus;\n  }\n\n  easting = sepEasting + east100k;\n  northing = sepNorthing + north100k;\n\n  return {\n    easting: easting,\n    northing: northing,\n    zoneLetter: zoneLetter,\n    zoneNumber: zoneNumber,\n    accuracy: accuracyBonus\n  };\n}\n\n/**\n * Given the first letter from a two-letter MGRS 100k zone, and given the\n * MGRS table set for the zone number, figure out the easting value that\n * should be added to the other, secondary easting value.\n *\n * @private\n * @param {char} e The first letter from a two-letter MGRS 100´k zone.\n * @param {number} set The MGRS table set for the zone number.\n * @return {number} The easting value for the given letter and set.\n */\nfunction getEastingFromChar(e, set) {\n  // colOrigin is the letter at the origin of the set for the\n  // column\n  var curCol = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(set - 1);\n  var eastingValue = 100000.0;\n  var rewindMarker = false;\n\n  while (curCol !== e.charCodeAt(0)) {\n    curCol++;\n    if (curCol === I) {\n      curCol++;\n    }\n    if (curCol === O) {\n      curCol++;\n    }\n    if (curCol > Z) {\n      if (rewindMarker) {\n        throw (\"Bad character: \" + e);\n      }\n      curCol = A;\n      rewindMarker = true;\n    }\n    eastingValue += 100000.0;\n  }\n\n  return eastingValue;\n}\n\n/**\n * Given the second letter from a two-letter MGRS 100k zone, and given the\n * MGRS table set for the zone number, figure out the northing value that\n * should be added to the other, secondary northing value. You have to\n * remember that Northings are determined from the equator, and the vertical\n * cycle of letters mean a 2000000 additional northing meters. This happens\n * approx. every 18 degrees of latitude. This method does *NOT* count any\n * additional northings. You have to figure out how many 2000000 meters need\n * to be added for the zone letter of the MGRS coordinate.\n *\n * @private\n * @param {char} n Second letter of the MGRS 100k zone\n * @param {number} set The MGRS table set number, which is dependent on the\n *     UTM zone number.\n * @return {number} The northing value for the given letter and set.\n */\nfunction getNorthingFromChar(n, set) {\n\n  if (n > 'V') {\n    throw (\"MGRSPoint given invalid Northing \" + n);\n  }\n\n  // rowOrigin is the letter at the origin of the set for the\n  // column\n  var curRow = SET_ORIGIN_ROW_LETTERS.charCodeAt(set - 1);\n  var northingValue = 0.0;\n  var rewindMarker = false;\n\n  while (curRow !== n.charCodeAt(0)) {\n    curRow++;\n    if (curRow === I) {\n      curRow++;\n    }\n    if (curRow === O) {\n      curRow++;\n    }\n    // fixing a bug making whole application hang in this loop\n    // when 'n' is a wrong character\n    if (curRow > V) {\n      if (rewindMarker) { // making sure that this loop ends\n        throw (\"Bad character: \" + n);\n      }\n      curRow = A;\n      rewindMarker = true;\n    }\n    northingValue += 100000.0;\n  }\n\n  return northingValue;\n}\n\n/**\n * The function getMinNorthing returns the minimum northing value of a MGRS\n * zone.\n *\n * Ported from Geotrans' c Lattitude_Band_Value structure table.\n *\n * @private\n * @param {char} zoneLetter The MGRS zone to get the min northing for.\n * @return {number}\n */\nfunction getMinNorthing(zoneLetter) {\n  var northing;\n  switch (zoneLetter) {\n  case 'C':\n    northing = 1100000.0;\n    break;\n  case 'D':\n    northing = 2000000.0;\n    break;\n  case 'E':\n    northing = 2800000.0;\n    break;\n  case 'F':\n    northing = 3700000.0;\n    break;\n  case 'G':\n    northing = 4600000.0;\n    break;\n  case 'H':\n    northing = 5500000.0;\n    break;\n  case 'J':\n    northing = 6400000.0;\n    break;\n  case 'K':\n    northing = 7300000.0;\n    break;\n  case 'L':\n    northing = 8200000.0;\n    break;\n  case 'M':\n    northing = 9100000.0;\n    break;\n  case 'N':\n    northing = 0.0;\n    break;\n  case 'P':\n    northing = 800000.0;\n    break;\n  case 'Q':\n    northing = 1700000.0;\n    break;\n  case 'R':\n    northing = 2600000.0;\n    break;\n  case 'S':\n    northing = 3500000.0;\n    break;\n  case 'T':\n    northing = 4400000.0;\n    break;\n  case 'U':\n    northing = 5300000.0;\n    break;\n  case 'V':\n    northing = 6200000.0;\n    break;\n  case 'W':\n    northing = 7000000.0;\n    break;\n  case 'X':\n    northing = 7900000.0;\n    break;\n  default:\n    northing = -1.0;\n  }\n  if (northing >= 0.0) {\n    return northing;\n  }\n  else {\n    throw (\"Invalid zone letter: \" + zoneLetter);\n  }\n\n}\n","import {toPoint, forward} from 'mgrs';\n\nfunction Point(x, y, z) {\n  if (!(this instanceof Point)) {\n    return new Point(x, y, z);\n  }\n  if (Array.isArray(x)) {\n    this.x = x[0];\n    this.y = x[1];\n    this.z = x[2] || 0.0;\n  } else if(typeof x === 'object') {\n    this.x = x.x;\n    this.y = x.y;\n    this.z = x.z || 0.0;\n  } else if (typeof x === 'string' && typeof y === 'undefined') {\n    var coords = x.split(',');\n    this.x = parseFloat(coords[0], 10);\n    this.y = parseFloat(coords[1], 10);\n    this.z = parseFloat(coords[2], 10) || 0.0;\n  } else {\n    this.x = x;\n    this.y = y;\n    this.z = z || 0.0;\n  }\n  console.warn('proj4.Point will be removed in version 3, use proj4.toPoint');\n}\n\nPoint.fromMGRS = function(mgrsStr) {\n  return new Point(toPoint(mgrsStr));\n};\nPoint.prototype.toMGRS = function(accuracy) {\n  return forward([this.x, this.y], accuracy);\n};\nexport default Point;\n","var C00 = 1;\nvar C02 = 0.25;\nvar C04 = 0.046875;\nvar C06 = 0.01953125;\nvar C08 = 0.01068115234375;\nvar C22 = 0.75;\nvar C44 = 0.46875;\nvar C46 = 0.01302083333333333333;\nvar C48 = 0.00712076822916666666;\nvar C66 = 0.36458333333333333333;\nvar C68 = 0.00569661458333333333;\nvar C88 = 0.3076171875;\n\nexport default function(es) {\n  var en = [];\n  en[0] = C00 - es * (C02 + es * (C04 + es * (C06 + es * C08)));\n  en[1] = es * (C22 - es * (C04 + es * (C06 + es * C08)));\n  var t = es * es;\n  en[2] = t * (C44 - es * (C46 + es * C48));\n  t *= es;\n  en[3] = t * (C66 - es * C68);\n  en[4] = t * es * C88;\n  return en;\n}","export default function(phi, sphi, cphi, en) {\n  cphi *= sphi;\n  sphi *= sphi;\n  return (en[0] * phi - cphi * (en[1] + sphi * (en[2] + sphi * (en[3] + sphi * en[4]))));\n}","import pj_mlfn from \"./pj_mlfn\";\nimport {EPSLN} from '../constants/values';\n\nvar MAX_ITER = 20;\n\nexport default function(arg, es, en) {\n  var k = 1 / (1 - es);\n  var phi = arg;\n  for (var i = MAX_ITER; i; --i) { /* rarely goes over 2 iterations */\n    var s = Math.sin(phi);\n    var t = 1 - es * s * s;\n    //t = this.pj_mlfn(phi, s, Math.cos(phi), en) - arg;\n    //phi -= t * (t * Math.sqrt(t)) * k;\n    t = (pj_mlfn(phi, s, Math.cos(phi), en) - arg) * (t * Math.sqrt(t)) * k;\n    phi -= t;\n    if (Math.abs(t) < EPSLN) {\n      return phi;\n    }\n  }\n  //..reportError(\"cass:pj_inv_mlfn: Convergence error\");\n  return phi;\n}\n","// Heavily based on this tmerc projection implementation\n// https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/tmerc.js\n\nimport pj_enfn from '../common/pj_enfn';\nimport pj_mlfn from '../common/pj_mlfn';\nimport pj_inv_mlfn from '../common/pj_inv_mlfn';\nimport adjust_lon from '../common/adjust_lon';\n\nimport {EPSLN, HALF_PI} from '../constants/values';\nimport sign from '../common/sign';\n\nexport function init() {\n  this.x0 = this.x0 !== undefined ? this.x0 : 0;\n  this.y0 = this.y0 !== undefined ? this.y0 : 0;\n  this.long0 = this.long0 !== undefined ? this.long0 : 0;\n  this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;\n\n  if (this.es) {\n    this.en = pj_enfn(this.es);\n    this.ml0 = pj_mlfn(this.lat0, Math.sin(this.lat0), Math.cos(this.lat0), this.en);\n  }\n}\n\n/**\n    Transverse Mercator Forward  - long/lat to x/y\n    long/lat in radians\n  */\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n\n  var delta_lon = adjust_lon(lon - this.long0);\n  var con;\n  var x, y;\n  var sin_phi = Math.sin(lat);\n  var cos_phi = Math.cos(lat);\n\n  if (!this.es) {\n    var b = cos_phi * Math.sin(delta_lon);\n\n    if ((Math.abs(Math.abs(b) - 1)) < EPSLN) {\n      return (93);\n    }\n    else {\n      x = 0.5 * this.a * this.k0 * Math.log((1 + b) / (1 - b)) + this.x0;\n      y = cos_phi * Math.cos(delta_lon) / Math.sqrt(1 - Math.pow(b, 2));\n      b = Math.abs(y);\n\n      if (b >= 1) {\n        if ((b - 1) > EPSLN) {\n          return (93);\n        }\n        else {\n          y = 0;\n        }\n      }\n      else {\n        y = Math.acos(y);\n      }\n\n      if (lat < 0) {\n        y = -y;\n      }\n\n      y = this.a * this.k0 * (y - this.lat0) + this.y0;\n    }\n  }\n  else {\n    var al = cos_phi * delta_lon;\n    var als = Math.pow(al, 2);\n    var c = this.ep2 * Math.pow(cos_phi, 2);\n    var cs = Math.pow(c, 2);\n    var tq = Math.abs(cos_phi) > EPSLN ? Math.tan(lat) : 0;\n    var t = Math.pow(tq, 2);\n    var ts = Math.pow(t, 2);\n    con = 1 - this.es * Math.pow(sin_phi, 2);\n    al = al / Math.sqrt(con);\n    var ml = pj_mlfn(lat, sin_phi, cos_phi, this.en);\n\n    x = this.a * (this.k0 * al * (1 +\n      als / 6 * (1 - t + c +\n      als / 20 * (5 - 18 * t + ts + 14 * c - 58 * t * c +\n      als / 42 * (61 + 179 * ts - ts * t - 479 * t))))) +\n      this.x0;\n\n    y = this.a * (this.k0 * (ml - this.ml0 +\n      sin_phi * delta_lon * al / 2 * (1 +\n      als / 12 * (5 - t + 9 * c + 4 * cs +\n      als / 30 * (61 + ts - 58 * t + 270 * c - 330 * t * c +\n      als / 56 * (1385 + 543 * ts - ts * t - 3111 * t)))))) +\n      this.y0;\n  }\n\n  p.x = x;\n  p.y = y;\n\n  return p;\n}\n\n/**\n    Transverse Mercator Inverse  -  x/y to long/lat\n  */\nexport function inverse(p) {\n  var con, phi;\n  var lat, lon;\n  var x = (p.x - this.x0) * (1 / this.a);\n  var y = (p.y - this.y0) * (1 / this.a);\n\n  if (!this.es) {\n    var f = Math.exp(x / this.k0);\n    var g = 0.5 * (f - 1 / f);\n    var temp = this.lat0 + y / this.k0;\n    var h = Math.cos(temp);\n    con = Math.sqrt((1 - Math.pow(h, 2)) / (1 + Math.pow(g, 2)));\n    lat = Math.asin(con);\n\n    if (y < 0) {\n      lat = -lat;\n    }\n\n    if ((g === 0) && (h === 0)) {\n      lon = 0;\n    }\n    else {\n      lon = adjust_lon(Math.atan2(g, h) + this.long0);\n    }\n  }\n  else { // ellipsoidal form\n    con = this.ml0 + y / this.k0;\n    phi = pj_inv_mlfn(con, this.es, this.en);\n\n    if (Math.abs(phi) < HALF_PI) {\n      var sin_phi = Math.sin(phi);\n      var cos_phi = Math.cos(phi);\n      var tan_phi = Math.abs(cos_phi) > EPSLN ? Math.tan(phi) : 0;\n      var c = this.ep2 * Math.pow(cos_phi, 2);\n      var cs = Math.pow(c, 2);\n      var t = Math.pow(tan_phi, 2);\n      var ts = Math.pow(t, 2);\n      con = 1 - this.es * Math.pow(sin_phi, 2);\n      var d = x * Math.sqrt(con) / this.k0;\n      var ds = Math.pow(d, 2);\n      con = con * tan_phi;\n\n      lat = phi - (con * ds / (1 - this.es)) * 0.5 * (1 -\n        ds / 12 * (5 + 3 * t - 9 * c * t + c - 4 * cs -\n        ds / 30 * (61 + 90 * t - 252 * c * t + 45 * ts + 46 * c -\n        ds / 56 * (1385 + 3633 * t + 4095 * ts + 1574 * ts * t))));\n\n      lon = adjust_lon(this.long0 + (d * (1 -\n        ds / 6 * (1 + 2 * t + c -\n        ds / 20 * (5 + 28 * t + 24 * ts + 8 * c * t + 6 * c -\n        ds / 42 * (61 + 662 * t + 1320 * ts + 720 * ts * t)))) / cos_phi));\n    }\n    else {\n      lat = HALF_PI * sign(y);\n      lon = 0;\n    }\n  }\n\n  p.x = lon;\n  p.y = lat;\n\n  return p;\n}\n\nexport var names = [\"Transverse_Mercator\", \"Transverse Mercator\", \"tmerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","export default function(x) {\n  var r = Math.exp(x);\n  r = (r - 1 / r) / 2;\n  return r;\n}","export default function(x, y) {\n  x = Math.abs(x);\n  y = Math.abs(y);\n  var a = Math.max(x, y);\n  var b = Math.min(x, y) / (a ? a : 1);\n\n  return a * Math.sqrt(1 + Math.pow(b, 2));\n}\n","export default function(x) {\n  var y = 1 + x;\n  var z = y - 1;\n\n  return z === 0 ? x : x * Math.log(y) / z;\n}\n","import hypot from './hypot';\nimport log1py from './log1py';\n\nexport default function(x) {\n  var y = Math.abs(x);\n  y = log1py(y * (1 + y / (hypot(1, y) + 1)));\n\n  return x < 0 ? -y : y;\n}\n","export default function(pp, B) {\n  var cos_2B = 2 * Math.cos(2 * B);\n  var i = pp.length - 1;\n  var h1 = pp[i];\n  var h2 = 0;\n  var h;\n\n  while (--i >= 0) {\n    h = -h2 + cos_2B * h1 + pp[i];\n    h2 = h1;\n    h1 = h;\n  }\n\n  return (B + h * Math.sin(2 * B));\n}\n","export default function(pp, arg_r) {\n  var r = 2 * Math.cos(arg_r);\n  var i = pp.length - 1;\n  var hr1 = pp[i];\n  var hr2 = 0;\n  var hr;\n\n  while (--i >= 0) {\n    hr = -hr2 + r * hr1 + pp[i];\n    hr2 = hr1;\n    hr1 = hr;\n  }\n\n  return Math.sin(arg_r) * hr;\n}\n","export default function(x) {\n  var r = Math.exp(x);\n  r = (r + 1 / r) / 2;\n  return r;\n}","import sinh from './sinh';\nimport cosh from './cosh';\n\nexport default function(pp, arg_r, arg_i) {\n  var sin_arg_r = Math.sin(arg_r);\n  var cos_arg_r = Math.cos(arg_r);\n  var sinh_arg_i = sinh(arg_i);\n  var cosh_arg_i = cosh(arg_i);\n  var r = 2 * cos_arg_r * cosh_arg_i;\n  var i = -2 * sin_arg_r * sinh_arg_i;\n  var j = pp.length - 1;\n  var hr = pp[j];\n  var hi1 = 0;\n  var hr1 = 0;\n  var hi = 0;\n  var hr2;\n  var hi2;\n\n  while (--j >= 0) {\n    hr2 = hr1;\n    hi2 = hi1;\n    hr1 = hr;\n    hi1 = hi;\n    hr = -hr2 + r * hr1 - i * hi1 + pp[j];\n    hi = -hi2 + i * hr1 + r * hi1;\n  }\n\n  r = sin_arg_r * cosh_arg_i;\n  i = cos_arg_r * sinh_arg_i;\n\n  return [r * hr - i * hi, r * hi + i * hr];\n}\n","// Heavily based on this etmerc projection implementation\n// https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/etmerc.js\n\nimport sinh from '../common/sinh';\nimport hypot from '../common/hypot';\nimport asinhy from '../common/asinhy';\nimport gatg from '../common/gatg';\nimport clens from '../common/clens';\nimport clens_cmplx from '../common/clens_cmplx';\nimport adjust_lon from '../common/adjust_lon';\n\nexport function init() {\n  if (this.es === undefined || this.es <= 0) {\n    throw new Error('incorrect elliptical usage');\n  }\n\n  this.x0 = this.x0 !== undefined ? this.x0 : 0;\n  this.y0 = this.y0 !== undefined ? this.y0 : 0;\n  this.long0 = this.long0 !== undefined ? this.long0 : 0;\n  this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;\n\n  this.cgb = [];\n  this.cbg = [];\n  this.utg = [];\n  this.gtu = [];\n\n  var f = this.es / (1 + Math.sqrt(1 - this.es));\n  var n = f / (2 - f);\n  var np = n;\n\n  this.cgb[0] = n * (2 + n * (-2 / 3 + n * (-2 + n * (116 / 45 + n * (26 / 45 + n * (-2854 / 675 ))))));\n  this.cbg[0] = n * (-2 + n * ( 2 / 3 + n * ( 4 / 3 + n * (-82 / 45 + n * (32 / 45 + n * (4642 / 4725))))));\n\n  np = np * n;\n  this.cgb[1] = np * (7 / 3 + n * (-8 / 5 + n * (-227 / 45 + n * (2704 / 315 + n * (2323 / 945)))));\n  this.cbg[1] = np * (5 / 3 + n * (-16 / 15 + n * ( -13 / 9 + n * (904 / 315 + n * (-1522 / 945)))));\n\n  np = np * n;\n  this.cgb[2] = np * (56 / 15 + n * (-136 / 35 + n * (-1262 / 105 + n * (73814 / 2835))));\n  this.cbg[2] = np * (-26 / 15 + n * (34 / 21 + n * (8 / 5 + n * (-12686 / 2835))));\n\n  np = np * n;\n  this.cgb[3] = np * (4279 / 630 + n * (-332 / 35 + n * (-399572 / 14175)));\n  this.cbg[3] = np * (1237 / 630 + n * (-12 / 5 + n * ( -24832 / 14175)));\n\n  np = np * n;\n  this.cgb[4] = np * (4174 / 315 + n * (-144838 / 6237));\n  this.cbg[4] = np * (-734 / 315 + n * (109598 / 31185));\n\n  np = np * n;\n  this.cgb[5] = np * (601676 / 22275);\n  this.cbg[5] = np * (444337 / 155925);\n\n  np = Math.pow(n, 2);\n  this.Qn = this.k0 / (1 + n) * (1 + np * (1 / 4 + np * (1 / 64 + np / 256)));\n\n  this.utg[0] = n * (-0.5 + n * ( 2 / 3 + n * (-37 / 96 + n * ( 1 / 360 + n * (81 / 512 + n * (-96199 / 604800))))));\n  this.gtu[0] = n * (0.5 + n * (-2 / 3 + n * (5 / 16 + n * (41 / 180 + n * (-127 / 288 + n * (7891 / 37800))))));\n\n  this.utg[1] = np * (-1 / 48 + n * (-1 / 15 + n * (437 / 1440 + n * (-46 / 105 + n * (1118711 / 3870720)))));\n  this.gtu[1] = np * (13 / 48 + n * (-3 / 5 + n * (557 / 1440 + n * (281 / 630 + n * (-1983433 / 1935360)))));\n\n  np = np * n;\n  this.utg[2] = np * (-17 / 480 + n * (37 / 840 + n * (209 / 4480 + n * (-5569 / 90720 ))));\n  this.gtu[2] = np * (61 / 240 + n * (-103 / 140 + n * (15061 / 26880 + n * (167603 / 181440))));\n\n  np = np * n;\n  this.utg[3] = np * (-4397 / 161280 + n * (11 / 504 + n * (830251 / 7257600)));\n  this.gtu[3] = np * (49561 / 161280 + n * (-179 / 168 + n * (6601661 / 7257600)));\n\n  np = np * n;\n  this.utg[4] = np * (-4583 / 161280 + n * (108847 / 3991680));\n  this.gtu[4] = np * (34729 / 80640 + n * (-3418889 / 1995840));\n\n  np = np * n;\n  this.utg[5] = np * (-20648693 / 638668800);\n  this.gtu[5] = np * (212378941 / 319334400);\n\n  var Z = gatg(this.cbg, this.lat0);\n  this.Zb = -this.Qn * (Z + clens(this.gtu, 2 * Z));\n}\n\nexport function forward(p) {\n  var Ce = adjust_lon(p.x - this.long0);\n  var Cn = p.y;\n\n  Cn = gatg(this.cbg, Cn);\n  var sin_Cn = Math.sin(Cn);\n  var cos_Cn = Math.cos(Cn);\n  var sin_Ce = Math.sin(Ce);\n  var cos_Ce = Math.cos(Ce);\n\n  Cn = Math.atan2(sin_Cn, cos_Ce * cos_Cn);\n  Ce = Math.atan2(sin_Ce * cos_Cn, hypot(sin_Cn, cos_Cn * cos_Ce));\n  Ce = asinhy(Math.tan(Ce));\n\n  var tmp = clens_cmplx(this.gtu, 2 * Cn, 2 * Ce);\n\n  Cn = Cn + tmp[0];\n  Ce = Ce + tmp[1];\n\n  var x;\n  var y;\n\n  if (Math.abs(Ce) <= 2.623395162778) {\n    x = this.a * (this.Qn * Ce) + this.x0;\n    y = this.a * (this.Qn * Cn + this.Zb) + this.y0;\n  }\n  else {\n    x = Infinity;\n    y = Infinity;\n  }\n\n  p.x = x;\n  p.y = y;\n\n  return p;\n}\n\nexport function inverse(p) {\n  var Ce = (p.x - this.x0) * (1 / this.a);\n  var Cn = (p.y - this.y0) * (1 / this.a);\n\n  Cn = (Cn - this.Zb) / this.Qn;\n  Ce = Ce / this.Qn;\n\n  var lon;\n  var lat;\n\n  if (Math.abs(Ce) <= 2.623395162778) {\n    var tmp = clens_cmplx(this.utg, 2 * Cn, 2 * Ce);\n\n    Cn = Cn + tmp[0];\n    Ce = Ce + tmp[1];\n    Ce = Math.atan(sinh(Ce));\n\n    var sin_Cn = Math.sin(Cn);\n    var cos_Cn = Math.cos(Cn);\n    var sin_Ce = Math.sin(Ce);\n    var cos_Ce = Math.cos(Ce);\n\n    Cn = Math.atan2(sin_Cn * cos_Ce, hypot(sin_Ce, cos_Ce * cos_Cn));\n    Ce = Math.atan2(sin_Ce, cos_Ce * cos_Cn);\n\n    lon = adjust_lon(Ce + this.long0);\n    lat = gatg(this.cgb, Cn);\n  }\n  else {\n    lon = Infinity;\n    lat = Infinity;\n  }\n\n  p.x = lon;\n  p.y = lat;\n\n  return p;\n}\n\nexport var names = [\"Extended_Transverse_Mercator\", \"Extended Transverse Mercator\", \"etmerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from './adjust_lon';\n\nexport default function(zone, lon) {\n  if (zone === undefined) {\n    zone = Math.floor((adjust_lon(lon) + Math.PI) * 30 / Math.PI) + 1;\n\n    if (zone < 0) {\n      return 0;\n    } else if (zone > 60) {\n      return 60;\n    }\n  }\n  return zone;\n}\n","import adjust_zone from '../common/adjust_zone';\nimport etmerc from './etmerc';\nexport var dependsOn = 'etmerc';\nimport {D2R} from '../constants/values';\n\n\nexport function init() {\n  var zone = adjust_zone(this.zone, this.long0);\n  if (zone === undefined) {\n    throw new Error('unknown utm zone');\n  }\n  this.lat0 = 0;\n  this.long0 =  ((6 * Math.abs(zone)) - 183) * D2R;\n  this.x0 = 500000;\n  this.y0 = this.utmSouth ? 10000000 : 0;\n  this.k0 = 0.9996;\n\n  etmerc.init.apply(this);\n  this.forward = etmerc.forward;\n  this.inverse = etmerc.inverse;\n}\n\nexport var names = [\"Universal Transverse Mercator System\", \"utm\"];\nexport default {\n  init: init,\n  names: names,\n  dependsOn: dependsOn\n};\n","export default function(esinp, exp) {\n  return (Math.pow((1 - esinp) / (1 + esinp), exp));\n}","import srat from '../common/srat';\nvar MAX_ITER = 20;\nimport {HALF_PI, FORTPI} from '../constants/values';\n\nexport function init() {\n  var sphi = Math.sin(this.lat0);\n  var cphi = Math.cos(this.lat0);\n  cphi *= cphi;\n  this.rc = Math.sqrt(1 - this.es) / (1 - this.es * sphi * sphi);\n  this.C = Math.sqrt(1 + this.es * cphi * cphi / (1 - this.es));\n  this.phic0 = Math.asin(sphi / this.C);\n  this.ratexp = 0.5 * this.C * this.e;\n  this.K = Math.tan(0.5 * this.phic0 + FORTPI) / (Math.pow(Math.tan(0.5 * this.lat0 + FORTPI), this.C) * srat(this.e * sphi, this.ratexp));\n}\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n\n  p.y = 2 * Math.atan(this.K * Math.pow(Math.tan(0.5 * lat + FORTPI), this.C) * srat(this.e * Math.sin(lat), this.ratexp)) - HALF_PI;\n  p.x = this.C * lon;\n  return p;\n}\n\nexport function inverse(p) {\n  var DEL_TOL = 1e-14;\n  var lon = p.x / this.C;\n  var lat = p.y;\n  var num = Math.pow(Math.tan(0.5 * lat + FORTPI) / this.K, 1 / this.C);\n  for (var i = MAX_ITER; i > 0; --i) {\n    lat = 2 * Math.atan(num * srat(this.e * Math.sin(p.y), - 0.5 * this.e)) - HALF_PI;\n    if (Math.abs(lat - p.y) < DEL_TOL) {\n      break;\n    }\n    p.y = lat;\n  }\n  /* convergence failed */\n  if (!i) {\n    return null;\n  }\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"gauss\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import gauss from './gauss';\nimport adjust_lon from '../common/adjust_lon';\n\nexport function init() {\n  gauss.init.apply(this);\n  if (!this.rc) {\n    return;\n  }\n  this.sinc0 = Math.sin(this.phic0);\n  this.cosc0 = Math.cos(this.phic0);\n  this.R2 = 2 * this.rc;\n  if (!this.title) {\n    this.title = \"Oblique Stereographic Alternative\";\n  }\n}\n\nexport function forward(p) {\n  var sinc, cosc, cosl, k;\n  p.x = adjust_lon(p.x - this.long0);\n  gauss.forward.apply(this, [p]);\n  sinc = Math.sin(p.y);\n  cosc = Math.cos(p.y);\n  cosl = Math.cos(p.x);\n  k = this.k0 * this.R2 / (1 + this.sinc0 * sinc + this.cosc0 * cosc * cosl);\n  p.x = k * cosc * Math.sin(p.x);\n  p.y = k * (this.cosc0 * sinc - this.sinc0 * cosc * cosl);\n  p.x = this.a * p.x + this.x0;\n  p.y = this.a * p.y + this.y0;\n  return p;\n}\n\nexport function inverse(p) {\n  var sinc, cosc, lon, lat, rho;\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  p.x /= this.k0;\n  p.y /= this.k0;\n  if ((rho = Math.sqrt(p.x * p.x + p.y * p.y))) {\n    var c = 2 * Math.atan2(rho, this.R2);\n    sinc = Math.sin(c);\n    cosc = Math.cos(c);\n    lat = Math.asin(cosc * this.sinc0 + p.y * sinc * this.cosc0 / rho);\n    lon = Math.atan2(p.x * sinc, rho * this.cosc0 * cosc - p.y * this.sinc0 * sinc);\n  }\n  else {\n    lat = this.phic0;\n    lon = 0;\n  }\n\n  p.x = lon;\n  p.y = lat;\n  gauss.inverse.apply(this, [p]);\n  p.x = adjust_lon(p.x + this.long0);\n  return p;\n}\n\nexport var names = [\"Stereographic_North_Pole\", \"Oblique_Stereographic\", \"Polar_Stereographic\", \"sterea\",\"Oblique Stereographic Alternative\",\"Double_Stereographic\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {EPSLN, HALF_PI} from '../constants/values';\n\nimport sign from '../common/sign';\nimport msfnz from '../common/msfnz';\nimport tsfnz from '../common/tsfnz';\nimport phi2z from '../common/phi2z';\nimport adjust_lon from '../common/adjust_lon';\n\nexport function ssfn_(phit, sinphi, eccen) {\n  sinphi *= eccen;\n  return (Math.tan(0.5 * (HALF_PI + phit)) * Math.pow((1 - sinphi) / (1 + sinphi), 0.5 * eccen));\n}\n\nexport function init() {\n  this.coslat0 = Math.cos(this.lat0);\n  this.sinlat0 = Math.sin(this.lat0);\n  if (this.sphere) {\n    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n      this.k0 = 0.5 * (1 + sign(this.lat0) * Math.sin(this.lat_ts));\n    }\n  }\n  else {\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      if (this.lat0 > 0) {\n        //North pole\n        //trace('stere:north pole');\n        this.con = 1;\n      }\n      else {\n        //South pole\n        //trace('stere:south pole');\n        this.con = -1;\n      }\n    }\n    this.cons = Math.sqrt(Math.pow(1 + this.e, 1 + this.e) * Math.pow(1 - this.e, 1 - this.e));\n    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n      this.k0 = 0.5 * this.cons * msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts)) / tsfnz(this.e, this.con * this.lat_ts, this.con * Math.sin(this.lat_ts));\n    }\n    this.ms1 = msfnz(this.e, this.sinlat0, this.coslat0);\n    this.X0 = 2 * Math.atan(this.ssfn_(this.lat0, this.sinlat0, this.e)) - HALF_PI;\n    this.cosX0 = Math.cos(this.X0);\n    this.sinX0 = Math.sin(this.X0);\n  }\n}\n\n// Stereographic forward equations--mapping lat,long to x,y\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var sinlat = Math.sin(lat);\n  var coslat = Math.cos(lat);\n  var A, X, sinX, cosX, ts, rh;\n  var dlon = adjust_lon(lon - this.long0);\n\n  if (Math.abs(Math.abs(lon - this.long0) - Math.PI) <= EPSLN && Math.abs(lat + this.lat0) <= EPSLN) {\n    //case of the origine point\n    //trace('stere:this is the origin point');\n    p.x = NaN;\n    p.y = NaN;\n    return p;\n  }\n  if (this.sphere) {\n    //trace('stere:sphere case');\n    A = 2 * this.k0 / (1 + this.sinlat0 * sinlat + this.coslat0 * coslat * Math.cos(dlon));\n    p.x = this.a * A * coslat * Math.sin(dlon) + this.x0;\n    p.y = this.a * A * (this.coslat0 * sinlat - this.sinlat0 * coslat * Math.cos(dlon)) + this.y0;\n    return p;\n  }\n  else {\n    X = 2 * Math.atan(this.ssfn_(lat, sinlat, this.e)) - HALF_PI;\n    cosX = Math.cos(X);\n    sinX = Math.sin(X);\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      ts = tsfnz(this.e, lat * this.con, this.con * sinlat);\n      rh = 2 * this.a * this.k0 * ts / this.cons;\n      p.x = this.x0 + rh * Math.sin(lon - this.long0);\n      p.y = this.y0 - this.con * rh * Math.cos(lon - this.long0);\n      //trace(p.toString());\n      return p;\n    }\n    else if (Math.abs(this.sinlat0) < EPSLN) {\n      //Eq\n      //trace('stere:equateur');\n      A = 2 * this.a * this.k0 / (1 + cosX * Math.cos(dlon));\n      p.y = A * sinX;\n    }\n    else {\n      //other case\n      //trace('stere:normal case');\n      A = 2 * this.a * this.k0 * this.ms1 / (this.cosX0 * (1 + this.sinX0 * sinX + this.cosX0 * cosX * Math.cos(dlon)));\n      p.y = A * (this.cosX0 * sinX - this.sinX0 * cosX * Math.cos(dlon)) + this.y0;\n    }\n    p.x = A * cosX * Math.sin(dlon) + this.x0;\n  }\n  //trace(p.toString());\n  return p;\n}\n\n//* Stereographic inverse equations--mapping x,y to lat/long\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var lon, lat, ts, ce, Chi;\n  var rh = Math.sqrt(p.x * p.x + p.y * p.y);\n  if (this.sphere) {\n    var c = 2 * Math.atan(rh / (2 * this.a * this.k0));\n    lon = this.long0;\n    lat = this.lat0;\n    if (rh <= EPSLN) {\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    lat = Math.asin(Math.cos(c) * this.sinlat0 + p.y * Math.sin(c) * this.coslat0 / rh);\n    if (Math.abs(this.coslat0) < EPSLN) {\n      if (this.lat0 > 0) {\n        lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));\n      }\n      else {\n        lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n      }\n    }\n    else {\n      lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(c), rh * this.coslat0 * Math.cos(c) - p.y * this.sinlat0 * Math.sin(c)));\n    }\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  else {\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      if (rh <= EPSLN) {\n        lat = this.lat0;\n        lon = this.long0;\n        p.x = lon;\n        p.y = lat;\n        //trace(p.toString());\n        return p;\n      }\n      p.x *= this.con;\n      p.y *= this.con;\n      ts = rh * this.cons / (2 * this.a * this.k0);\n      lat = this.con * phi2z(this.e, ts);\n      lon = this.con * adjust_lon(this.con * this.long0 + Math.atan2(p.x, - 1 * p.y));\n    }\n    else {\n      ce = 2 * Math.atan(rh * this.cosX0 / (2 * this.a * this.k0 * this.ms1));\n      lon = this.long0;\n      if (rh <= EPSLN) {\n        Chi = this.X0;\n      }\n      else {\n        Chi = Math.asin(Math.cos(ce) * this.sinX0 + p.y * Math.sin(ce) * this.cosX0 / rh);\n        lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(ce), rh * this.cosX0 * Math.cos(ce) - p.y * this.sinX0 * Math.sin(ce)));\n      }\n      lat = -1 * phi2z(this.e, Math.tan(0.5 * (HALF_PI + Chi)));\n    }\n  }\n  p.x = lon;\n  p.y = lat;\n\n  //trace(p.toString());\n  return p;\n\n}\n\nexport var names = [\"stere\", \"Stereographic_South_Pole\", \"Polar Stereographic (variant B)\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  ssfn_: ssfn_\n};\n","/*\n  references:\n    Formules et constantes pour le Calcul pour la\n    projection cylindrique conforme à axe oblique et pour la transformation entre\n    des systèmes de référence.\n    http://www.swisstopo.admin.ch/internet/swisstopo/fr/home/topics/survey/sys/refsys/switzerland.parsysrelated1.31216.downloadList.77004.DownloadFile.tmp/swissprojectionfr.pdf\n  */\n\nexport function init() {\n  var phy0 = this.lat0;\n  this.lambda0 = this.long0;\n  var sinPhy0 = Math.sin(phy0);\n  var semiMajorAxis = this.a;\n  var invF = this.rf;\n  var flattening = 1 / invF;\n  var e2 = 2 * flattening - Math.pow(flattening, 2);\n  var e = this.e = Math.sqrt(e2);\n  this.R = this.k0 * semiMajorAxis * Math.sqrt(1 - e2) / (1 - e2 * Math.pow(sinPhy0, 2));\n  this.alpha = Math.sqrt(1 + e2 / (1 - e2) * Math.pow(Math.cos(phy0), 4));\n  this.b0 = Math.asin(sinPhy0 / this.alpha);\n  var k1 = Math.log(Math.tan(Math.PI / 4 + this.b0 / 2));\n  var k2 = Math.log(Math.tan(Math.PI / 4 + phy0 / 2));\n  var k3 = Math.log((1 + e * sinPhy0) / (1 - e * sinPhy0));\n  this.K = k1 - this.alpha * k2 + this.alpha * e / 2 * k3;\n}\n\nexport function forward(p) {\n  var Sa1 = Math.log(Math.tan(Math.PI / 4 - p.y / 2));\n  var Sa2 = this.e / 2 * Math.log((1 + this.e * Math.sin(p.y)) / (1 - this.e * Math.sin(p.y)));\n  var S = -this.alpha * (Sa1 + Sa2) + this.K;\n\n  // spheric latitude\n  var b = 2 * (Math.atan(Math.exp(S)) - Math.PI / 4);\n\n  // spheric longitude\n  var I = this.alpha * (p.x - this.lambda0);\n\n  // psoeudo equatorial rotation\n  var rotI = Math.atan(Math.sin(I) / (Math.sin(this.b0) * Math.tan(b) + Math.cos(this.b0) * Math.cos(I)));\n\n  var rotB = Math.asin(Math.cos(this.b0) * Math.sin(b) - Math.sin(this.b0) * Math.cos(b) * Math.cos(I));\n\n  p.y = this.R / 2 * Math.log((1 + Math.sin(rotB)) / (1 - Math.sin(rotB))) + this.y0;\n  p.x = this.R * rotI + this.x0;\n  return p;\n}\n\nexport function inverse(p) {\n  var Y = p.x - this.x0;\n  var X = p.y - this.y0;\n\n  var rotI = Y / this.R;\n  var rotB = 2 * (Math.atan(Math.exp(X / this.R)) - Math.PI / 4);\n\n  var b = Math.asin(Math.cos(this.b0) * Math.sin(rotB) + Math.sin(this.b0) * Math.cos(rotB) * Math.cos(rotI));\n  var I = Math.atan(Math.sin(rotI) / (Math.cos(this.b0) * Math.cos(rotI) - Math.sin(this.b0) * Math.tan(rotB)));\n\n  var lambda = this.lambda0 + I / this.alpha;\n\n  var S = 0;\n  var phy = b;\n  var prevPhy = -1000;\n  var iteration = 0;\n  while (Math.abs(phy - prevPhy) > 0.0000001) {\n    if (++iteration > 20) {\n      //...reportError(\"omercFwdInfinity\");\n      return;\n    }\n    //S = Math.log(Math.tan(Math.PI / 4 + phy / 2));\n    S = 1 / this.alpha * (Math.log(Math.tan(Math.PI / 4 + b / 2)) - this.K) + this.e * Math.log(Math.tan(Math.PI / 4 + Math.asin(this.e * Math.sin(phy)) / 2));\n    prevPhy = phy;\n    phy = 2 * Math.atan(Math.exp(S)) - Math.PI / 2;\n  }\n\n  p.x = lambda;\n  p.y = phy;\n  return p;\n}\n\nexport var names = [\"somerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import tsfnz from '../common/tsfnz';\nimport adjust_lon from '../common/adjust_lon';\nimport phi2z from '../common/phi2z';\nimport {EPSLN, HALF_PI, FORTPI} from '../constants/values';\n\n/* Initialize the Oblique Mercator  projection\n    ------------------------------------------*/\nexport function init() {\n  this.no_off = this.no_off || false;\n  this.no_rot = this.no_rot || false;\n\n  if (isNaN(this.k0)) {\n    this.k0 = 1;\n  }\n  var sinlat = Math.sin(this.lat0);\n  var coslat = Math.cos(this.lat0);\n  var con = this.e * sinlat;\n\n  this.bl = Math.sqrt(1 + this.es / (1 - this.es) * Math.pow(coslat, 4));\n  this.al = this.a * this.bl * this.k0 * Math.sqrt(1 - this.es) / (1 - con * con);\n  var t0 = tsfnz(this.e, this.lat0, sinlat);\n  var dl = this.bl / coslat * Math.sqrt((1 - this.es) / (1 - con * con));\n  if (dl * dl < 1) {\n    dl = 1;\n  }\n  var fl;\n  var gl;\n  if (!isNaN(this.longc)) {\n    //Central point and azimuth method\n\n    if (this.lat0 >= 0) {\n      fl = dl + Math.sqrt(dl * dl - 1);\n    }\n    else {\n      fl = dl - Math.sqrt(dl * dl - 1);\n    }\n    this.el = fl * Math.pow(t0, this.bl);\n    gl = 0.5 * (fl - 1 / fl);\n    this.gamma0 = Math.asin(Math.sin(this.alpha) / dl);\n    this.long0 = this.longc - Math.asin(gl * Math.tan(this.gamma0)) / this.bl;\n\n  }\n  else {\n    //2 points method\n    var t1 = tsfnz(this.e, this.lat1, Math.sin(this.lat1));\n    var t2 = tsfnz(this.e, this.lat2, Math.sin(this.lat2));\n    if (this.lat0 >= 0) {\n      this.el = (dl + Math.sqrt(dl * dl - 1)) * Math.pow(t0, this.bl);\n    }\n    else {\n      this.el = (dl - Math.sqrt(dl * dl - 1)) * Math.pow(t0, this.bl);\n    }\n    var hl = Math.pow(t1, this.bl);\n    var ll = Math.pow(t2, this.bl);\n    fl = this.el / hl;\n    gl = 0.5 * (fl - 1 / fl);\n    var jl = (this.el * this.el - ll * hl) / (this.el * this.el + ll * hl);\n    var pl = (ll - hl) / (ll + hl);\n    var dlon12 = adjust_lon(this.long1 - this.long2);\n    this.long0 = 0.5 * (this.long1 + this.long2) - Math.atan(jl * Math.tan(0.5 * this.bl * (dlon12)) / pl) / this.bl;\n    this.long0 = adjust_lon(this.long0);\n    var dlon10 = adjust_lon(this.long1 - this.long0);\n    this.gamma0 = Math.atan(Math.sin(this.bl * (dlon10)) / gl);\n    this.alpha = Math.asin(dl * Math.sin(this.gamma0));\n  }\n\n  if (this.no_off) {\n    this.uc = 0;\n  }\n  else {\n    if (this.lat0 >= 0) {\n      this.uc = this.al / this.bl * Math.atan2(Math.sqrt(dl * dl - 1), Math.cos(this.alpha));\n    }\n    else {\n      this.uc = -1 * this.al / this.bl * Math.atan2(Math.sqrt(dl * dl - 1), Math.cos(this.alpha));\n    }\n  }\n\n}\n\n/* Oblique Mercator forward equations--mapping lat,long to x,y\n    ----------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var dlon = adjust_lon(lon - this.long0);\n  var us, vs;\n  var con;\n  if (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN) {\n    if (lat > 0) {\n      con = -1;\n    }\n    else {\n      con = 1;\n    }\n    vs = this.al / this.bl * Math.log(Math.tan(FORTPI + con * this.gamma0 * 0.5));\n    us = -1 * con * HALF_PI * this.al / this.bl;\n  }\n  else {\n    var t = tsfnz(this.e, lat, Math.sin(lat));\n    var ql = this.el / Math.pow(t, this.bl);\n    var sl = 0.5 * (ql - 1 / ql);\n    var tl = 0.5 * (ql + 1 / ql);\n    var vl = Math.sin(this.bl * (dlon));\n    var ul = (sl * Math.sin(this.gamma0) - vl * Math.cos(this.gamma0)) / tl;\n    if (Math.abs(Math.abs(ul) - 1) <= EPSLN) {\n      vs = Number.POSITIVE_INFINITY;\n    }\n    else {\n      vs = 0.5 * this.al * Math.log((1 - ul) / (1 + ul)) / this.bl;\n    }\n    if (Math.abs(Math.cos(this.bl * (dlon))) <= EPSLN) {\n      us = this.al * this.bl * (dlon);\n    }\n    else {\n      us = this.al * Math.atan2(sl * Math.cos(this.gamma0) + vl * Math.sin(this.gamma0), Math.cos(this.bl * dlon)) / this.bl;\n    }\n  }\n\n  if (this.no_rot) {\n    p.x = this.x0 + us;\n    p.y = this.y0 + vs;\n  }\n  else {\n\n    us -= this.uc;\n    p.x = this.x0 + vs * Math.cos(this.alpha) + us * Math.sin(this.alpha);\n    p.y = this.y0 + us * Math.cos(this.alpha) - vs * Math.sin(this.alpha);\n  }\n  return p;\n}\n\nexport function inverse(p) {\n  var us, vs;\n  if (this.no_rot) {\n    vs = p.y - this.y0;\n    us = p.x - this.x0;\n  }\n  else {\n    vs = (p.x - this.x0) * Math.cos(this.alpha) - (p.y - this.y0) * Math.sin(this.alpha);\n    us = (p.y - this.y0) * Math.cos(this.alpha) + (p.x - this.x0) * Math.sin(this.alpha);\n    us += this.uc;\n  }\n  var qp = Math.exp(-1 * this.bl * vs / this.al);\n  var sp = 0.5 * (qp - 1 / qp);\n  var tp = 0.5 * (qp + 1 / qp);\n  var vp = Math.sin(this.bl * us / this.al);\n  var up = (vp * Math.cos(this.gamma0) + sp * Math.sin(this.gamma0)) / tp;\n  var ts = Math.pow(this.el / Math.sqrt((1 + up) / (1 - up)), 1 / this.bl);\n  if (Math.abs(up - 1) < EPSLN) {\n    p.x = this.long0;\n    p.y = HALF_PI;\n  }\n  else if (Math.abs(up + 1) < EPSLN) {\n    p.x = this.long0;\n    p.y = -1 * HALF_PI;\n  }\n  else {\n    p.y = phi2z(this.e, ts);\n    p.x = adjust_lon(this.long0 - Math.atan2(sp * Math.cos(this.gamma0) - vp * Math.sin(this.gamma0), Math.cos(this.bl * us / this.al)) / this.bl);\n  }\n  return p;\n}\n\nexport var names = [\"Hotine_Oblique_Mercator\", \"Hotine Oblique Mercator\", \"Hotine_Oblique_Mercator_Azimuth_Natural_Origin\", \"Hotine_Oblique_Mercator_Azimuth_Center\", \"omerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import msfnz from '../common/msfnz';\nimport tsfnz from '../common/tsfnz';\nimport sign from '../common/sign';\nimport adjust_lon from '../common/adjust_lon';\nimport phi2z from '../common/phi2z';\nimport {HALF_PI, EPSLN} from '../constants/values';\nexport function init() {\n\n  // array of:  r_maj,r_min,lat1,lat2,c_lon,c_lat,false_east,false_north\n  //double c_lat;                   /* center latitude                      */\n  //double c_lon;                   /* center longitude                     */\n  //double lat1;                    /* first standard parallel              */\n  //double lat2;                    /* second standard parallel             */\n  //double r_maj;                   /* major axis                           */\n  //double r_min;                   /* minor axis                           */\n  //double false_east;              /* x offset in meters                   */\n  //double false_north;             /* y offset in meters                   */\n\n  if (!this.lat2) {\n    this.lat2 = this.lat1;\n  } //if lat2 is not defined\n  if (!this.k0) {\n    this.k0 = 1;\n  }\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  // Standard Parallels cannot be equal and on opposite sides of the equator\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n\n  var temp = this.b / this.a;\n  this.e = Math.sqrt(1 - temp * temp);\n\n  var sin1 = Math.sin(this.lat1);\n  var cos1 = Math.cos(this.lat1);\n  var ms1 = msfnz(this.e, sin1, cos1);\n  var ts1 = tsfnz(this.e, this.lat1, sin1);\n\n  var sin2 = Math.sin(this.lat2);\n  var cos2 = Math.cos(this.lat2);\n  var ms2 = msfnz(this.e, sin2, cos2);\n  var ts2 = tsfnz(this.e, this.lat2, sin2);\n\n  var ts0 = tsfnz(this.e, this.lat0, Math.sin(this.lat0));\n\n  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n    this.ns = Math.log(ms1 / ms2) / Math.log(ts1 / ts2);\n  }\n  else {\n    this.ns = sin1;\n  }\n  if (isNaN(this.ns)) {\n    this.ns = sin1;\n  }\n  this.f0 = ms1 / (this.ns * Math.pow(ts1, this.ns));\n  this.rh = this.a * this.f0 * Math.pow(ts0, this.ns);\n  if (!this.title) {\n    this.title = \"Lambert Conformal Conic\";\n  }\n}\n\n// Lambert Conformal conic forward equations--mapping lat,long to x,y\n// -----------------------------------------------------------------\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  // singular cases :\n  if (Math.abs(2 * Math.abs(lat) - Math.PI) <= EPSLN) {\n    lat = sign(lat) * (HALF_PI - 2 * EPSLN);\n  }\n\n  var con = Math.abs(Math.abs(lat) - HALF_PI);\n  var ts, rh1;\n  if (con > EPSLN) {\n    ts = tsfnz(this.e, lat, Math.sin(lat));\n    rh1 = this.a * this.f0 * Math.pow(ts, this.ns);\n  }\n  else {\n    con = lat * this.ns;\n    if (con <= 0) {\n      return null;\n    }\n    rh1 = 0;\n  }\n  var theta = this.ns * adjust_lon(lon - this.long0);\n  p.x = this.k0 * (rh1 * Math.sin(theta)) + this.x0;\n  p.y = this.k0 * (this.rh - rh1 * Math.cos(theta)) + this.y0;\n\n  return p;\n}\n\n// Lambert Conformal Conic inverse equations--mapping x,y to lat/long\n// -----------------------------------------------------------------\nexport function inverse(p) {\n\n  var rh1, con, ts;\n  var lat, lon;\n  var x = (p.x - this.x0) / this.k0;\n  var y = (this.rh - (p.y - this.y0) / this.k0);\n  if (this.ns > 0) {\n    rh1 = Math.sqrt(x * x + y * y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(x * x + y * y);\n    con = -1;\n  }\n  var theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2((con * x), (con * y));\n  }\n  if ((rh1 !== 0) || (this.ns > 0)) {\n    con = 1 / this.ns;\n    ts = Math.pow((rh1 / (this.a * this.f0)), con);\n    lat = phi2z(this.e, ts);\n    if (lat === -9999) {\n      return null;\n    }\n  }\n  else {\n    lat = -HALF_PI;\n  }\n  lon = adjust_lon(theta / this.ns + this.long0);\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Lambert Tangential Conformal Conic Projection\", \"Lambert_Conformal_Conic\", \"Lambert_Conformal_Conic_2SP\", \"lcc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\n\nexport function init() {\n  this.a = 6377397.155;\n  this.es = 0.006674372230614;\n  this.e = Math.sqrt(this.es);\n  if (!this.lat0) {\n    this.lat0 = 0.863937979737193;\n  }\n  if (!this.long0) {\n    this.long0 = 0.7417649320975901 - 0.308341501185665;\n  }\n  /* if scale not set default to 0.9999 */\n  if (!this.k0) {\n    this.k0 = 0.9999;\n  }\n  this.s45 = 0.785398163397448; /* 45 */\n  this.s90 = 2 * this.s45;\n  this.fi0 = this.lat0;\n  this.e2 = this.es;\n  this.e = Math.sqrt(this.e2);\n  this.alfa = Math.sqrt(1 + (this.e2 * Math.pow(Math.cos(this.fi0), 4)) / (1 - this.e2));\n  this.uq = 1.04216856380474;\n  this.u0 = Math.asin(Math.sin(this.fi0) / this.alfa);\n  this.g = Math.pow((1 + this.e * Math.sin(this.fi0)) / (1 - this.e * Math.sin(this.fi0)), this.alfa * this.e / 2);\n  this.k = Math.tan(this.u0 / 2 + this.s45) / Math.pow(Math.tan(this.fi0 / 2 + this.s45), this.alfa) * this.g;\n  this.k1 = this.k0;\n  this.n0 = this.a * Math.sqrt(1 - this.e2) / (1 - this.e2 * Math.pow(Math.sin(this.fi0), 2));\n  this.s0 = 1.37008346281555;\n  this.n = Math.sin(this.s0);\n  this.ro0 = this.k1 * this.n0 / Math.tan(this.s0);\n  this.ad = this.s90 - this.uq;\n}\n\n/* ellipsoid */\n/* calculate xy from lat/lon */\n/* Constants, identical to inverse transform function */\nexport function forward(p) {\n  var gfi, u, deltav, s, d, eps, ro;\n  var lon = p.x;\n  var lat = p.y;\n  var delta_lon = adjust_lon(lon - this.long0);\n  /* Transformation */\n  gfi = Math.pow(((1 + this.e * Math.sin(lat)) / (1 - this.e * Math.sin(lat))), (this.alfa * this.e / 2));\n  u = 2 * (Math.atan(this.k * Math.pow(Math.tan(lat / 2 + this.s45), this.alfa) / gfi) - this.s45);\n  deltav = -delta_lon * this.alfa;\n  s = Math.asin(Math.cos(this.ad) * Math.sin(u) + Math.sin(this.ad) * Math.cos(u) * Math.cos(deltav));\n  d = Math.asin(Math.cos(u) * Math.sin(deltav) / Math.cos(s));\n  eps = this.n * d;\n  ro = this.ro0 * Math.pow(Math.tan(this.s0 / 2 + this.s45), this.n) / Math.pow(Math.tan(s / 2 + this.s45), this.n);\n  p.y = ro * Math.cos(eps) / 1;\n  p.x = ro * Math.sin(eps) / 1;\n\n  if (!this.czech) {\n    p.y *= -1;\n    p.x *= -1;\n  }\n  return (p);\n}\n\n/* calculate lat/lon from xy */\nexport function inverse(p) {\n  var u, deltav, s, d, eps, ro, fi1;\n  var ok;\n\n  /* Transformation */\n  /* revert y, x*/\n  var tmp = p.x;\n  p.x = p.y;\n  p.y = tmp;\n  if (!this.czech) {\n    p.y *= -1;\n    p.x *= -1;\n  }\n  ro = Math.sqrt(p.x * p.x + p.y * p.y);\n  eps = Math.atan2(p.y, p.x);\n  d = eps / Math.sin(this.s0);\n  s = 2 * (Math.atan(Math.pow(this.ro0 / ro, 1 / this.n) * Math.tan(this.s0 / 2 + this.s45)) - this.s45);\n  u = Math.asin(Math.cos(this.ad) * Math.sin(s) - Math.sin(this.ad) * Math.cos(s) * Math.cos(d));\n  deltav = Math.asin(Math.cos(s) * Math.sin(d) / Math.cos(u));\n  p.x = this.long0 - deltav / this.alfa;\n  fi1 = u;\n  ok = 0;\n  var iter = 0;\n  do {\n    p.y = 2 * (Math.atan(Math.pow(this.k, - 1 / this.alfa) * Math.pow(Math.tan(u / 2 + this.s45), 1 / this.alfa) * Math.pow((1 + this.e * Math.sin(fi1)) / (1 - this.e * Math.sin(fi1)), this.e / 2)) - this.s45);\n    if (Math.abs(fi1 - p.y) < 0.0000000001) {\n      ok = 1;\n    }\n    fi1 = p.y;\n    iter += 1;\n  } while (ok === 0 && iter < 15);\n  if (iter >= 15) {\n    return null;\n  }\n\n  return (p);\n}\n\nexport var names = [\"Krovak\", \"krovak\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","export default function(e0, e1, e2, e3, phi) {\n  return (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi));\n}","export default function(x) {\n  return (1 - 0.25 * x * (1 + x / 16 * (3 + 1.25 * x)));\n}","export default function(x) {\n  return (0.375 * x * (1 + 0.25 * x * (1 + 0.46875 * x)));\n}","export default function(x) {\n  return (0.05859375 * x * x * (1 + 0.75 * x));\n}","export default function(x) {\n  return (x * x * x * (35 / 3072));\n}","export default function(a, e, sinphi) {\n  var temp = e * sinphi;\n  return a / Math.sqrt(1 - temp * temp);\n}","import {HALF_PI} from '../constants/values';\nimport sign from './sign';\n\nexport default function(x) {\n  return (Math.abs(x) < HALF_PI) ? x : (x - (sign(x) * Math.PI));\n}\n","export default function(ml, e0, e1, e2, e3) {\n  var phi;\n  var dphi;\n\n  phi = ml / e0;\n  for (var i = 0; i < 15; i++) {\n    dphi = (ml - (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi))) / (e0 - 2 * e1 * Math.cos(2 * phi) + 4 * e2 * Math.cos(4 * phi) - 6 * e3 * Math.cos(6 * phi));\n    phi += dphi;\n    if (Math.abs(dphi) <= 0.0000000001) {\n      return phi;\n    }\n  }\n\n  //..reportError(\"IMLFN-CONV:Latitude failed to converge after 15 iterations\");\n  return NaN;\n}","import mlfn from '../common/mlfn';\nimport e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport gN from '../common/gN';\nimport adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport imlfn from '../common/imlfn';\nimport {HALF_PI, EPSLN} from '../constants/values';\n\nexport function init() {\n  if (!this.sphere) {\n    this.e0 = e0fn(this.es);\n    this.e1 = e1fn(this.es);\n    this.e2 = e2fn(this.es);\n    this.e3 = e3fn(this.es);\n    this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);\n  }\n}\n\n/* Cassini forward equations--mapping lat,long to x,y\n  -----------------------------------------------------------------------*/\nexport function forward(p) {\n\n  /* Forward equations\n      -----------------*/\n  var x, y;\n  var lam = p.x;\n  var phi = p.y;\n  lam = adjust_lon(lam - this.long0);\n\n  if (this.sphere) {\n    x = this.a * Math.asin(Math.cos(phi) * Math.sin(lam));\n    y = this.a * (Math.atan2(Math.tan(phi), Math.cos(lam)) - this.lat0);\n  }\n  else {\n    //ellipsoid\n    var sinphi = Math.sin(phi);\n    var cosphi = Math.cos(phi);\n    var nl = gN(this.a, this.e, sinphi);\n    var tl = Math.tan(phi) * Math.tan(phi);\n    var al = lam * Math.cos(phi);\n    var asq = al * al;\n    var cl = this.es * cosphi * cosphi / (1 - this.es);\n    var ml = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);\n\n    x = nl * al * (1 - asq * tl * (1 / 6 - (8 - tl + 8 * cl) * asq / 120));\n    y = ml - this.ml0 + nl * sinphi / cosphi * asq * (0.5 + (5 - tl + 6 * cl) * asq / 24);\n\n\n  }\n\n  p.x = x + this.x0;\n  p.y = y + this.y0;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var x = p.x / this.a;\n  var y = p.y / this.a;\n  var phi, lam;\n\n  if (this.sphere) {\n    var dd = y + this.lat0;\n    phi = Math.asin(Math.sin(dd) * Math.cos(x));\n    lam = Math.atan2(Math.tan(x), Math.cos(dd));\n  }\n  else {\n    /* ellipsoid */\n    var ml1 = this.ml0 / this.a + y;\n    var phi1 = imlfn(ml1, this.e0, this.e1, this.e2, this.e3);\n    if (Math.abs(Math.abs(phi1) - HALF_PI) <= EPSLN) {\n      p.x = this.long0;\n      p.y = HALF_PI;\n      if (y < 0) {\n        p.y *= -1;\n      }\n      return p;\n    }\n    var nl1 = gN(this.a, this.e, Math.sin(phi1));\n\n    var rl1 = nl1 * nl1 * nl1 / this.a / this.a * (1 - this.es);\n    var tl1 = Math.pow(Math.tan(phi1), 2);\n    var dl = x * this.a / nl1;\n    var dsq = dl * dl;\n    phi = phi1 - nl1 * Math.tan(phi1) / rl1 * dl * dl * (0.5 - (1 + 3 * tl1) * dl * dl / 24);\n    lam = dl * (1 - dsq * (tl1 / 3 + (1 + 3 * tl1) * tl1 * dsq / 15)) / Math.cos(phi1);\n\n  }\n\n  p.x = adjust_lon(lam + this.long0);\n  p.y = adjust_lat(phi);\n  return p;\n\n}\n\nexport var names = [\"Cassini\", \"Cassini_Soldner\", \"cass\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","export default function(eccent, sinphi) {\n  var con;\n  if (eccent > 1.0e-7) {\n    con = eccent * sinphi;\n    return ((1 - eccent * eccent) * (sinphi / (1 - con * con) - (0.5 / eccent) * Math.log((1 - con) / (1 + con))));\n  }\n  else {\n    return (2 * sinphi);\n  }\n}","\nimport {HALF_PI, EPSLN, FORTPI} from '../constants/values';\n\nimport qsfnz from '../common/qsfnz';\nimport adjust_lon from '../common/adjust_lon';\n\n/*\n  reference\n    \"New Equal-Area Map Projections for Noncircular Regions\", John P. Snyder,\n    The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.\n  */\n\nexport var S_POLE = 1;\n\nexport var N_POLE = 2;\nexport var EQUIT = 3;\nexport var OBLIQ = 4;\n\n/* Initialize the Lambert Azimuthal Equal Area projection\n  ------------------------------------------------------*/\nexport function init() {\n  var t = Math.abs(this.lat0);\n  if (Math.abs(t - HALF_PI) < EPSLN) {\n    this.mode = this.lat0 < 0 ? this.S_POLE : this.N_POLE;\n  }\n  else if (Math.abs(t) < EPSLN) {\n    this.mode = this.EQUIT;\n  }\n  else {\n    this.mode = this.OBLIQ;\n  }\n  if (this.es > 0) {\n    var sinphi;\n\n    this.qp = qsfnz(this.e, 1);\n    this.mmf = 0.5 / (1 - this.es);\n    this.apa = authset(this.es);\n    switch (this.mode) {\n    case this.N_POLE:\n      this.dd = 1;\n      break;\n    case this.S_POLE:\n      this.dd = 1;\n      break;\n    case this.EQUIT:\n      this.rq = Math.sqrt(0.5 * this.qp);\n      this.dd = 1 / this.rq;\n      this.xmf = 1;\n      this.ymf = 0.5 * this.qp;\n      break;\n    case this.OBLIQ:\n      this.rq = Math.sqrt(0.5 * this.qp);\n      sinphi = Math.sin(this.lat0);\n      this.sinb1 = qsfnz(this.e, sinphi) / this.qp;\n      this.cosb1 = Math.sqrt(1 - this.sinb1 * this.sinb1);\n      this.dd = Math.cos(this.lat0) / (Math.sqrt(1 - this.es * sinphi * sinphi) * this.rq * this.cosb1);\n      this.ymf = (this.xmf = this.rq) / this.dd;\n      this.xmf *= this.dd;\n      break;\n    }\n  }\n  else {\n    if (this.mode === this.OBLIQ) {\n      this.sinph0 = Math.sin(this.lat0);\n      this.cosph0 = Math.cos(this.lat0);\n    }\n  }\n}\n\n/* Lambert Azimuthal Equal Area forward equations--mapping lat,long to x,y\n  -----------------------------------------------------------------------*/\nexport function forward(p) {\n\n  /* Forward equations\n      -----------------*/\n  var x, y, coslam, sinlam, sinphi, q, sinb, cosb, b, cosphi;\n  var lam = p.x;\n  var phi = p.y;\n\n  lam = adjust_lon(lam - this.long0);\n  if (this.sphere) {\n    sinphi = Math.sin(phi);\n    cosphi = Math.cos(phi);\n    coslam = Math.cos(lam);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      y = (this.mode === this.EQUIT) ? 1 + cosphi * coslam : 1 + this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;\n      if (y <= EPSLN) {\n        return null;\n      }\n      y = Math.sqrt(2 / y);\n      x = y * cosphi * Math.sin(lam);\n      y *= (this.mode === this.EQUIT) ? sinphi : this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;\n    }\n    else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {\n      if (this.mode === this.N_POLE) {\n        coslam = -coslam;\n      }\n      if (Math.abs(phi + this.phi0) < EPSLN) {\n        return null;\n      }\n      y = FORTPI - phi * 0.5;\n      y = 2 * ((this.mode === this.S_POLE) ? Math.cos(y) : Math.sin(y));\n      x = y * Math.sin(lam);\n      y *= coslam;\n    }\n  }\n  else {\n    sinb = 0;\n    cosb = 0;\n    b = 0;\n    coslam = Math.cos(lam);\n    sinlam = Math.sin(lam);\n    sinphi = Math.sin(phi);\n    q = qsfnz(this.e, sinphi);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      sinb = q / this.qp;\n      cosb = Math.sqrt(1 - sinb * sinb);\n    }\n    switch (this.mode) {\n    case this.OBLIQ:\n      b = 1 + this.sinb1 * sinb + this.cosb1 * cosb * coslam;\n      break;\n    case this.EQUIT:\n      b = 1 + cosb * coslam;\n      break;\n    case this.N_POLE:\n      b = HALF_PI + phi;\n      q = this.qp - q;\n      break;\n    case this.S_POLE:\n      b = phi - HALF_PI;\n      q = this.qp + q;\n      break;\n    }\n    if (Math.abs(b) < EPSLN) {\n      return null;\n    }\n    switch (this.mode) {\n    case this.OBLIQ:\n    case this.EQUIT:\n      b = Math.sqrt(2 / b);\n      if (this.mode === this.OBLIQ) {\n        y = this.ymf * b * (this.cosb1 * sinb - this.sinb1 * cosb * coslam);\n      }\n      else {\n        y = (b = Math.sqrt(2 / (1 + cosb * coslam))) * sinb * this.ymf;\n      }\n      x = this.xmf * b * cosb * sinlam;\n      break;\n    case this.N_POLE:\n    case this.S_POLE:\n      if (q >= 0) {\n        x = (b = Math.sqrt(q)) * sinlam;\n        y = coslam * ((this.mode === this.S_POLE) ? b : -b);\n      }\n      else {\n        x = y = 0;\n      }\n      break;\n    }\n  }\n\n  p.x = this.a * x + this.x0;\n  p.y = this.a * y + this.y0;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var x = p.x / this.a;\n  var y = p.y / this.a;\n  var lam, phi, cCe, sCe, q, rho, ab;\n  if (this.sphere) {\n    var cosz = 0,\n      rh, sinz = 0;\n\n    rh = Math.sqrt(x * x + y * y);\n    phi = rh * 0.5;\n    if (phi > 1) {\n      return null;\n    }\n    phi = 2 * Math.asin(phi);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      sinz = Math.sin(phi);\n      cosz = Math.cos(phi);\n    }\n    switch (this.mode) {\n    case this.EQUIT:\n      phi = (Math.abs(rh) <= EPSLN) ? 0 : Math.asin(y * sinz / rh);\n      x *= sinz;\n      y = cosz * rh;\n      break;\n    case this.OBLIQ:\n      phi = (Math.abs(rh) <= EPSLN) ? this.phi0 : Math.asin(cosz * this.sinph0 + y * sinz * this.cosph0 / rh);\n      x *= sinz * this.cosph0;\n      y = (cosz - Math.sin(phi) * this.sinph0) * rh;\n      break;\n    case this.N_POLE:\n      y = -y;\n      phi = HALF_PI - phi;\n      break;\n    case this.S_POLE:\n      phi -= HALF_PI;\n      break;\n    }\n    lam = (y === 0 && (this.mode === this.EQUIT || this.mode === this.OBLIQ)) ? 0 : Math.atan2(x, y);\n  }\n  else {\n    ab = 0;\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      x /= this.dd;\n      y *= this.dd;\n      rho = Math.sqrt(x * x + y * y);\n      if (rho < EPSLN) {\n        p.x = 0;\n        p.y = this.phi0;\n        return p;\n      }\n      sCe = 2 * Math.asin(0.5 * rho / this.rq);\n      cCe = Math.cos(sCe);\n      x *= (sCe = Math.sin(sCe));\n      if (this.mode === this.OBLIQ) {\n        ab = cCe * this.sinb1 + y * sCe * this.cosb1 / rho;\n        q = this.qp * ab;\n        y = rho * this.cosb1 * cCe - y * this.sinb1 * sCe;\n      }\n      else {\n        ab = y * sCe / rho;\n        q = this.qp * ab;\n        y = rho * cCe;\n      }\n    }\n    else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {\n      if (this.mode === this.N_POLE) {\n        y = -y;\n      }\n      q = (x * x + y * y);\n      if (!q) {\n        p.x = 0;\n        p.y = this.phi0;\n        return p;\n      }\n      ab = 1 - q / this.qp;\n      if (this.mode === this.S_POLE) {\n        ab = -ab;\n      }\n    }\n    lam = Math.atan2(x, y);\n    phi = authlat(Math.asin(ab), this.apa);\n  }\n\n  p.x = adjust_lon(this.long0 + lam);\n  p.y = phi;\n  return p;\n}\n\n/* determine latitude from authalic latitude */\nvar P00 = 0.33333333333333333333;\n\nvar P01 = 0.17222222222222222222;\nvar P02 = 0.10257936507936507936;\nvar P10 = 0.06388888888888888888;\nvar P11 = 0.06640211640211640211;\nvar P20 = 0.01641501294219154443;\n\nfunction authset(es) {\n  var t;\n  var APA = [];\n  APA[0] = es * P00;\n  t = es * es;\n  APA[0] += t * P01;\n  APA[1] = t * P10;\n  t *= es;\n  APA[0] += t * P02;\n  APA[1] += t * P11;\n  APA[2] = t * P20;\n  return APA;\n}\n\nfunction authlat(beta, APA) {\n  var t = beta + beta;\n  return (beta + APA[0] * Math.sin(t) + APA[1] * Math.sin(t + t) + APA[2] * Math.sin(t + t + t));\n}\n\nexport var names = [\"Lambert Azimuthal Equal Area\", \"Lambert_Azimuthal_Equal_Area\", \"laea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  S_POLE: S_POLE,\n  N_POLE: N_POLE,\n  EQUIT: EQUIT,\n  OBLIQ: OBLIQ\n};\n","export default function(x) {\n  if (Math.abs(x) > 1) {\n    x = (x > 1) ? 1 : -1;\n  }\n  return Math.asin(x);\n}","import msfnz from '../common/msfnz';\nimport qsfnz from '../common/qsfnz';\nimport adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport {EPSLN} from '../constants/values';\n\nexport function init() {\n\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2);\n  this.e3 = Math.sqrt(this.es);\n\n  this.sin_po = Math.sin(this.lat1);\n  this.cos_po = Math.cos(this.lat1);\n  this.t1 = this.sin_po;\n  this.con = this.sin_po;\n  this.ms1 = msfnz(this.e3, this.sin_po, this.cos_po);\n  this.qs1 = qsfnz(this.e3, this.sin_po, this.cos_po);\n\n  this.sin_po = Math.sin(this.lat2);\n  this.cos_po = Math.cos(this.lat2);\n  this.t2 = this.sin_po;\n  this.ms2 = msfnz(this.e3, this.sin_po, this.cos_po);\n  this.qs2 = qsfnz(this.e3, this.sin_po, this.cos_po);\n\n  this.sin_po = Math.sin(this.lat0);\n  this.cos_po = Math.cos(this.lat0);\n  this.t3 = this.sin_po;\n  this.qs0 = qsfnz(this.e3, this.sin_po, this.cos_po);\n\n  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n    this.ns0 = (this.ms1 * this.ms1 - this.ms2 * this.ms2) / (this.qs2 - this.qs1);\n  }\n  else {\n    this.ns0 = this.con;\n  }\n  this.c = this.ms1 * this.ms1 + this.ns0 * this.qs1;\n  this.rh = this.a * Math.sqrt(this.c - this.ns0 * this.qs0) / this.ns0;\n}\n\n/* Albers Conical Equal Area forward equations--mapping lat,long to x,y\n  -------------------------------------------------------------------*/\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  this.sin_phi = Math.sin(lat);\n  this.cos_phi = Math.cos(lat);\n\n  var qs = qsfnz(this.e3, this.sin_phi, this.cos_phi);\n  var rh1 = this.a * Math.sqrt(this.c - this.ns0 * qs) / this.ns0;\n  var theta = this.ns0 * adjust_lon(lon - this.long0);\n  var x = rh1 * Math.sin(theta) + this.x0;\n  var y = this.rh - rh1 * Math.cos(theta) + this.y0;\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var rh1, qs, con, theta, lon, lat;\n\n  p.x -= this.x0;\n  p.y = this.rh - p.y + this.y0;\n  if (this.ns0 >= 0) {\n    rh1 = Math.sqrt(p.x * p.x + p.y * p.y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);\n    con = -1;\n  }\n  theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2(con * p.x, con * p.y);\n  }\n  con = rh1 * this.ns0 / this.a;\n  if (this.sphere) {\n    lat = Math.asin((this.c - con * con) / (2 * this.ns0));\n  }\n  else {\n    qs = (this.c - con * con) / this.ns0;\n    lat = this.phi1z(this.e3, qs);\n  }\n\n  lon = adjust_lon(theta / this.ns0 + this.long0);\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\n/* Function to compute phi1, the latitude for the inverse of the\n   Albers Conical Equal-Area projection.\n-------------------------------------------*/\nexport function phi1z(eccent, qs) {\n  var sinphi, cosphi, con, com, dphi;\n  var phi = asinz(0.5 * qs);\n  if (eccent < EPSLN) {\n    return phi;\n  }\n\n  var eccnts = eccent * eccent;\n  for (var i = 1; i <= 25; i++) {\n    sinphi = Math.sin(phi);\n    cosphi = Math.cos(phi);\n    con = eccent * sinphi;\n    com = 1 - con * con;\n    dphi = 0.5 * com * com / cosphi * (qs / (1 - eccnts) - sinphi / com + 0.5 / eccent * Math.log((1 - con) / (1 + con)));\n    phi = phi + dphi;\n    if (Math.abs(dphi) <= 1e-7) {\n      return phi;\n    }\n  }\n  return null;\n}\n\nexport var names = [\"Albers_Conic_Equal_Area\", \"Albers\", \"aea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  phi1z: phi1z\n};\n","import adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport {EPSLN} from '../constants/values';\n\n/*\n  reference:\n    Wolfram Mathworld \"Gnomonic Projection\"\n    http://mathworld.wolfram.com/GnomonicProjection.html\n    Accessed: 12th November 2009\n  */\nexport function init() {\n\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.sin_p14 = Math.sin(this.lat0);\n  this.cos_p14 = Math.cos(this.lat0);\n  // Approximation for projecting points to the horizon (infinity)\n  this.infinity_dist = 1000 * this.a;\n  this.rc = 1;\n}\n\n/* Gnomonic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\nexport function forward(p) {\n  var sinphi, cosphi; /* sin and cos value        */\n  var dlon; /* delta longitude value      */\n  var coslon; /* cos of longitude        */\n  var ksp; /* scale factor          */\n  var g;\n  var x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n      -----------------*/\n  dlon = adjust_lon(lon - this.long0);\n\n  sinphi = Math.sin(lat);\n  cosphi = Math.cos(lat);\n\n  coslon = Math.cos(dlon);\n  g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;\n  ksp = 1;\n  if ((g > 0) || (Math.abs(g) <= EPSLN)) {\n    x = this.x0 + this.a * ksp * cosphi * Math.sin(dlon) / g;\n    y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon) / g;\n  }\n  else {\n\n    // Point is in the opposing hemisphere and is unprojectable\n    // We still need to return a reasonable point, so we project\n    // to infinity, on a bearing\n    // equivalent to the northern hemisphere equivalent\n    // This is a reasonable approximation for short shapes and lines that\n    // straddle the horizon.\n\n    x = this.x0 + this.infinity_dist * cosphi * Math.sin(dlon);\n    y = this.y0 + this.infinity_dist * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);\n\n  }\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var rh; /* Rho */\n  var sinc, cosc;\n  var c;\n  var lon, lat;\n\n  /* Inverse equations\n      -----------------*/\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  p.x /= this.k0;\n  p.y /= this.k0;\n\n  if ((rh = Math.sqrt(p.x * p.x + p.y * p.y))) {\n    c = Math.atan2(rh, this.rc);\n    sinc = Math.sin(c);\n    cosc = Math.cos(c);\n\n    lat = asinz(cosc * this.sin_p14 + (p.y * sinc * this.cos_p14) / rh);\n    lon = Math.atan2(p.x * sinc, rh * this.cos_p14 * cosc - p.y * this.sin_p14 * sinc);\n    lon = adjust_lon(this.long0 + lon);\n  }\n  else {\n    lat = this.phic0;\n    lon = 0;\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"gnom\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {HALF_PI} from '../constants/values';\n\nexport default function(eccent, q) {\n  var temp = 1 - (1 - eccent * eccent) / (2 * eccent) * Math.log((1 - eccent) / (1 + eccent));\n  if (Math.abs(Math.abs(q) - temp) < 1.0E-6) {\n    if (q < 0) {\n      return (-1 * HALF_PI);\n    }\n    else {\n      return HALF_PI;\n    }\n  }\n  //var phi = 0.5* q/(1-eccent*eccent);\n  var phi = Math.asin(0.5 * q);\n  var dphi;\n  var sin_phi;\n  var cos_phi;\n  var con;\n  for (var i = 0; i < 30; i++) {\n    sin_phi = Math.sin(phi);\n    cos_phi = Math.cos(phi);\n    con = eccent * sin_phi;\n    dphi = Math.pow(1 - con * con, 2) / (2 * cos_phi) * (q / (1 - eccent * eccent) - sin_phi / (1 - con * con) + 0.5 / eccent * Math.log((1 - con) / (1 + con)));\n    phi += dphi;\n    if (Math.abs(dphi) <= 0.0000000001) {\n      return phi;\n    }\n  }\n\n  //console.log(\"IQSFN-CONV:Latitude failed to converge after 30 iterations\");\n  return NaN;\n}\n","import adjust_lon from '../common/adjust_lon';\nimport qsfnz from '../common/qsfnz';\nimport msfnz from '../common/msfnz';\nimport iqsfnz from '../common/iqsfnz';\n\n/*\n  reference:\n    \"Cartographic Projection Procedures for the UNIX Environment-\n    A User's Manual\" by Gerald I. Evenden,\n    USGS Open File Report 90-284and Release 4 Interim Reports (2003)\n*/\nexport function init() {\n  //no-op\n  if (!this.sphere) {\n    this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));\n  }\n}\n\n/* Cylindrical Equal Area forward equations--mapping lat,long to x,y\n    ------------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var x, y;\n  /* Forward equations\n      -----------------*/\n  var dlon = adjust_lon(lon - this.long0);\n  if (this.sphere) {\n    x = this.x0 + this.a * dlon * Math.cos(this.lat_ts);\n    y = this.y0 + this.a * Math.sin(lat) / Math.cos(this.lat_ts);\n  }\n  else {\n    var qs = qsfnz(this.e, Math.sin(lat));\n    x = this.x0 + this.a * this.k0 * dlon;\n    y = this.y0 + this.a * qs * 0.5 / this.k0;\n  }\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Cylindrical Equal Area inverse equations--mapping x,y to lat/long\n    ------------------------------------------------------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var lon, lat;\n\n  if (this.sphere) {\n    lon = adjust_lon(this.long0 + (p.x / this.a) / Math.cos(this.lat_ts));\n    lat = Math.asin((p.y / this.a) * Math.cos(this.lat_ts));\n  }\n  else {\n    lat = iqsfnz(this.e, 2 * p.y * this.k0 / this.a);\n    lon = adjust_lon(this.long0 + p.x / (this.a * this.k0));\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"cea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\n\nexport function init() {\n\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  this.lat0 = this.lat0 || 0;\n  this.long0 = this.long0 || 0;\n  this.lat_ts = this.lat_ts || 0;\n  this.title = this.title || \"Equidistant Cylindrical (Plate Carre)\";\n\n  this.rc = Math.cos(this.lat_ts);\n}\n\n// forward equations--mapping lat,long to x,y\n// -----------------------------------------------------------------\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  var dlon = adjust_lon(lon - this.long0);\n  var dlat = adjust_lat(lat - this.lat0);\n  p.x = this.x0 + (this.a * dlon * this.rc);\n  p.y = this.y0 + (this.a * dlat);\n  return p;\n}\n\n// inverse equations--mapping x,y to lat/long\n// -----------------------------------------------------------------\nexport function inverse(p) {\n\n  var x = p.x;\n  var y = p.y;\n\n  p.x = adjust_lon(this.long0 + ((x - this.x0) / (this.a * this.rc)));\n  p.y = adjust_lat(this.lat0 + ((y - this.y0) / (this.a)));\n  return p;\n}\n\nexport var names = [\"Equirectangular\", \"Equidistant_Cylindrical\", \"eqc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport mlfn from '../common/mlfn';\nimport {EPSLN} from '../constants/values';\n\nimport gN from '../common/gN';\nvar MAX_ITER = 20;\n\nexport function init() {\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2); // devait etre dans tmerc.js mais n y est pas donc je commente sinon retour de valeurs nulles\n  this.e = Math.sqrt(this.es);\n  this.e0 = e0fn(this.es);\n  this.e1 = e1fn(this.es);\n  this.e2 = e2fn(this.es);\n  this.e3 = e3fn(this.es);\n  this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0); //si que des zeros le calcul ne se fait pas\n}\n\n/* Polyconic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var x, y, el;\n  var dlon = adjust_lon(lon - this.long0);\n  el = dlon * Math.sin(lat);\n  if (this.sphere) {\n    if (Math.abs(lat) <= EPSLN) {\n      x = this.a * dlon;\n      y = -1 * this.a * this.lat0;\n    }\n    else {\n      x = this.a * Math.sin(el) / Math.tan(lat);\n      y = this.a * (adjust_lat(lat - this.lat0) + (1 - Math.cos(el)) / Math.tan(lat));\n    }\n  }\n  else {\n    if (Math.abs(lat) <= EPSLN) {\n      x = this.a * dlon;\n      y = -1 * this.ml0;\n    }\n    else {\n      var nl = gN(this.a, this.e, Math.sin(lat)) / Math.tan(lat);\n      x = nl * Math.sin(el);\n      y = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, lat) - this.ml0 + nl * (1 - Math.cos(el));\n    }\n\n  }\n  p.x = x + this.x0;\n  p.y = y + this.y0;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  var lon, lat, x, y, i;\n  var al, bl;\n  var phi, dphi;\n  x = p.x - this.x0;\n  y = p.y - this.y0;\n\n  if (this.sphere) {\n    if (Math.abs(y + this.a * this.lat0) <= EPSLN) {\n      lon = adjust_lon(x / this.a + this.long0);\n      lat = 0;\n    }\n    else {\n      al = this.lat0 + y / this.a;\n      bl = x * x / this.a / this.a + al * al;\n      phi = al;\n      var tanphi;\n      for (i = MAX_ITER; i; --i) {\n        tanphi = Math.tan(phi);\n        dphi = -1 * (al * (phi * tanphi + 1) - phi - 0.5 * (phi * phi + bl) * tanphi) / ((phi - al) / tanphi - 1);\n        phi += dphi;\n        if (Math.abs(dphi) <= EPSLN) {\n          lat = phi;\n          break;\n        }\n      }\n      lon = adjust_lon(this.long0 + (Math.asin(x * Math.tan(phi) / this.a)) / Math.sin(lat));\n    }\n  }\n  else {\n    if (Math.abs(y + this.ml0) <= EPSLN) {\n      lat = 0;\n      lon = adjust_lon(this.long0 + x / this.a);\n    }\n    else {\n\n      al = (this.ml0 + y) / this.a;\n      bl = x * x / this.a / this.a + al * al;\n      phi = al;\n      var cl, mln, mlnp, ma;\n      var con;\n      for (i = MAX_ITER; i; --i) {\n        con = this.e * Math.sin(phi);\n        cl = Math.sqrt(1 - con * con) * Math.tan(phi);\n        mln = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);\n        mlnp = this.e0 - 2 * this.e1 * Math.cos(2 * phi) + 4 * this.e2 * Math.cos(4 * phi) - 6 * this.e3 * Math.cos(6 * phi);\n        ma = mln / this.a;\n        dphi = (al * (cl * ma + 1) - ma - 0.5 * cl * (ma * ma + bl)) / (this.es * Math.sin(2 * phi) * (ma * ma + bl - 2 * al * ma) / (4 * cl) + (al - ma) * (cl * mlnp - 2 / Math.sin(2 * phi)) - mlnp);\n        phi -= dphi;\n        if (Math.abs(dphi) <= EPSLN) {\n          lat = phi;\n          break;\n        }\n      }\n\n      //lat=phi4z(this.e,this.e0,this.e1,this.e2,this.e3,al,bl,0,0);\n      cl = Math.sqrt(1 - this.es * Math.pow(Math.sin(lat), 2)) * Math.tan(lat);\n      lon = adjust_lon(this.long0 + Math.asin(x * cl / this.a) / Math.sin(lat));\n    }\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Polyconic\", \"poly\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {SEC_TO_RAD} from '../constants/values';\n\n/*\n  reference\n    Department of Land and Survey Technical Circular 1973/32\n      http://www.linz.govt.nz/docs/miscellaneous/nz-map-definition.pdf\n    OSG Technical Report 4.1\n      http://www.linz.govt.nz/docs/miscellaneous/nzmg.pdf\n  */\n\n/**\n * iterations: Number of iterations to refine inverse transform.\n *     0 -> km accuracy\n *     1 -> m accuracy -- suitable for most mapping applications\n *     2 -> mm accuracy\n */\nexport var iterations = 1;\n\nexport function init() {\n  this.A = [];\n  this.A[1] = 0.6399175073;\n  this.A[2] = -0.1358797613;\n  this.A[3] = 0.063294409;\n  this.A[4] = -0.02526853;\n  this.A[5] = 0.0117879;\n  this.A[6] = -0.0055161;\n  this.A[7] = 0.0026906;\n  this.A[8] = -0.001333;\n  this.A[9] = 0.00067;\n  this.A[10] = -0.00034;\n\n  this.B_re = [];\n  this.B_im = [];\n  this.B_re[1] = 0.7557853228;\n  this.B_im[1] = 0;\n  this.B_re[2] = 0.249204646;\n  this.B_im[2] = 0.003371507;\n  this.B_re[3] = -0.001541739;\n  this.B_im[3] = 0.041058560;\n  this.B_re[4] = -0.10162907;\n  this.B_im[4] = 0.01727609;\n  this.B_re[5] = -0.26623489;\n  this.B_im[5] = -0.36249218;\n  this.B_re[6] = -0.6870983;\n  this.B_im[6] = -1.1651967;\n\n  this.C_re = [];\n  this.C_im = [];\n  this.C_re[1] = 1.3231270439;\n  this.C_im[1] = 0;\n  this.C_re[2] = -0.577245789;\n  this.C_im[2] = -0.007809598;\n  this.C_re[3] = 0.508307513;\n  this.C_im[3] = -0.112208952;\n  this.C_re[4] = -0.15094762;\n  this.C_im[4] = 0.18200602;\n  this.C_re[5] = 1.01418179;\n  this.C_im[5] = 1.64497696;\n  this.C_re[6] = 1.9660549;\n  this.C_im[6] = 2.5127645;\n\n  this.D = [];\n  this.D[1] = 1.5627014243;\n  this.D[2] = 0.5185406398;\n  this.D[3] = -0.03333098;\n  this.D[4] = -0.1052906;\n  this.D[5] = -0.0368594;\n  this.D[6] = 0.007317;\n  this.D[7] = 0.01220;\n  this.D[8] = 0.00394;\n  this.D[9] = -0.0013;\n}\n\n/**\n    New Zealand Map Grid Forward  - long/lat to x/y\n    long/lat in radians\n  */\nexport function forward(p) {\n  var n;\n  var lon = p.x;\n  var lat = p.y;\n\n  var delta_lat = lat - this.lat0;\n  var delta_lon = lon - this.long0;\n\n  // 1. Calculate d_phi and d_psi    ...                          // and d_lambda\n  // For this algorithm, delta_latitude is in seconds of arc x 10-5, so we need to scale to those units. Longitude is radians.\n  var d_phi = delta_lat / SEC_TO_RAD * 1E-5;\n  var d_lambda = delta_lon;\n  var d_phi_n = 1; // d_phi^0\n\n  var d_psi = 0;\n  for (n = 1; n <= 10; n++) {\n    d_phi_n = d_phi_n * d_phi;\n    d_psi = d_psi + this.A[n] * d_phi_n;\n  }\n\n  // 2. Calculate theta\n  var th_re = d_psi;\n  var th_im = d_lambda;\n\n  // 3. Calculate z\n  var th_n_re = 1;\n  var th_n_im = 0; // theta^0\n  var th_n_re1;\n  var th_n_im1;\n\n  var z_re = 0;\n  var z_im = 0;\n  for (n = 1; n <= 6; n++) {\n    th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n    th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n    th_n_re = th_n_re1;\n    th_n_im = th_n_im1;\n    z_re = z_re + this.B_re[n] * th_n_re - this.B_im[n] * th_n_im;\n    z_im = z_im + this.B_im[n] * th_n_re + this.B_re[n] * th_n_im;\n  }\n\n  // 4. Calculate easting and northing\n  p.x = (z_im * this.a) + this.x0;\n  p.y = (z_re * this.a) + this.y0;\n\n  return p;\n}\n\n/**\n    New Zealand Map Grid Inverse  -  x/y to long/lat\n  */\nexport function inverse(p) {\n  var n;\n  var x = p.x;\n  var y = p.y;\n\n  var delta_x = x - this.x0;\n  var delta_y = y - this.y0;\n\n  // 1. Calculate z\n  var z_re = delta_y / this.a;\n  var z_im = delta_x / this.a;\n\n  // 2a. Calculate theta - first approximation gives km accuracy\n  var z_n_re = 1;\n  var z_n_im = 0; // z^0\n  var z_n_re1;\n  var z_n_im1;\n\n  var th_re = 0;\n  var th_im = 0;\n  for (n = 1; n <= 6; n++) {\n    z_n_re1 = z_n_re * z_re - z_n_im * z_im;\n    z_n_im1 = z_n_im * z_re + z_n_re * z_im;\n    z_n_re = z_n_re1;\n    z_n_im = z_n_im1;\n    th_re = th_re + this.C_re[n] * z_n_re - this.C_im[n] * z_n_im;\n    th_im = th_im + this.C_im[n] * z_n_re + this.C_re[n] * z_n_im;\n  }\n\n  // 2b. Iterate to refine the accuracy of the calculation\n  //        0 iterations gives km accuracy\n  //        1 iteration gives m accuracy -- good enough for most mapping applications\n  //        2 iterations bives mm accuracy\n  for (var i = 0; i < this.iterations; i++) {\n    var th_n_re = th_re;\n    var th_n_im = th_im;\n    var th_n_re1;\n    var th_n_im1;\n\n    var num_re = z_re;\n    var num_im = z_im;\n    for (n = 2; n <= 6; n++) {\n      th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n      th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n      th_n_re = th_n_re1;\n      th_n_im = th_n_im1;\n      num_re = num_re + (n - 1) * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);\n      num_im = num_im + (n - 1) * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);\n    }\n\n    th_n_re = 1;\n    th_n_im = 0;\n    var den_re = this.B_re[1];\n    var den_im = this.B_im[1];\n    for (n = 2; n <= 6; n++) {\n      th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n      th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n      th_n_re = th_n_re1;\n      th_n_im = th_n_im1;\n      den_re = den_re + n * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);\n      den_im = den_im + n * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);\n    }\n\n    // Complex division\n    var den2 = den_re * den_re + den_im * den_im;\n    th_re = (num_re * den_re + num_im * den_im) / den2;\n    th_im = (num_im * den_re - num_re * den_im) / den2;\n  }\n\n  // 3. Calculate d_phi              ...                                    // and d_lambda\n  var d_psi = th_re;\n  var d_lambda = th_im;\n  var d_psi_n = 1; // d_psi^0\n\n  var d_phi = 0;\n  for (n = 1; n <= 9; n++) {\n    d_psi_n = d_psi_n * d_psi;\n    d_phi = d_phi + this.D[n] * d_psi_n;\n  }\n\n  // 4. Calculate latitude and longitude\n  // d_phi is calcuated in second of arc * 10^-5, so we need to scale back to radians. d_lambda is in radians.\n  var lat = this.lat0 + (d_phi * SEC_TO_RAD * 1E5);\n  var lon = this.long0 + d_lambda;\n\n  p.x = lon;\n  p.y = lat;\n\n  return p;\n}\n\nexport var names = [\"New_Zealand_Map_Grid\", \"nzmg\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\n\n/*\n  reference\n    \"New Equal-Area Map Projections for Noncircular Regions\", John P. Snyder,\n    The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.\n  */\n\n\n/* Initialize the Miller Cylindrical projection\n  -------------------------------------------*/\nexport function init() {\n  //no-op\n}\n\n/* Miller Cylindrical forward equations--mapping lat,long to x,y\n    ------------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n      -----------------*/\n  var dlon = adjust_lon(lon - this.long0);\n  var x = this.x0 + this.a * dlon;\n  var y = this.y0 + this.a * Math.log(Math.tan((Math.PI / 4) + (lat / 2.5))) * 1.25;\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Miller Cylindrical inverse equations--mapping x,y to lat/long\n    ------------------------------------------------------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n\n  var lon = adjust_lon(this.long0 + p.x / this.a);\n  var lat = 2.5 * (Math.atan(Math.exp(0.8 * p.y / this.a)) - Math.PI / 4);\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Miller_Cylindrical\", \"mill\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport pj_enfn from '../common/pj_enfn';\nvar MAX_ITER = 20;\nimport pj_mlfn from '../common/pj_mlfn';\nimport pj_inv_mlfn from '../common/pj_inv_mlfn';\nimport {EPSLN, HALF_PI} from '../constants/values';\n\nimport asinz from '../common/asinz';\n\n\nexport function init() {\n  /* Place parameters in static storage for common use\n    -------------------------------------------------*/\n\n\n  if (!this.sphere) {\n    this.en = pj_enfn(this.es);\n  }\n  else {\n    this.n = 1;\n    this.m = 0;\n    this.es = 0;\n    this.C_y = Math.sqrt((this.m + 1) / this.n);\n    this.C_x = this.C_y / (this.m + 1);\n  }\n\n}\n\n/* Sinusoidal forward equations--mapping lat,long to x,y\n  -----------------------------------------------------*/\nexport function forward(p) {\n  var x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n    -----------------*/\n  lon = adjust_lon(lon - this.long0);\n\n  if (this.sphere) {\n    if (!this.m) {\n      lat = this.n !== 1 ? Math.asin(this.n * Math.sin(lat)) : lat;\n    }\n    else {\n      var k = this.n * Math.sin(lat);\n      for (var i = MAX_ITER; i; --i) {\n        var V = (this.m * lat + Math.sin(lat) - k) / (this.m + Math.cos(lat));\n        lat -= V;\n        if (Math.abs(V) < EPSLN) {\n          break;\n        }\n      }\n    }\n    x = this.a * this.C_x * lon * (this.m + Math.cos(lat));\n    y = this.a * this.C_y * lat;\n\n  }\n  else {\n\n    var s = Math.sin(lat);\n    var c = Math.cos(lat);\n    y = this.a * pj_mlfn(lat, s, c, this.en);\n    x = this.a * lon * c / Math.sqrt(1 - this.es * s * s);\n  }\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var lat, temp, lon, s;\n\n  p.x -= this.x0;\n  lon = p.x / this.a;\n  p.y -= this.y0;\n  lat = p.y / this.a;\n\n  if (this.sphere) {\n    lat /= this.C_y;\n    lon = lon / (this.C_x * (this.m + Math.cos(lat)));\n    if (this.m) {\n      lat = asinz((this.m * lat + Math.sin(lat)) / this.n);\n    }\n    else if (this.n !== 1) {\n      lat = asinz(Math.sin(lat) / this.n);\n    }\n    lon = adjust_lon(lon + this.long0);\n    lat = adjust_lat(lat);\n  }\n  else {\n    lat = pj_inv_mlfn(p.y / this.a, this.es, this.en);\n    s = Math.abs(lat);\n    if (s < HALF_PI) {\n      s = Math.sin(lat);\n      temp = this.long0 + p.x * Math.sqrt(1 - this.es * s * s) / (this.a * Math.cos(lat));\n      //temp = this.long0 + p.x / (this.a * Math.cos(lat));\n      lon = adjust_lon(temp);\n    }\n    else if ((s - EPSLN) < HALF_PI) {\n      lon = this.long0;\n    }\n  }\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Sinusoidal\", \"sinu\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nexport function init() {}\nimport {EPSLN} from '../constants/values';\n/* Mollweide forward equations--mapping lat,long to x,y\n    ----------------------------------------------------*/\nexport function forward(p) {\n\n  /* Forward equations\n      -----------------*/\n  var lon = p.x;\n  var lat = p.y;\n\n  var delta_lon = adjust_lon(lon - this.long0);\n  var theta = lat;\n  var con = Math.PI * Math.sin(lat);\n\n  /* Iterate using the Newton-Raphson method to find theta\n      -----------------------------------------------------*/\n  while (true) {\n    var delta_theta = -(theta + Math.sin(theta) - con) / (1 + Math.cos(theta));\n    theta += delta_theta;\n    if (Math.abs(delta_theta) < EPSLN) {\n      break;\n    }\n  }\n  theta /= 2;\n\n  /* If the latitude is 90 deg, force the x coordinate to be \"0 + false easting\"\n       this is done here because of precision problems with \"cos(theta)\"\n       --------------------------------------------------------------------------*/\n  if (Math.PI / 2 - Math.abs(lat) < EPSLN) {\n    delta_lon = 0;\n  }\n  var x = 0.900316316158 * this.a * delta_lon * Math.cos(theta) + this.x0;\n  var y = 1.4142135623731 * this.a * Math.sin(theta) + this.y0;\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var theta;\n  var arg;\n\n  /* Inverse equations\n      -----------------*/\n  p.x -= this.x0;\n  p.y -= this.y0;\n  arg = p.y / (1.4142135623731 * this.a);\n\n  /* Because of division by zero problems, 'arg' can not be 1.  Therefore\n       a number very close to one is used instead.\n       -------------------------------------------------------------------*/\n  if (Math.abs(arg) > 0.999999999999) {\n    arg = 0.999999999999;\n  }\n  theta = Math.asin(arg);\n  var lon = adjust_lon(this.long0 + (p.x / (0.900316316158 * this.a * Math.cos(theta))));\n  if (lon < (-Math.PI)) {\n    lon = -Math.PI;\n  }\n  if (lon > Math.PI) {\n    lon = Math.PI;\n  }\n  arg = (2 * theta + Math.sin(2 * theta)) / Math.PI;\n  if (Math.abs(arg) > 1) {\n    arg = 1;\n  }\n  var lat = Math.asin(arg);\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Mollweide\", \"moll\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport msfnz from '../common/msfnz';\nimport mlfn from '../common/mlfn';\nimport adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport imlfn from '../common/imlfn';\nimport {EPSLN} from '../constants/values';\n\nexport function init() {\n\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  // Standard Parallels cannot be equal and on opposite sides of the equator\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n  this.lat2 = this.lat2 || this.lat1;\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2);\n  this.e = Math.sqrt(this.es);\n  this.e0 = e0fn(this.es);\n  this.e1 = e1fn(this.es);\n  this.e2 = e2fn(this.es);\n  this.e3 = e3fn(this.es);\n\n  this.sinphi = Math.sin(this.lat1);\n  this.cosphi = Math.cos(this.lat1);\n\n  this.ms1 = msfnz(this.e, this.sinphi, this.cosphi);\n  this.ml1 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat1);\n\n  if (Math.abs(this.lat1 - this.lat2) < EPSLN) {\n    this.ns = this.sinphi;\n  }\n  else {\n    this.sinphi = Math.sin(this.lat2);\n    this.cosphi = Math.cos(this.lat2);\n    this.ms2 = msfnz(this.e, this.sinphi, this.cosphi);\n    this.ml2 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat2);\n    this.ns = (this.ms1 - this.ms2) / (this.ml2 - this.ml1);\n  }\n  this.g = this.ml1 + this.ms1 / this.ns;\n  this.ml0 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);\n  this.rh = this.a * (this.g - this.ml0);\n}\n\n/* Equidistant Conic forward equations--mapping lat,long to x,y\n  -----------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var rh1;\n\n  /* Forward equations\n      -----------------*/\n  if (this.sphere) {\n    rh1 = this.a * (this.g - lat);\n  }\n  else {\n    var ml = mlfn(this.e0, this.e1, this.e2, this.e3, lat);\n    rh1 = this.a * (this.g - ml);\n  }\n  var theta = this.ns * adjust_lon(lon - this.long0);\n  var x = this.x0 + rh1 * Math.sin(theta);\n  var y = this.y0 + this.rh - rh1 * Math.cos(theta);\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y = this.rh - p.y + this.y0;\n  var con, rh1, lat, lon;\n  if (this.ns >= 0) {\n    rh1 = Math.sqrt(p.x * p.x + p.y * p.y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);\n    con = -1;\n  }\n  var theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2(con * p.x, con * p.y);\n  }\n\n  if (this.sphere) {\n    lon = adjust_lon(this.long0 + theta / this.ns);\n    lat = adjust_lat(this.g - rh1 / this.a);\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  else {\n    var ml = this.g - rh1 / this.a;\n    lat = imlfn(ml, this.e0, this.e1, this.e2, this.e3);\n    lon = adjust_lon(this.long0 + theta / this.ns);\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n\n}\n\nexport var names = [\"Equidistant_Conic\", \"eqdc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\n\nimport {HALF_PI, EPSLN} from '../constants/values';\n\nimport asinz from '../common/asinz';\n\n/* Initialize the Van Der Grinten projection\n  ----------------------------------------*/\nexport function init() {\n  //this.R = 6370997; //Radius of earth\n  this.R = this.a;\n}\n\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  /* Forward equations\n    -----------------*/\n  var dlon = adjust_lon(lon - this.long0);\n  var x, y;\n\n  if (Math.abs(lat) <= EPSLN) {\n    x = this.x0 + this.R * dlon;\n    y = this.y0;\n  }\n  var theta = asinz(2 * Math.abs(lat / Math.PI));\n  if ((Math.abs(dlon) <= EPSLN) || (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN)) {\n    x = this.x0;\n    if (lat >= 0) {\n      y = this.y0 + Math.PI * this.R * Math.tan(0.5 * theta);\n    }\n    else {\n      y = this.y0 + Math.PI * this.R * -Math.tan(0.5 * theta);\n    }\n    //  return(OK);\n  }\n  var al = 0.5 * Math.abs((Math.PI / dlon) - (dlon / Math.PI));\n  var asq = al * al;\n  var sinth = Math.sin(theta);\n  var costh = Math.cos(theta);\n\n  var g = costh / (sinth + costh - 1);\n  var gsq = g * g;\n  var m = g * (2 / sinth - 1);\n  var msq = m * m;\n  var con = Math.PI * this.R * (al * (g - msq) + Math.sqrt(asq * (g - msq) * (g - msq) - (msq + asq) * (gsq - msq))) / (msq + asq);\n  if (dlon < 0) {\n    con = -con;\n  }\n  x = this.x0 + con;\n  //con = Math.abs(con / (Math.PI * this.R));\n  var q = asq + g;\n  con = Math.PI * this.R * (m * q - al * Math.sqrt((msq + asq) * (asq + 1) - q * q)) / (msq + asq);\n  if (lat >= 0) {\n    //y = this.y0 + Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);\n    y = this.y0 + con;\n  }\n  else {\n    //y = this.y0 - Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);\n    y = this.y0 - con;\n  }\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Van Der Grinten inverse equations--mapping x,y to lat/long\n  ---------------------------------------------------------*/\nexport function inverse(p) {\n  var lon, lat;\n  var xx, yy, xys, c1, c2, c3;\n  var a1;\n  var m1;\n  var con;\n  var th1;\n  var d;\n\n  /* inverse equations\n    -----------------*/\n  p.x -= this.x0;\n  p.y -= this.y0;\n  con = Math.PI * this.R;\n  xx = p.x / con;\n  yy = p.y / con;\n  xys = xx * xx + yy * yy;\n  c1 = -Math.abs(yy) * (1 + xys);\n  c2 = c1 - 2 * yy * yy + xx * xx;\n  c3 = -2 * c1 + 1 + 2 * yy * yy + xys * xys;\n  d = yy * yy / c3 + (2 * c2 * c2 * c2 / c3 / c3 / c3 - 9 * c1 * c2 / c3 / c3) / 27;\n  a1 = (c1 - c2 * c2 / 3 / c3) / c3;\n  m1 = 2 * Math.sqrt(-a1 / 3);\n  con = ((3 * d) / a1) / m1;\n  if (Math.abs(con) > 1) {\n    if (con >= 0) {\n      con = 1;\n    }\n    else {\n      con = -1;\n    }\n  }\n  th1 = Math.acos(con) / 3;\n  if (p.y >= 0) {\n    lat = (-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;\n  }\n  else {\n    lat = -(-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;\n  }\n\n  if (Math.abs(xx) < EPSLN) {\n    lon = this.long0;\n  }\n  else {\n    lon = adjust_lon(this.long0 + Math.PI * (xys - 1 + Math.sqrt(1 + 2 * (xx * xx - yy * yy) + xys * xys)) / 2 / xx);\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Van_der_Grinten_I\", \"VanDerGrinten\", \"vandg\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport {HALF_PI, EPSLN} from '../constants/values';\n\nimport mlfn from '../common/mlfn';\nimport e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport gN from '../common/gN';\nimport asinz from '../common/asinz';\nimport imlfn from '../common/imlfn';\n\n\n\nexport function init() {\n  this.sin_p12 = Math.sin(this.lat0);\n  this.cos_p12 = Math.cos(this.lat0);\n}\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var sinphi = Math.sin(p.y);\n  var cosphi = Math.cos(p.y);\n  var dlon = adjust_lon(lon - this.long0);\n  var e0, e1, e2, e3, Mlp, Ml, tanphi, Nl1, Nl, psi, Az, G, H, GH, Hs, c, kp, cos_c, s, s2, s3, s4, s5;\n  if (this.sphere) {\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      //North Pole case\n      p.x = this.x0 + this.a * (HALF_PI - lat) * Math.sin(dlon);\n      p.y = this.y0 - this.a * (HALF_PI - lat) * Math.cos(dlon);\n      return p;\n    }\n    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      //South Pole case\n      p.x = this.x0 + this.a * (HALF_PI + lat) * Math.sin(dlon);\n      p.y = this.y0 + this.a * (HALF_PI + lat) * Math.cos(dlon);\n      return p;\n    }\n    else {\n      //default case\n      cos_c = this.sin_p12 * sinphi + this.cos_p12 * cosphi * Math.cos(dlon);\n      c = Math.acos(cos_c);\n      kp = c / Math.sin(c);\n      p.x = this.x0 + this.a * kp * cosphi * Math.sin(dlon);\n      p.y = this.y0 + this.a * kp * (this.cos_p12 * sinphi - this.sin_p12 * cosphi * Math.cos(dlon));\n      return p;\n    }\n  }\n  else {\n    e0 = e0fn(this.es);\n    e1 = e1fn(this.es);\n    e2 = e2fn(this.es);\n    e3 = e3fn(this.es);\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      //North Pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      Ml = this.a * mlfn(e0, e1, e2, e3, lat);\n      p.x = this.x0 + (Mlp - Ml) * Math.sin(dlon);\n      p.y = this.y0 - (Mlp - Ml) * Math.cos(dlon);\n      return p;\n    }\n    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      //South Pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      Ml = this.a * mlfn(e0, e1, e2, e3, lat);\n      p.x = this.x0 + (Mlp + Ml) * Math.sin(dlon);\n      p.y = this.y0 + (Mlp + Ml) * Math.cos(dlon);\n      return p;\n    }\n    else {\n      //Default case\n      tanphi = sinphi / cosphi;\n      Nl1 = gN(this.a, this.e, this.sin_p12);\n      Nl = gN(this.a, this.e, sinphi);\n      psi = Math.atan((1 - this.es) * tanphi + this.es * Nl1 * this.sin_p12 / (Nl * cosphi));\n      Az = Math.atan2(Math.sin(dlon), this.cos_p12 * Math.tan(psi) - this.sin_p12 * Math.cos(dlon));\n      if (Az === 0) {\n        s = Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));\n      }\n      else if (Math.abs(Math.abs(Az) - Math.PI) <= EPSLN) {\n        s = -Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));\n      }\n      else {\n        s = Math.asin(Math.sin(dlon) * Math.cos(psi) / Math.sin(Az));\n      }\n      G = this.e * this.sin_p12 / Math.sqrt(1 - this.es);\n      H = this.e * this.cos_p12 * Math.cos(Az) / Math.sqrt(1 - this.es);\n      GH = G * H;\n      Hs = H * H;\n      s2 = s * s;\n      s3 = s2 * s;\n      s4 = s3 * s;\n      s5 = s4 * s;\n      c = Nl1 * s * (1 - s2 * Hs * (1 - Hs) / 6 + s3 / 8 * GH * (1 - 2 * Hs) + s4 / 120 * (Hs * (4 - 7 * Hs) - 3 * G * G * (1 - 7 * Hs)) - s5 / 48 * GH);\n      p.x = this.x0 + c * Math.sin(Az);\n      p.y = this.y0 + c * Math.cos(Az);\n      return p;\n    }\n  }\n\n\n}\n\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var rh, z, sinz, cosz, lon, lat, con, e0, e1, e2, e3, Mlp, M, N1, psi, Az, cosAz, tmp, A, B, D, Ee, F;\n  if (this.sphere) {\n    rh = Math.sqrt(p.x * p.x + p.y * p.y);\n    if (rh > (2 * HALF_PI * this.a)) {\n      return;\n    }\n    z = rh / this.a;\n\n    sinz = Math.sin(z);\n    cosz = Math.cos(z);\n\n    lon = this.long0;\n    if (Math.abs(rh) <= EPSLN) {\n      lat = this.lat0;\n    }\n    else {\n      lat = asinz(cosz * this.sin_p12 + (p.y * sinz * this.cos_p12) / rh);\n      con = Math.abs(this.lat0) - HALF_PI;\n      if (Math.abs(con) <= EPSLN) {\n        if (this.lat0 >= 0) {\n          lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));\n        }\n        else {\n          lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));\n        }\n      }\n      else {\n        /*con = cosz - this.sin_p12 * Math.sin(lat);\n        if ((Math.abs(con) < EPSLN) && (Math.abs(p.x) < EPSLN)) {\n          //no-op, just keep the lon value as is\n        } else {\n          var temp = Math.atan2((p.x * sinz * this.cos_p12), (con * rh));\n          lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz * this.cos_p12), (con * rh)));\n        }*/\n        lon = adjust_lon(this.long0 + Math.atan2(p.x * sinz, rh * this.cos_p12 * cosz - p.y * this.sin_p12 * sinz));\n      }\n    }\n\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  else {\n    e0 = e0fn(this.es);\n    e1 = e1fn(this.es);\n    e2 = e2fn(this.es);\n    e3 = e3fn(this.es);\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      //North pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      M = Mlp - rh;\n      lat = imlfn(M / this.a, e0, e1, e2, e3);\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      //South pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      M = rh - Mlp;\n\n      lat = imlfn(M / this.a, e0, e1, e2, e3);\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    else {\n      //default case\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      Az = Math.atan2(p.x, p.y);\n      N1 = gN(this.a, this.e, this.sin_p12);\n      cosAz = Math.cos(Az);\n      tmp = this.e * this.cos_p12 * cosAz;\n      A = -tmp * tmp / (1 - this.es);\n      B = 3 * this.es * (1 - A) * this.sin_p12 * this.cos_p12 * cosAz / (1 - this.es);\n      D = rh / N1;\n      Ee = D - A * (1 + A) * Math.pow(D, 3) / 6 - B * (1 + 3 * A) * Math.pow(D, 4) / 24;\n      F = 1 - A * Ee * Ee / 2 - D * Ee * Ee * Ee / 6;\n      psi = Math.asin(this.sin_p12 * Math.cos(Ee) + this.cos_p12 * Math.sin(Ee) * cosAz);\n      lon = adjust_lon(this.long0 + Math.asin(Math.sin(Az) * Math.sin(Ee) / Math.cos(psi)));\n      lat = Math.atan((1 - this.es * F * this.sin_p12 / Math.sin(psi)) * Math.tan(psi) / (1 - this.es));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n  }\n\n}\n\nexport var names = [\"Azimuthal_Equidistant\", \"aeqd\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport {EPSLN, HALF_PI} from '../constants/values';\n\nexport function init() {\n  //double temp;      /* temporary variable    */\n\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.sin_p14 = Math.sin(this.lat0);\n  this.cos_p14 = Math.cos(this.lat0);\n}\n\n/* Orthographic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\nexport function forward(p) {\n  var sinphi, cosphi; /* sin and cos value        */\n  var dlon; /* delta longitude value      */\n  var coslon; /* cos of longitude        */\n  var ksp; /* scale factor          */\n  var g, x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n      -----------------*/\n  dlon = adjust_lon(lon - this.long0);\n\n  sinphi = Math.sin(lat);\n  cosphi = Math.cos(lat);\n\n  coslon = Math.cos(dlon);\n  g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;\n  ksp = 1;\n  if ((g > 0) || (Math.abs(g) <= EPSLN)) {\n    x = this.a * ksp * cosphi * Math.sin(dlon);\n    y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);\n  }\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var rh; /* height above ellipsoid      */\n  var z; /* angle          */\n  var sinz, cosz; /* sin of z and cos of z      */\n  var con;\n  var lon, lat;\n  /* Inverse equations\n      -----------------*/\n  p.x -= this.x0;\n  p.y -= this.y0;\n  rh = Math.sqrt(p.x * p.x + p.y * p.y);\n  z = asinz(rh / this.a);\n\n  sinz = Math.sin(z);\n  cosz = Math.cos(z);\n\n  lon = this.long0;\n  if (Math.abs(rh) <= EPSLN) {\n    lat = this.lat0;\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  lat = asinz(cosz * this.sin_p14 + (p.y * sinz * this.cos_p14) / rh);\n  con = Math.abs(this.lat0) - HALF_PI;\n  if (Math.abs(con) <= EPSLN) {\n    if (this.lat0 >= 0) {\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));\n    }\n    else {\n      lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));\n    }\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz), rh * this.cos_p14 * cosz - p.y * this.sin_p14 * sinz));\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"ortho\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","// QSC projection rewritten from the original PROJ4\n// https://github.com/OSGeo/proj.4/blob/master/src/PJ_qsc.c\n\nimport {EPSLN, TWO_PI, SPI, HALF_PI, FORTPI} from '../constants/values';\n\n/* constants */\nvar FACE_ENUM = {\n    FRONT: 1,\n    RIGHT: 2,\n    BACK: 3,\n    LEFT: 4,\n    TOP: 5,\n    BOTTOM: 6\n};\n\nvar AREA_ENUM = {\n    AREA_0: 1,\n    AREA_1: 2,\n    AREA_2: 3,\n    AREA_3: 4\n};\n\nexport function init() {\n\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  this.lat0 = this.lat0 || 0;\n  this.long0 = this.long0 || 0;\n  this.lat_ts = this.lat_ts || 0;\n  this.title = this.title || \"Quadrilateralized Spherical Cube\";\n\n  /* Determine the cube face from the center of projection. */\n  if (this.lat0 >= HALF_PI - FORTPI / 2.0) {\n    this.face = FACE_ENUM.TOP;\n  } else if (this.lat0 <= -(HALF_PI - FORTPI / 2.0)) {\n    this.face = FACE_ENUM.BOTTOM;\n  } else if (Math.abs(this.long0) <= FORTPI) {\n    this.face = FACE_ENUM.FRONT;\n  } else if (Math.abs(this.long0) <= HALF_PI + FORTPI) {\n    this.face = this.long0 > 0.0 ? FACE_ENUM.RIGHT : FACE_ENUM.LEFT;\n  } else {\n    this.face = FACE_ENUM.BACK;\n  }\n\n  /* Fill in useful values for the ellipsoid <-> sphere shift\n   * described in [LK12]. */\n  if (this.es !== 0) {\n    this.one_minus_f = 1 - (this.a - this.b) / this.a;\n    this.one_minus_f_squared = this.one_minus_f * this.one_minus_f;\n  }\n}\n\n// QSC forward equations--mapping lat,long to x,y\n// -----------------------------------------------------------------\nexport function forward(p) {\n  var xy = {x: 0, y: 0};\n  var lat, lon;\n  var theta, phi;\n  var t, mu;\n  /* nu; */\n  var area = {value: 0};\n\n  // move lon according to projection's lon\n  p.x -= this.long0;\n\n  /* Convert the geodetic latitude to a geocentric latitude.\n   * This corresponds to the shift from the ellipsoid to the sphere\n   * described in [LK12]. */\n  if (this.es !== 0) {//if (P->es != 0) {\n    lat = Math.atan(this.one_minus_f_squared * Math.tan(p.y));\n  } else {\n    lat = p.y;\n  }\n\n  /* Convert the input lat, lon into theta, phi as used by QSC.\n   * This depends on the cube face and the area on it.\n   * For the top and bottom face, we can compute theta and phi\n   * directly from phi, lam. For the other faces, we must use\n   * unit sphere cartesian coordinates as an intermediate step. */\n  lon = p.x; //lon = lp.lam;\n  if (this.face === FACE_ENUM.TOP) {\n    phi = HALF_PI - lat;\n    if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {\n      area.value = AREA_ENUM.AREA_0;\n      theta = lon - HALF_PI;\n    } else if (lon > HALF_PI + FORTPI || lon <= -(HALF_PI + FORTPI)) {\n      area.value = AREA_ENUM.AREA_1;\n      theta = (lon > 0.0 ? lon - SPI : lon + SPI);\n    } else if (lon > -(HALF_PI + FORTPI) && lon <= -FORTPI) {\n      area.value = AREA_ENUM.AREA_2;\n      theta = lon + HALF_PI;\n    } else {\n      area.value = AREA_ENUM.AREA_3;\n      theta = lon;\n    }\n  } else if (this.face === FACE_ENUM.BOTTOM) {\n    phi = HALF_PI + lat;\n    if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {\n      area.value = AREA_ENUM.AREA_0;\n      theta = -lon + HALF_PI;\n    } else if (lon < FORTPI && lon >= -FORTPI) {\n      area.value = AREA_ENUM.AREA_1;\n      theta = -lon;\n    } else if (lon < -FORTPI && lon >= -(HALF_PI + FORTPI)) {\n      area.value = AREA_ENUM.AREA_2;\n      theta = -lon - HALF_PI;\n    } else {\n      area.value = AREA_ENUM.AREA_3;\n      theta = (lon > 0.0 ? -lon + SPI : -lon - SPI);\n    }\n  } else {\n    var q, r, s;\n    var sinlat, coslat;\n    var sinlon, coslon;\n\n    if (this.face === FACE_ENUM.RIGHT) {\n      lon = qsc_shift_lon_origin(lon, +HALF_PI);\n    } else if (this.face === FACE_ENUM.BACK) {\n      lon = qsc_shift_lon_origin(lon, +SPI);\n    } else if (this.face === FACE_ENUM.LEFT) {\n      lon = qsc_shift_lon_origin(lon, -HALF_PI);\n    }\n    sinlat = Math.sin(lat);\n    coslat = Math.cos(lat);\n    sinlon = Math.sin(lon);\n    coslon = Math.cos(lon);\n    q = coslat * coslon;\n    r = coslat * sinlon;\n    s = sinlat;\n\n    if (this.face === FACE_ENUM.FRONT) {\n      phi = Math.acos(q);\n      theta = qsc_fwd_equat_face_theta(phi, s, r, area);\n    } else if (this.face === FACE_ENUM.RIGHT) {\n      phi = Math.acos(r);\n      theta = qsc_fwd_equat_face_theta(phi, s, -q, area);\n    } else if (this.face === FACE_ENUM.BACK) {\n      phi = Math.acos(-q);\n      theta = qsc_fwd_equat_face_theta(phi, s, -r, area);\n    } else if (this.face === FACE_ENUM.LEFT) {\n      phi = Math.acos(-r);\n      theta = qsc_fwd_equat_face_theta(phi, s, q, area);\n    } else {\n      /* Impossible */\n      phi = theta = 0;\n      area.value = AREA_ENUM.AREA_0;\n    }\n  }\n\n  /* Compute mu and nu for the area of definition.\n   * For mu, see Eq. (3-21) in [OL76], but note the typos:\n   * compare with Eq. (3-14). For nu, see Eq. (3-38). */\n  mu = Math.atan((12 / SPI) * (theta + Math.acos(Math.sin(theta) * Math.cos(FORTPI)) - HALF_PI));\n  t = Math.sqrt((1 - Math.cos(phi)) / (Math.cos(mu) * Math.cos(mu)) / (1 - Math.cos(Math.atan(1 / Math.cos(theta)))));\n\n  /* Apply the result to the real area. */\n  if (area.value === AREA_ENUM.AREA_1) {\n    mu += HALF_PI;\n  } else if (area.value === AREA_ENUM.AREA_2) {\n    mu += SPI;\n  } else if (area.value === AREA_ENUM.AREA_3) {\n    mu += 1.5 * SPI;\n  }\n\n  /* Now compute x, y from mu and nu */\n  xy.x = t * Math.cos(mu);\n  xy.y = t * Math.sin(mu);\n  xy.x = xy.x * this.a + this.x0;\n  xy.y = xy.y * this.a + this.y0;\n\n  p.x = xy.x;\n  p.y = xy.y;\n  return p;\n}\n\n// QSC inverse equations--mapping x,y to lat/long\n// -----------------------------------------------------------------\nexport function inverse(p) {\n  var lp = {lam: 0, phi: 0};\n  var mu, nu, cosmu, tannu;\n  var tantheta, theta, cosphi, phi;\n  var t;\n  var area = {value: 0};\n\n  /* de-offset */\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  /* Convert the input x, y to the mu and nu angles as used by QSC.\n   * This depends on the area of the cube face. */\n  nu = Math.atan(Math.sqrt(p.x * p.x + p.y * p.y));\n  mu = Math.atan2(p.y, p.x);\n  if (p.x >= 0.0 && p.x >= Math.abs(p.y)) {\n    area.value = AREA_ENUM.AREA_0;\n  } else if (p.y >= 0.0 && p.y >= Math.abs(p.x)) {\n    area.value = AREA_ENUM.AREA_1;\n    mu -= HALF_PI;\n  } else if (p.x < 0.0 && -p.x >= Math.abs(p.y)) {\n    area.value = AREA_ENUM.AREA_2;\n    mu = (mu < 0.0 ? mu + SPI : mu - SPI);\n  } else {\n    area.value = AREA_ENUM.AREA_3;\n    mu += HALF_PI;\n  }\n\n  /* Compute phi and theta for the area of definition.\n   * The inverse projection is not described in the original paper, but some\n   * good hints can be found here (as of 2011-12-14):\n   * http://fits.gsfc.nasa.gov/fitsbits/saf.93/saf.9302\n   * (search for \"Message-Id: <9302181759.AA25477 at fits.cv.nrao.edu>\") */\n  t = (SPI / 12) * Math.tan(mu);\n  tantheta = Math.sin(t) / (Math.cos(t) - (1 / Math.sqrt(2)));\n  theta = Math.atan(tantheta);\n  cosmu = Math.cos(mu);\n  tannu = Math.tan(nu);\n  cosphi = 1 - cosmu * cosmu * tannu * tannu * (1 - Math.cos(Math.atan(1 / Math.cos(theta))));\n  if (cosphi < -1) {\n    cosphi = -1;\n  } else if (cosphi > +1) {\n    cosphi = +1;\n  }\n\n  /* Apply the result to the real area on the cube face.\n   * For the top and bottom face, we can compute phi and lam directly.\n   * For the other faces, we must use unit sphere cartesian coordinates\n   * as an intermediate step. */\n  if (this.face === FACE_ENUM.TOP) {\n    phi = Math.acos(cosphi);\n    lp.phi = HALF_PI - phi;\n    if (area.value === AREA_ENUM.AREA_0) {\n      lp.lam = theta + HALF_PI;\n    } else if (area.value === AREA_ENUM.AREA_1) {\n      lp.lam = (theta < 0.0 ? theta + SPI : theta - SPI);\n    } else if (area.value === AREA_ENUM.AREA_2) {\n      lp.lam = theta - HALF_PI;\n    } else /* area.value == AREA_ENUM.AREA_3 */ {\n      lp.lam = theta;\n    }\n  } else if (this.face === FACE_ENUM.BOTTOM) {\n    phi = Math.acos(cosphi);\n    lp.phi = phi - HALF_PI;\n    if (area.value === AREA_ENUM.AREA_0) {\n      lp.lam = -theta + HALF_PI;\n    } else if (area.value === AREA_ENUM.AREA_1) {\n      lp.lam = -theta;\n    } else if (area.value === AREA_ENUM.AREA_2) {\n      lp.lam = -theta - HALF_PI;\n    } else /* area.value == AREA_ENUM.AREA_3 */ {\n      lp.lam = (theta < 0.0 ? -theta - SPI : -theta + SPI);\n    }\n  } else {\n    /* Compute phi and lam via cartesian unit sphere coordinates. */\n    var q, r, s;\n    q = cosphi;\n    t = q * q;\n    if (t >= 1) {\n      s = 0;\n    } else {\n      s = Math.sqrt(1 - t) * Math.sin(theta);\n    }\n    t += s * s;\n    if (t >= 1) {\n      r = 0;\n    } else {\n      r = Math.sqrt(1 - t);\n    }\n    /* Rotate q,r,s into the correct area. */\n    if (area.value === AREA_ENUM.AREA_1) {\n      t = r;\n      r = -s;\n      s = t;\n    } else if (area.value === AREA_ENUM.AREA_2) {\n      r = -r;\n      s = -s;\n    } else if (area.value === AREA_ENUM.AREA_3) {\n      t = r;\n      r = s;\n      s = -t;\n    }\n    /* Rotate q,r,s into the correct cube face. */\n    if (this.face === FACE_ENUM.RIGHT) {\n      t = q;\n      q = -r;\n      r = t;\n    } else if (this.face === FACE_ENUM.BACK) {\n      q = -q;\n      r = -r;\n    } else if (this.face === FACE_ENUM.LEFT) {\n      t = q;\n      q = r;\n      r = -t;\n    }\n    /* Now compute phi and lam from the unit sphere coordinates. */\n    lp.phi = Math.acos(-s) - HALF_PI;\n    lp.lam = Math.atan2(r, q);\n    if (this.face === FACE_ENUM.RIGHT) {\n      lp.lam = qsc_shift_lon_origin(lp.lam, -HALF_PI);\n    } else if (this.face === FACE_ENUM.BACK) {\n      lp.lam = qsc_shift_lon_origin(lp.lam, -SPI);\n    } else if (this.face === FACE_ENUM.LEFT) {\n      lp.lam = qsc_shift_lon_origin(lp.lam, +HALF_PI);\n    }\n  }\n\n  /* Apply the shift from the sphere to the ellipsoid as described\n   * in [LK12]. */\n  if (this.es !== 0) {\n    var invert_sign;\n    var tanphi, xa;\n    invert_sign = (lp.phi < 0 ? 1 : 0);\n    tanphi = Math.tan(lp.phi);\n    xa = this.b / Math.sqrt(tanphi * tanphi + this.one_minus_f_squared);\n    lp.phi = Math.atan(Math.sqrt(this.a * this.a - xa * xa) / (this.one_minus_f * xa));\n    if (invert_sign) {\n      lp.phi = -lp.phi;\n    }\n  }\n\n  lp.lam += this.long0;\n  p.x = lp.lam;\n  p.y = lp.phi;\n  return p;\n}\n\n/* Helper function for forward projection: compute the theta angle\n * and determine the area number. */\nfunction qsc_fwd_equat_face_theta(phi, y, x, area) {\n  var theta;\n  if (phi < EPSLN) {\n    area.value = AREA_ENUM.AREA_0;\n    theta = 0.0;\n  } else {\n    theta = Math.atan2(y, x);\n    if (Math.abs(theta) <= FORTPI) {\n      area.value = AREA_ENUM.AREA_0;\n    } else if (theta > FORTPI && theta <= HALF_PI + FORTPI) {\n      area.value = AREA_ENUM.AREA_1;\n      theta -= HALF_PI;\n    } else if (theta > HALF_PI + FORTPI || theta <= -(HALF_PI + FORTPI)) {\n      area.value = AREA_ENUM.AREA_2;\n      theta = (theta >= 0.0 ? theta - SPI : theta + SPI);\n    } else {\n      area.value = AREA_ENUM.AREA_3;\n      theta += HALF_PI;\n    }\n  }\n  return theta;\n}\n\n/* Helper function: shift the longitude. */\nfunction qsc_shift_lon_origin(lon, offset) {\n  var slon = lon + offset;\n  if (slon < -SPI) {\n    slon += TWO_PI;\n  } else if (slon > +SPI) {\n    slon -= TWO_PI;\n  }\n  return slon;\n}\n\nexport var names = [\"Quadrilateralized Spherical Cube\", \"Quadrilateralized_Spherical_Cube\", \"qsc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n\n","// Robinson projection\n// Based on https://github.com/OSGeo/proj.4/blob/master/src/PJ_robin.c\n// Polynomial coeficients from http://article.gmane.org/gmane.comp.gis.proj-4.devel/6039\n\nimport {HALF_PI, D2R, R2D, EPSLN} from '../constants/values';\nimport adjust_lon from '../common/adjust_lon';\n\nvar COEFS_X = [\n    [1.0000, 2.2199e-17, -7.15515e-05, 3.1103e-06],\n    [0.9986, -0.000482243, -2.4897e-05, -1.3309e-06],\n    [0.9954, -0.00083103, -4.48605e-05, -9.86701e-07],\n    [0.9900, -0.00135364, -5.9661e-05, 3.6777e-06],\n    [0.9822, -0.00167442, -4.49547e-06, -5.72411e-06],\n    [0.9730, -0.00214868, -9.03571e-05, 1.8736e-08],\n    [0.9600, -0.00305085, -9.00761e-05, 1.64917e-06],\n    [0.9427, -0.00382792, -6.53386e-05, -2.6154e-06],\n    [0.9216, -0.00467746, -0.00010457, 4.81243e-06],\n    [0.8962, -0.00536223, -3.23831e-05, -5.43432e-06],\n    [0.8679, -0.00609363, -0.000113898, 3.32484e-06],\n    [0.8350, -0.00698325, -6.40253e-05, 9.34959e-07],\n    [0.7986, -0.00755338, -5.00009e-05, 9.35324e-07],\n    [0.7597, -0.00798324, -3.5971e-05, -2.27626e-06],\n    [0.7186, -0.00851367, -7.01149e-05, -8.6303e-06],\n    [0.6732, -0.00986209, -0.000199569, 1.91974e-05],\n    [0.6213, -0.010418, 8.83923e-05, 6.24051e-06],\n    [0.5722, -0.00906601, 0.000182, 6.24051e-06],\n    [0.5322, -0.00677797, 0.000275608, 6.24051e-06]\n];\n\nvar COEFS_Y = [\n    [-5.20417e-18, 0.0124, 1.21431e-18, -8.45284e-11],\n    [0.0620, 0.0124, -1.26793e-09, 4.22642e-10],\n    [0.1240, 0.0124, 5.07171e-09, -1.60604e-09],\n    [0.1860, 0.0123999, -1.90189e-08, 6.00152e-09],\n    [0.2480, 0.0124002, 7.10039e-08, -2.24e-08],\n    [0.3100, 0.0123992, -2.64997e-07, 8.35986e-08],\n    [0.3720, 0.0124029, 9.88983e-07, -3.11994e-07],\n    [0.4340, 0.0123893, -3.69093e-06, -4.35621e-07],\n    [0.4958, 0.0123198, -1.02252e-05, -3.45523e-07],\n    [0.5571, 0.0121916, -1.54081e-05, -5.82288e-07],\n    [0.6176, 0.0119938, -2.41424e-05, -5.25327e-07],\n    [0.6769, 0.011713, -3.20223e-05, -5.16405e-07],\n    [0.7346, 0.0113541, -3.97684e-05, -6.09052e-07],\n    [0.7903, 0.0109107, -4.89042e-05, -1.04739e-06],\n    [0.8435, 0.0103431, -6.4615e-05, -1.40374e-09],\n    [0.8936, 0.00969686, -6.4636e-05, -8.547e-06],\n    [0.9394, 0.00840947, -0.000192841, -4.2106e-06],\n    [0.9761, 0.00616527, -0.000256, -4.2106e-06],\n    [1.0000, 0.00328947, -0.000319159, -4.2106e-06]\n];\n\nvar FXC = 0.8487;\nvar FYC = 1.3523;\nvar C1 = R2D/5; // rad to 5-degree interval\nvar RC1 = 1/C1;\nvar NODES = 18;\n\nvar poly3_val = function(coefs, x) {\n    return coefs[0] + x * (coefs[1] + x * (coefs[2] + x * coefs[3]));\n};\n\nvar poly3_der = function(coefs, x) {\n    return coefs[1] + x * (2 * coefs[2] + x * 3 * coefs[3]);\n};\n\nfunction newton_rapshon(f_df, start, max_err, iters) {\n    var x = start;\n    for (; iters; --iters) {\n        var upd = f_df(x);\n        x -= upd;\n        if (Math.abs(upd) < max_err) {\n            break;\n        }\n    }\n    return x;\n}\n\nexport function init() {\n    this.x0 = this.x0 || 0;\n    this.y0 = this.y0 || 0;\n    this.long0 = this.long0 || 0;\n    this.es = 0;\n    this.title = this.title || \"Robinson\";\n}\n\nexport function forward(ll) {\n    var lon = adjust_lon(ll.x - this.long0);\n\n    var dphi = Math.abs(ll.y);\n    var i = Math.floor(dphi * C1);\n    if (i < 0) {\n        i = 0;\n    } else if (i >= NODES) {\n        i = NODES - 1;\n    }\n    dphi = R2D * (dphi - RC1 * i);\n    var xy = {\n        x: poly3_val(COEFS_X[i], dphi) * lon,\n        y: poly3_val(COEFS_Y[i], dphi)\n    };\n    if (ll.y < 0) {\n        xy.y = -xy.y;\n    }\n\n    xy.x = xy.x * this.a * FXC + this.x0;\n    xy.y = xy.y * this.a * FYC + this.y0;\n    return xy;\n}\n\nexport function inverse(xy) {\n    var ll = {\n        x: (xy.x - this.x0) / (this.a * FXC),\n        y: Math.abs(xy.y - this.y0) / (this.a * FYC)\n    };\n\n    if (ll.y >= 1) { // pathologic case\n        ll.x /= COEFS_X[NODES][0];\n        ll.y = xy.y < 0 ? -HALF_PI : HALF_PI;\n    } else {\n        // find table interval\n        var i = Math.floor(ll.y * NODES);\n        if (i < 0) {\n            i = 0;\n        } else if (i >= NODES) {\n            i = NODES - 1;\n        }\n        for (;;) {\n            if (COEFS_Y[i][0] > ll.y) {\n                --i;\n            } else if (COEFS_Y[i+1][0] <= ll.y) {\n                ++i;\n            } else {\n                break;\n            }\n        }\n        // linear interpolation in 5 degree interval\n        var coefs = COEFS_Y[i];\n        var t = 5 * (ll.y - coefs[0]) / (COEFS_Y[i+1][0] - coefs[0]);\n        // find t so that poly3_val(coefs, t) = ll.y\n        t = newton_rapshon(function(x) {\n            return (poly3_val(coefs, x) - ll.y) / poly3_der(coefs, x);\n        }, t, EPSLN, 100);\n\n        ll.x /= poly3_val(COEFS_X[i], t);\n        ll.y = (5 * i + t) * D2R;\n        if (xy.y < 0) {\n            ll.y = -ll.y;\n        }\n    }\n\n    ll.x = adjust_lon(ll.x + this.long0);\n    return ll;\n}\n\nexport var names = [\"Robinson\", \"robin\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import tmerc from './lib/projections/tmerc';\nimport etmerc from './lib/projections/etmerc';\nimport utm from './lib/projections/utm';\nimport sterea from './lib/projections/sterea';\nimport stere from './lib/projections/stere';\nimport somerc from './lib/projections/somerc';\nimport omerc from './lib/projections/omerc';\nimport lcc from './lib/projections/lcc';\nimport krovak from './lib/projections/krovak';\nimport cass from './lib/projections/cass';\nimport laea from './lib/projections/laea';\nimport aea from './lib/projections/aea';\nimport gnom from './lib/projections/gnom';\nimport cea from './lib/projections/cea';\nimport eqc from './lib/projections/eqc';\nimport poly from './lib/projections/poly';\nimport nzmg from './lib/projections/nzmg';\nimport mill from './lib/projections/mill';\nimport sinu from './lib/projections/sinu';\nimport moll from './lib/projections/moll';\nimport eqdc from './lib/projections/eqdc';\nimport vandg from './lib/projections/vandg';\nimport aeqd from './lib/projections/aeqd';\nimport ortho from './lib/projections/ortho';\nimport qsc from './lib/projections/qsc';\nimport robin from './lib/projections/robin';\nexport default function(proj4){\n  proj4.Proj.projections.add(tmerc);\n  proj4.Proj.projections.add(etmerc);\n  proj4.Proj.projections.add(utm);\n  proj4.Proj.projections.add(sterea);\n  proj4.Proj.projections.add(stere);\n  proj4.Proj.projections.add(somerc);\n  proj4.Proj.projections.add(omerc);\n  proj4.Proj.projections.add(lcc);\n  proj4.Proj.projections.add(krovak);\n  proj4.Proj.projections.add(cass);\n  proj4.Proj.projections.add(laea);\n  proj4.Proj.projections.add(aea);\n  proj4.Proj.projections.add(gnom);\n  proj4.Proj.projections.add(cea);\n  proj4.Proj.projections.add(eqc);\n  proj4.Proj.projections.add(poly);\n  proj4.Proj.projections.add(nzmg);\n  proj4.Proj.projections.add(mill);\n  proj4.Proj.projections.add(sinu);\n  proj4.Proj.projections.add(moll);\n  proj4.Proj.projections.add(eqdc);\n  proj4.Proj.projections.add(vandg);\n  proj4.Proj.projections.add(aeqd);\n  proj4.Proj.projections.add(ortho);\n  proj4.Proj.projections.add(qsc);\n  proj4.Proj.projections.add(robin);\n}","import proj4 from './core';\nimport Proj from \"./Proj\";\nimport Point from \"./Point\";\nimport common from \"./common/toPoint\";\nimport defs from \"./defs\";\nimport transform from \"./transform\";\nimport mgrs from \"mgrs\";\nimport version from \"./version\";\nimport includedProjections from \"../projs\";\n\nproj4.defaultDatum = 'WGS84'; //default datum\nproj4.Proj = Proj;\nproj4.WGS84 = new proj4.Proj('WGS84');\nproj4.Point = Point;\nproj4.toPoint = common;\nproj4.defs = defs;\nproj4.transform = transform;\nproj4.mgrs = mgrs;\nproj4.version = version;\nincludedProjections(proj4);\nexport default proj4;\n","<template>\r\n  <div id=\"cyclo-container\"\r\n       :class=\"this.cycloContainerClass\"\r\n  >\r\n  <!-- v-once -->\r\n    <div id=\"inCycloDiv\"\r\n         @click=\"this.popoutClicked\"\r\n         :style=\"{ right: popoutPosition }\"\r\n         v-if=\"this.isMobileOrTablet === false && this.popoutAble === true\"\r\n    >\r\n      <font-awesome-icon icon=\"external-link-alt\" class=\"popout-icon\" />\r\n    </div>\r\n    <div id=\"cycloviewer\"\r\n         ref=\"cycloviewer\"\r\n         class=\"panoramaViewerWindow\"\r\n    >\r\n    <!-- @mousedown=\"console.log('mouseup')\" -->\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import proj4 from 'proj4';\r\n\r\n  export default {\r\n    name: 'CyclomediaWidget',\r\n    data() {\r\n      return {\r\n        'docWidth': 0,\r\n        'divWidth': 0,\r\n        'popoutPosition': 0,\r\n      }\r\n    },\r\n    props: ['screenPercent'],\r\n    computed: {\r\n      isMobileOrTablet() {\r\n        return this.$store.state.isMobileOrTablet;\r\n      },\r\n      fullScreenMapEnabled() {\r\n        return this.$store.state.fullScreenMapEnabled;\r\n      },\r\n      popoutAble() {\r\n        let answer;\r\n        if (this.$config.cyclomedia.popoutAble === false) {\r\n          answer = false\r\n        } else {\r\n          answer = true\r\n        }\r\n        return answer\r\n      },\r\n      cyclomediaInitialized() {\r\n        return this.$store.state.cyclomedia.initialized;\r\n      },\r\n      cyclomediaActive() {\r\n        return this.$store.state.cyclomedia.active;\r\n      },\r\n      pictometryActive() {\r\n        return this.$store.state.pictometry.active;\r\n      },\r\n      cycloContainerClass() {\r\n        if (this.pictometryActive) {\r\n          return 'medium-16 large-16 columns mb-panel'\r\n        } else {\r\n          return 'medium-24 large-24 columns mb-panel'\r\n        }\r\n      },\r\n      locForCyclo() {\r\n        // console.log('computing locForCyclo');\r\n        const geocodeData = this.$store.state.geocode.data;\r\n        const map = this.$store.state.map.map;\r\n        if (geocodeData) {\r\n          return [geocodeData.geometry.coordinates[1], geocodeData.geometry.coordinates[0]];\r\n        }\r\n      },\r\n      latLngFromMap() {\r\n        return this.$store.state.cyclomedia.latLngFromMap;\r\n      },\r\n      mapCenter() {\r\n        return this.$store.state.map.center;\r\n      },\r\n      navBarOpen() {\r\n        return this.$store.state.cyclomedia.navBarOpen;\r\n      },\r\n      projection4326() {\r\n        return \"+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs\";\r\n      },\r\n      projection2272() {\r\n        return \"+proj=lcc +lat_1=40.96666666666667 +lat_2=39.93333333333333 +lat_0=39.33333333333334 +lon_0=-77.75 +x_0=600000 +y_0=0 +ellps=GRS80 +datum=NAD83 +to_meter=0.3048006096012192 +no_defs\";\r\n      },\r\n      // surfaceCursorOn() {\r\n      //   return this.$store.state.cyclomedia.surfaceCursorOn;\r\n      // }\r\n    },\r\n    watch: {\r\n      fullScreenMapEnabled() {\r\n        this.setDivWidth();\r\n      },\r\n      locForCyclo(newCoords) {\r\n        // console.log('watch locForCyclo is firing, setNewLocation running with newCoords:', newCoords);\r\n        if (newCoords) {\r\n          this.setNewLocation(newCoords);\r\n        }\r\n      },\r\n      latLngFromMap(newCoords) {\r\n        // console.log('watch latLngFromMap is firing, setNewLocation running with newCoords:', newCoords);\r\n        if (this.cyclomediaInitialized) {\r\n\r\n          if (Array.isArray(newCoords)) {\r\n            // console.log('it is an array');\r\n            this.setNewLocation([newCoords[1], newCoords[0]]);\r\n          } else {\r\n            // console.log('it is not an array');\r\n            this.setNewLocation([newCoords.lat, newCoords.lng]);\r\n          }\r\n        }\r\n      },\r\n      // docWidthComp() {\r\n      //   console.log('docWidth changed');\r\n      // }\r\n      cyclomediaInitialized() {\r\n        StreetSmartApi.init({\r\n          targetElement: this.$refs.cycloviewer,\r\n          username: this.$config.cyclomedia.username,\r\n          password: this.$config.cyclomedia.password,\r\n          apiKey: this.$config.cyclomedia.apiKey,\r\n          // srs: 'EPSG:4326',\r\n          srs: 'EPSG:2272',\r\n          locale: 'en-us',\r\n          addressSettings: {\r\n            locale: 'en-us',\r\n            database: 'CMDatabase'\r\n          }\r\n        }).then (\r\n          () => {\r\n            // get map center and set location\r\n            const latLngFromMap = this.$store.state.cyclomedia.latLngFromMap;\r\n            this.setNewLocation([latLngFromMap[0], latLngFromMap[1]]);\r\n          },\r\n          err => {\r\n            // console.log('Api: init: failed. Error: ', err);\r\n          }\r\n        );\r\n        window.addEventListener('resize', this.setDivWidth);\r\n      },\r\n      cyclomediaActive(newActiveStatus) {\r\n        this.setDivWidth();\r\n        if (newActiveStatus === true) {\r\n          this.setNewLocation(this.latLngFromMap);\r\n        }\r\n      },\r\n      // pictometryActive() {\r\n      //   this.setDivWidth();\r\n      // }\r\n    },\r\n    updated() {\r\n      // console.log('cyclomedia updated running');\r\n      // TODO find a better way to get the image to update and not be stretched\r\n      // const viewer = this.$store.state.cyclomedia.viewer;\r\n      if (this.cyclomediaActive) {\r\n        if (window.panoramaViewer) {\r\n          window.panoramaViewer.rotateRight(0.0000001);\r\n        }\r\n      }\r\n      this.setDivWidth();\r\n    },\r\n    methods: {\r\n      setDivWidth() {\r\n        const docWidth = document.body.clientWidth;\r\n        this.docWidth = docWidth;\r\n        const el = document.getElementById('cyclo-container');\r\n        const divStyle = window.getComputedStyle(el);\r\n        const divWidth = parseFloat(divStyle.getPropertyValue('width').replace('px', ''));\r\n        this.divWidth = divWidth;\r\n        // console.log('setDivWidth is running, docWidth:', docWidth, 'divWidth', divWidth);\r\n        let answer;\r\n        if (this.fullScreenMapEnabled) {\r\n          answer = docWidth - divWidth + 'px';\r\n        } else {\r\n          answer = docWidth - (docWidth/this.$props.screenPercent + divWidth) + 'px';\r\n        }\r\n        // console.log('setDivWidth, answer:', answer);\r\n        this.popoutPosition = answer;\r\n        // return width;\r\n      },\r\n      setNewLocation(coords) {\r\n        // console.log('cyclomedia setNewLocation is running using', coords);\r\n        const viewerType = StreetSmartApi.ViewerType.PANORAMA;\r\n        const coords2272 = proj4(this.projection4326, this.projection2272, [coords[1], coords[0]]);\r\n        // StreetSmartApi.open(center.lng + ',' + center.lat, {\r\n        // StreetSmartApi.open(coords[1] + ',' + coords[0], {\r\n        StreetSmartApi.open(coords2272[0] + ',' + coords2272[1], {\r\n          viewerType: viewerType,\r\n          srs: 'EPSG:2272',\r\n          // srs: 'EPSG:4326',\r\n          panoramaViewer: {\r\n            closable: false,\r\n            maximizable: false,\r\n          }\r\n        }).then (\r\n          function(result) {\r\n            // console.log('StreetSmartApi2, result:', result);\r\n            const widget = this;\r\n            // console.log('Created component through API:', result);\r\n            if (result) {\r\n              for (let i =0; i < result.length; i++) {\r\n                if(result[i].getType() === StreetSmartApi.ViewerType.PANORAMA) window.panoramaViewer = result[i];\r\n              }\r\n              widget.sendOrientationToStore();\r\n\r\n              // StreetSmartApi.removeOverlay()\r\n              window.panoramaViewer.toggleNavbarExpanded(widget.navBarOpen);\r\n              // if (widget.isMobileOrTablet) {\r\n              // console.log('about to remove surfaceCursorLayer');\r\n              // StreetSmartApi.removeOverlay('surfaceCursorLayer');\r\n              // console.log('removed surfaceCursorLayer');\r\n              // }\r\n\r\n              // StreetSmartApi.removeOverlay('measurementLayer');\r\n              // window.panoramaViewer.toggleButtonEnabled('panorama.measure', false);\r\n              window.panoramaViewer.toggleButtonEnabled('panorama.elevation', false);\r\n              window.panoramaViewer.toggleButtonEnabled('panorama.reportBlurring', false);\r\n\r\n              for (let overlay of window.panoramaViewer.props.overlays) {\r\n                // console.log('overlay:', overlay);\r\n                if (overlay.id === 'surfaceCursorLayer') {\r\n                  if (overlay.visible === true) {\r\n                    window.panoramaViewer.toggleOverlay(overlay);\r\n                    // overlay.visible = false;\r\n                  }\r\n                }\r\n              }\r\n\r\n              if (!this.$config.cyclomedia.measurementAllowed || this.$config.cyclomedia.measurementAllowed === 'false') {\r\n                StreetSmartApi.removeOverlay('measurementLayer');\r\n                window.panoramaViewer.toggleButtonEnabled('panorama.measure', false);\r\n              }\r\n\r\n              window.panoramaViewer.on('VIEW_CHANGE', function() {\r\n                if (window.panoramaViewer.props.orientation.yaw !== widget.$store.state.cyclomedia.orientation.yaw ||\r\n                    window.panoramaViewer.props.orientation.xyz !== widget.$store.state.cyclomedia.orientation.xyz\r\n                ) {\r\n                  // console.log('on VIEW_CHANGE fired with yaw change', window.panoramaViewer.props.orientation);\r\n                  widget.sendOrientationToStore();\r\n                } else if (window.panoramaViewer.getNavbarExpanded() !== this.navBarOpen) {\r\n                  widget.$store.commit('setCyclomediaNavBarOpen', window.panoramaViewer.getNavbarExpanded());\r\n                }\r\n              })\r\n\r\n              window.panoramaViewer.on('VIEW_LOAD_END', function() {\r\n                if (window.panoramaViewer.props.orientation.yaw !== widget.$store.state.cyclomedia.orientation.yaw ||\r\n                    window.panoramaViewer.props.orientation.xyz !== widget.$store.state.cyclomedia.orientation.xyz\r\n                ) {\r\n                  // console.log('on VIEW_CHANGE fired with yaw change', window.panoramaViewer.props.orientation);\r\n                  widget.sendOrientationToStore();\r\n                } else if (window.panoramaViewer.getNavbarExpanded() !== this.navBarOpen) {\r\n                  widget.$store.commit('setCyclomediaNavBarOpen', window.panoramaViewer.getNavbarExpanded());\r\n                }\r\n              })\r\n            }\r\n          }.bind(this)\r\n        ).catch(\r\n          function(reason) {\r\n            // console.log('Failed to create component(s) through API: ' + reason);\r\n          }\r\n        );\r\n\r\n        // const viewer = this.$store.state.cyclomedia.viewer;\r\n        // viewer.openByCoordinate(coords);\r\n      },\r\n      sendOrientationToStore() {\r\n        // console.log('sendOrientationToStore, yaw:', window.panoramaViewer.props.orientation.yaw);\r\n        this.$store.commit('setCyclomediaYaw', window.panoramaViewer.props.orientation.yaw)\r\n        this.$store.commit('setCyclomediaHFov', window.panoramaViewer.props.orientation.hFov)\r\n        const xy = [window.panoramaViewer.props.orientation.xyz[0], window.panoramaViewer.props.orientation.xyz[1]];\r\n        const lnglat = proj4(this.projection2272, this.projection4326, xy);\r\n        // console.log('xy:', xy, 'lnglat', lnglat);\r\n        this.$store.commit('setCyclomediaXyz', lnglat);\r\n      },\r\n      popoutClicked() {\r\n        const map = this.$store.state.map.map;\r\n        const center = map.getCenter();\r\n        window.open('//cyclomedia.phila.gov/?' + center.lat + '&' + center.lng, '_blank');\r\n        this.$store.commit('setCyclomediaActive', false);\r\n      }\r\n    }\r\n  };\r\n</script>\r\n\r\n<style>\r\n\r\n#cyclo-container {\r\n  padding: 0px;\r\n  height: 50%;\r\n  display: none;\r\n}\r\n\r\n@media screen and (min-width: 46.875em) {\r\n  #cyclo-container {\r\n    display: block;\r\n  }\r\n}\r\n\r\n#inCycloDiv {\r\n  /* position: absolute; */\r\n  position: absolute;\r\n  /* top: 0px; */\r\n  right: 0px;\r\n  /* float: right; */\r\n  background-color: white;\r\n  border: 0px solid;\r\n  width: 30px;\r\n  height: 30px;\r\n  cursor:pointer;\r\n  z-index: 10;\r\n}\r\n\r\n.popout-icon {\r\n  margin-top: 8.5px;\r\n  font-size: 15px;\r\n  margin-left: 8.5px;\r\n}\r\n\r\n.panoramaViewerWindow {\r\n  display: block;\r\n  width: 100%;\r\n  height:100%;\r\n}\r\n\r\n@media screen and (max-width: 46.875em) {\r\n  .cyclo-container {\r\n    display: none;\r\n  }\r\n}\r\n\r\n</style>\r\n","import mod from \"-!../../../topicsmap/node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../topicsmap/node_modules/thread-loader/dist/cjs.js!../../../topicsmap/node_modules/babel-loader/lib/index.js!../../../topicsmap/node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../topicsmap/node_modules/vue-loader/lib/index.js??vue-loader-options!./Widget.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../topicsmap/node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../topicsmap/node_modules/thread-loader/dist/cjs.js!../../../topicsmap/node_modules/babel-loader/lib/index.js!../../../topicsmap/node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../topicsmap/node_modules/vue-loader/lib/index.js??vue-loader-options!./Widget.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Widget.vue?vue&type=template&id=9ef96144&\"\nimport script from \"./Widget.vue?vue&type=script&lang=js&\"\nexport * from \"./Widget.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Widget.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../topicsmap/node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import mod from \"-!../../../topicsmap/node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../topicsmap/node_modules/css-loader/index.js??ref--6-oneOf-1-1!../../../topicsmap/node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../topicsmap/node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../topicsmap/node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../topicsmap/node_modules/vue-loader/lib/index.js??vue-loader-options!./Widget.vue?vue&type=style&index=0&lang=css&\"; export default mod; export * from \"-!../../../topicsmap/node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../topicsmap/node_modules/css-loader/index.js??ref--6-oneOf-1-1!../../../topicsmap/node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../topicsmap/node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../topicsmap/node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../topicsmap/node_modules/vue-loader/lib/index.js??vue-loader-options!./Widget.vue?vue&type=style&index=0&lang=css&\""],"sourceRoot":""}